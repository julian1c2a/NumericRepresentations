<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_base__num__t_8hpp_source" xml:lang="es">
<title>base_num_t.hpp</title>
<indexterm><primary>base_num_t.hpp</primary></indexterm>
Ir a la documentaci√≥n de este archivo.<programlisting linenumbering="unnumbered"><anchor xml:id="_base__num__t_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;BASE_NUM_T_HPP_INCLUDED</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;BASE_NUM_T_HPP_INCLUDED</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00003"/>00003 
<anchor xml:id="_base__num__t_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_int__reg__digs__t_8hpp">int_reg_digs_t.hpp</link>&quot;</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00005"/>00005 
<anchor xml:id="_base__num__t_8hpp_source_1l00006"/>00006 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_num_repr">NumRepr</link>{
<anchor xml:id="_base__num__t_8hpp_source_1l00007"/>00007 
<anchor xml:id="_base__num__t_8hpp_source_1l00008"/>00008 <emphasis role="keyword">template</emphasis>&lt;type_traits::u<emphasis role="keywordtype">int</emphasis>_type_for_radix_c&#32;UINT_T,UINT_T&#32;B&gt;
<anchor xml:id="_base__num__t_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(type_traits::suitable_base&lt;UINT_T,B&gt;())
<anchor xml:id="_base__num__t_8hpp_source_1l00010"/><link linkend="_struct_num_repr_1_1base__num__t">00010</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t">base_num_t</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;basic_string&lt;<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t&lt;UINT_T,B&gt;</link>&gt;&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00011"/>00011 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_base__num__t_8hpp_source_1l00012"/><link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">00012</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;&#32;&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t&lt;UINT_T,B&gt;</link>;
<anchor xml:id="_base__num__t_8hpp_source_1l00013"/><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">00013</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;&#32;&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;basic_string&lt;dig_t&gt;;
<anchor xml:id="_base__num__t_8hpp_source_1l00014"/><link linkend="_struct_num_repr_1_1base__num__t_1a2b79d742a555f9688163b35ffd8a82e0">00014</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;&#32;&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a2b79d742a555f9688163b35ffd8a82e0">str_iterator</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;base_t::iterator;
<anchor xml:id="_base__num__t_8hpp_source_1l00015"/><link linkend="_struct_num_repr_1_1base__num__t_1ac7eba12b51ee0bc2d80aa37a51b30f52">00015</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;&#32;&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1ac7eba12b51ee0bc2d80aa37a51b30f52">c_str_iterator</link>&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;base_t::const_iterator;
<anchor xml:id="_base__num__t_8hpp_source_1l00016"/><link linkend="_struct_num_repr_1_1base__num__t_1adf77fead0babc21e854c33121fbb2f10">00016</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;&#32;&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1adf77fead0babc21e854c33121fbb2f10">r_str_iterator</link>&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;base_t::reverse_iterator;
<anchor xml:id="_base__num__t_8hpp_source_1l00017"/><link linkend="_struct_num_repr_1_1base__num__t_1a89047e263bf4c5881da7024e18bdd72a">00017</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;&#32;&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a89047e263bf4c5881da7024e18bdd72a">cr_str_iterator</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;base_t::const_reverse_iterator;
<anchor xml:id="_base__num__t_8hpp_source_1l00018"/>00018 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_base__num__t_8hpp_source_1l00019"/><link linkend="_struct_num_repr_1_1base__num__t_1ae9342a10ee981b65001a2b4ac9531c2a">00019</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1ae9342a10ee981b65001a2b4ac9531c2a">size</link>()&#32;const&#32;noexcept
<anchor xml:id="_base__num__t_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;size());&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00021"/>00021 
<anchor xml:id="_base__num__t_8hpp_source_1l00022"/><link linkend="_struct_num_repr_1_1base__num__t_1a787fd6e3da2fc99d82cafb0c019d3a6e">00022</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a787fd6e3da2fc99d82cafb0c019d3a6e">resize</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;resize());&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00024"/>00024 
<anchor xml:id="_base__num__t_8hpp_source_1l00025"/><link linkend="_struct_num_repr_1_1base__num__t_1aa87935430034d037a47f77d48129d396">00025</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t</link>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1aa87935430034d037a47f77d48129d396">operator[]</link>(ullint&#32;arg)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<emphasis role="keyword">operator</emphasis>[](arg));
<anchor xml:id="_base__num__t_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00028"/>00028 
<anchor xml:id="_base__num__t_8hpp_source_1l00029"/><link linkend="_struct_num_repr_1_1base__num__t_1ab45f89faa50972e77b570e23000d880b">00029</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t</link>&#32;&amp;&#32;<link linkend="_struct_num_repr_1_1base__num__t_1ab45f89faa50972e77b570e23000d880b">operator[]</link>(ullint&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<emphasis role="keyword">operator</emphasis>[](arg));
<anchor xml:id="_base__num__t_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00032"/>00032 
<anchor xml:id="_base__num__t_8hpp_source_1l00033"/><link linkend="_struct_num_repr_1_1base__num__t_1a2228b2ea1c8eb9e62cab5195997ba27c">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a2228b2ea1c8eb9e62cab5195997ba27c">clear</link>()&#32;noexcept
<anchor xml:id="_base__num__t_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;clear();&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00035"/>00035 
<anchor xml:id="_base__num__t_8hpp_source_1l00036"/><link linkend="_struct_num_repr_1_1base__num__t_1ac3b9a3016627cc57cd83994fb1cff928">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1ac3b9a3016627cc57cd83994fb1cff928">push_back</link>(<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t</link>&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;push_back(arg);&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00038"/>00038 
<anchor xml:id="_base__num__t_8hpp_source_1l00039"/><link linkend="_struct_num_repr_1_1base__num__t_1a6f5da3393f245c55d9d5bd9b60f84605">00039</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a6f5da3393f245c55d9d5bd9b60f84605">insert</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;pos,<emphasis role="keywordtype">size_t</emphasis>&#32;tam,<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t</link>&#32;parg)
<anchor xml:id="_base__num__t_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;insert(pos,tam,parg);&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00042"/>00042 
<anchor xml:id="_base__num__t_8hpp_source_1l00043"/><link linkend="_struct_num_repr_1_1base__num__t_1a840806eac58252d667191b46398cc2bf">00043</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;num_basic_t&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a840806eac58252d667191b46398cc2bf">substr</link>&#32;(&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;n&#32;)&#32;<emphasis role="keyword">const</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;substr(pos,n);
<anchor xml:id="_base__num__t_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis}
<anchor xml:id="_base__num__t_8hpp_source_1l00047"/>00047 
<anchor xml:id="_base__num__t_8hpp_source_1l00048"/><link linkend="_struct_num_repr_1_1base__num__t_1a3cadf0a0ed7ae17bedd45c9679ea0471">00048</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a3cadf0a0ed7ae17bedd45c9679ea0471">push_front</link>(<link linkend="_struct_num_repr_1_1base__num__t_1a7659e7b2966d79b14fba17dbb4df50e9">dig_t</link>&#32;parg)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;insert(0,1,parg);}
<anchor xml:id="_base__num__t_8hpp_source_1l00050"/>00050 
<anchor xml:id="_base__num__t_8hpp_source_1l00051"/><link linkend="_struct_num_repr_1_1base__num__t_1a71ac9b65847cc53e17b8f51c828a9063">00051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a2b79d742a555f9688163b35ffd8a82e0">str_iterator</link>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a71ac9b65847cc53e17b8f51c828a9063">begin</link>()&#32;noexcept
<anchor xml:id="_base__num__t_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;begin();&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00053"/>00053 
<anchor xml:id="_base__num__t_8hpp_source_1l00054"/><link linkend="_struct_num_repr_1_1base__num__t_1a224f4e6e79d9956275db559135f3da38">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1ac7eba12b51ee0bc2d80aa37a51b30f52">c_str_iterator</link>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a224f4e6e79d9956275db559135f3da38">end</link>()&#32;const&#32;noexcept
<anchor xml:id="_base__num__t_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;end();&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00056"/>00056 
<anchor xml:id="_base__num__t_8hpp_source_1l00057"/><link linkend="_struct_num_repr_1_1base__num__t_1a875d4f1b0d61c6cb3931d1e87e9aeb0d">00057</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1adf77fead0babc21e854c33121fbb2f10">r_str_iterator</link>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a875d4f1b0d61c6cb3931d1e87e9aeb0d">rbegin</link>()&#32;noexcept
<anchor xml:id="_base__num__t_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;rbegin();&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00059"/>00059 
<anchor xml:id="_base__num__t_8hpp_source_1l00060"/><link linkend="_struct_num_repr_1_1base__num__t_1a965c670bbbced1ed61f43a5ee39f2d0f">00060</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a89047e263bf4c5881da7024e18bdd72a">cr_str_iterator</link>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a965c670bbbced1ed61f43a5ee39f2d0f">rend</link>()&#32;const&#32;noexcept
<anchor xml:id="_base__num__t_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;rbegin();&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00062"/>00062 
<anchor xml:id="_base__num__t_8hpp_source_1l00063"/><link linkend="_struct_num_repr_1_1base__num__t_1a6ae3c24171fa8af240327437913ac659">00063</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_num_repr_1_1base__num__t_1a6ae3c24171fa8af240327437913ac659">erase</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;pos,<emphasis role="keywordtype">size_t</emphasis>&#32;tam)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;erase(pos,tam);&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00065"/>00065 
<anchor xml:id="_base__num__t_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;OPERADOR&#32;DE&#32;CONCATENACION</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00067"/><link linkend="_struct_num_repr_1_1base__num__t_1a6e6eeda172a8ae2ded447ce44a2718dc">00067</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;num_basic_t&#32;&amp;&#32;<emphasis role="keyword">operator</emphasis>&#32;&amp;=
<anchor xml:id="_base__num__t_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">const</emphasis>&#32;num_basic_t&#32;&amp;&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_num_repr_1_1base__num__t_1a07bb043524bd17f239096c966cd657bd">base_t</link>*&#32;const<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)))&#32;+=&#32;arg;
<anchor xml:id="_base__num__t_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_base__num__t_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00073"/>00073 };
<anchor xml:id="_base__num__t_8hpp_source_1l00074"/>00074 
<anchor xml:id="_base__num__t_8hpp_source_1l00075"/>00075 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Int_T&#32;,&#32;us<emphasis role="keywordtype">int</emphasis>&#32;B&#32;&gt;
<anchor xml:id="_base__num__t_8hpp_source_1l00076"/>00076 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00077"/><link linkend="_namespace_num_repr_1a518d83628ca3a414ac5e12e47bd7bd5b">00077</link> ullint&#32;<link linkend="_namespace_num_repr_1a518d83628ca3a414ac5e12e47bd7bd5b">pot_max_base_B_en_Int_T</link>()&#32;noexcept&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;max&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(type_traits::maxbase&lt;Int_T&gt;());
<anchor xml:id="_base__num__t_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_unit&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(numeric_limits&lt;char&gt;::max());
<anchor xml:id="_base__num__t_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;nb_unit&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(1+(log(max_unit)/log(2)));
<anchor xml:id="_base__num__t_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;n_units_Int_T&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">sizeof</emphasis>(Int_T));
<anchor xml:id="_base__num__t_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;nb_Int_T&#32;=&#32;nb_unit&#32;*&#32;n_units_Int_T;
<anchor xml:id="_base__num__t_8hpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;log_2_b_B&#32;=&#32;std::log(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(2))/std::log(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(B));
<anchor xml:id="_base__num__t_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ld_expB&#32;=&#32;(std::floor(nb_Int_T&#32;*&#32;log_2_b_B));
<anchor xml:id="_base__num__t_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//long&#32;double&#32;ld_potB&#32;=&#32;(floor(pow(static_cast&lt;long&#32;double&gt;(B),ld_expB)));</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;ullint&#32;ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ullint<emphasis role="keyword">&gt;</emphasis>(ld_expB);
<anchor xml:id="_base__num__t_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_base__num__t_8hpp_source_1l00088"/>00088 }
<anchor xml:id="_base__num__t_8hpp_source_1l00089"/>00089 
<anchor xml:id="_base__num__t_8hpp_source_1l00090"/>00090 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Int_T&#32;,&#32;ull<emphasis role="keywordtype">int</emphasis>&#32;B&#32;&gt;
<anchor xml:id="_base__num__t_8hpp_source_1l00091"/><link linkend="_namespace_num_repr_1a0c4ce13b175150d7a33d5c7b515f9dfa">00091</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;ullint&#32;<link linkend="_namespace_num_repr_1a0c4ce13b175150d7a33d5c7b515f9dfa">num_digs_max_base_B_en_Int_T</link>()&#32;noexcept&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;max&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(numeric_limits&lt;Int_T&gt;::max()&#32;+&#32;1);
<anchor xml:id="_base__num__t_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_unit&#32;=&#32;2*<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(numeric_limits&lt;char&gt;::max()&#32;+&#32;1);
<anchor xml:id="_base__num__t_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;nb_unit&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>((log(max_unit)/log(2)));
<anchor xml:id="_base__num__t_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;n_units_Int_T&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">sizeof</emphasis>(Int_T));
<anchor xml:id="_base__num__t_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;nb_Int_T&#32;=&#32;nb_unit&#32;*&#32;n_units_Int_T;
<anchor xml:id="_base__num__t_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;log_2_b_B&#32;=&#32;log(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(2))/log(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(B));
<anchor xml:id="_base__num__t_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ld_expB&#32;=&#32;(floor(nb_Int_T&#32;*&#32;log_2_b_B));
<anchor xml:id="_base__num__t_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ld_potB&#32;=&#32;(floor(pow(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(B),ld_expB)));
<anchor xml:id="_base__num__t_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//bool&#32;B_es_pot_de_2&#32;=&#32;false;</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ullint&#32;pot_2&#32;=&#32;2;
<anchor xml:id="_base__num__t_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ullint&#32;b=1&#32;;&#32;b&#32;&lt;&#32;max_unit;&#32;b++)&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(B==pot_2)&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ld_expB+=<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(1);
<anchor xml:id="_base__num__t_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//B_es_pot_de_2&#32;=&#32;true;</emphasis>
<anchor xml:id="_base__num__t_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_base__num__t_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pot_2&#32;*=&#32;2;
<anchor xml:id="_base__num__t_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_pot_B_Int_T&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(pot_max_base_B_en_Int_T&lt;Int_T,B&gt;());
<anchor xml:id="_base__num__t_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;multiplo&#32;=&#32;1;
<anchor xml:id="_base__num__t_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ullint&#32;ind&#32;=&#32;0;
<anchor xml:id="_base__num__t_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((multiplo&#32;&lt;&#32;max)&#32;and&#32;(ind&#32;&lt;&#32;B))&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;multiplo&#32;=&#32;floor(multiplo&#32;&#32;+&#32;&#32;max_pot_B_Int_T);
<anchor xml:id="_base__num__t_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multiplo&#32;&gt;&#32;max)&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;multiplo&#32;=&#32;floor(multiplo&#32;-&#32;max_pot_B_Int_T);
<anchor xml:id="_base__num__t_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ullint&#32;ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ullint<emphasis role="keyword">&gt;</emphasis>(multiplo-1.0);
<anchor xml:id="_base__num__t_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_base__num__t_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++ind;
<anchor xml:id="_base__num__t_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_base__num__t_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;ullint&#32;ret&#32;=&#32;ullint(ld_expB);
<anchor xml:id="_base__num__t_8hpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_base__num__t_8hpp_source_1l00124"/>00124 }
<anchor xml:id="_base__num__t_8hpp_source_1l00125"/>00125 
<anchor xml:id="_base__num__t_8hpp_source_1l00126"/>00126 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Int_T&#32;,&#32;ull<emphasis role="keywordtype">int</emphasis>&#32;B&#32;&gt;
<anchor xml:id="_base__num__t_8hpp_source_1l00127"/><link linkend="_namespace_num_repr_1aeced1290d3d28bee5b4a0e22840a72db">00127</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;ullint&#32;<link linkend="_namespace_num_repr_1aeced1290d3d28bee5b4a0e22840a72db">max_base_B_en_Int_T</link>()&#32;noexcept&#32;{
<anchor xml:id="_base__num__t_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;max&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(numeric_limits&lt;Int_T&gt;::max());
<anchor xml:id="_base__num__t_8hpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;n_digs_base_B&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(num_digs_max_base_B_en_Int_T&lt;Int_T,B&gt;());
<anchor xml:id="_base__num__t_8hpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;dos&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(2);
<anchor xml:id="_base__num__t_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;base&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(B);
<anchor xml:id="_base__num__t_8hpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;ullint&#32;ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ullint<emphasis role="keyword">&gt;</emphasis>(ceil((n_digs_base_B*log(dos))/log(base)));
<anchor xml:id="_base__num__t_8hpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_base__num__t_8hpp_source_1l00134"/>00134 }
<anchor xml:id="_base__num__t_8hpp_source_1l00135"/>00135 }
<anchor xml:id="_base__num__t_8hpp_source_1l00136"/>00136 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;&#32;BASE_NUM_T__HPP__INCLUDED</emphasis>
</programlisting></section>
