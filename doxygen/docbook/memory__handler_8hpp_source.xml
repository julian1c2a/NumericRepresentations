<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_memory__handler_8hpp_source" xml:lang="es">
<title>memory_handler.hpp</title>
<indexterm><primary>memory_handler.hpp</primary></indexterm>
Ir a la documentaci√≥n de este archivo.<programlisting linenumbering="unnumbered"><anchor xml:id="_memory__handler_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;MEMORY_HANDLER_HPP_INCLUDED</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;MEMORY_HANDLER_HPP_INCLUDED</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00003"/>00003 
<anchor xml:id="_memory__handler_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_dig__t_8hpp">dig_t.hpp</link>&quot;</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00005"/>00005 
<anchor xml:id="_memory__handler_8hpp_source_1l00006"/>00006 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_memory__handler_8hpp_source_1l00007"/>00007 
<anchor xml:id="_memory__handler_8hpp_source_1l00008"/><link linkend="_memory__handler_8hpp_1a60c1e28a922223c20df67006f36b968a">00008</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_memory__handler_8hpp_1a60c1e28a922223c20df67006f36b968a">par_dir_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::pair&lt;&#32;uchint&#32;,&#32;uchint&#32;&gt;;
<anchor xml:id="_memory__handler_8hpp_source_1l00009"/><link linkend="_memory__handler_8hpp_1a7c4df9f931f63c4c5264a6997df9f98d">00009</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_memory__handler_8hpp_1a7c4df9f931f63c4c5264a6997df9f98d">func_refn2digs_prim_t</link>&#32;=&#32;std::map&lt;&#32;std::string&#32;,&#32;par_dir_t&#32;&gt;;
<anchor xml:id="_memory__handler_8hpp_source_1l00010"/><link linkend="_memory__handler_8hpp_1acc7a50b42df1b5ee77b8c2b16b90eab7">00010</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_memory__handler_8hpp_1acc7a50b42df1b5ee77b8c2b16b90eab7">func_refdig_prim_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::map&lt;&#32;std::string&#32;,&#32;par_dir_t&#32;&gt;;
<anchor xml:id="_memory__handler_8hpp_source_1l00011"/>00011 
<anchor xml:id="_memory__handler_8hpp_source_1l00012"/><link linkend="_namespacedetails">00012</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedetails">details</link>&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00013"/>00013 
<anchor xml:id="_memory__handler_8hpp_source_1l00014"/>00014 <emphasis role="keyword">template</emphasis>&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,
<anchor xml:id="_memory__handler_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;usint&#32;num_vars&#32;,&#32;uchint&#32;B&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00016"/><link linkend="_structdetails_1_1cp__new">00016</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__new">cp_new</link>&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00017"/>00017 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00018"/><link linkend="_structdetails_1_1cp__new_1a479edf9fda80c05ef9a9be9eec8e5c3a">00018</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;aT*&#32;<link linkend="_structdetails_1_1cp__new_1a479edf9fda80c05ef9a9be9eec8e5c3a">contruye_lista_de_variables</link>(aT*&#32;var_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;aT[num_vars];
<anchor xml:id="_memory__handler_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;var_list;
<anchor xml:id="_memory__handler_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00022"/>00022 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00023"/><link linkend="_structdetails_1_1cp__new_1a674103f596ac614f876144d95625fa23">00023</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__new_1a674103f596ac614f876144d95625fa23">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&lt;B&gt;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_structdetails_1_1cp__new_1a479edf9fda80c05ef9a9be9eec8e5c3a">contruye_lista_de_variables</link>(var_list_list[B]));
<anchor xml:id="_memory__handler_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__new">cp_new</link>&lt;aT,T,num_vars,B-1u&gt;(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00027"/>00027 };
<anchor xml:id="_memory__handler_8hpp_source_1l00028"/>00028 
<anchor xml:id="_memory__handler_8hpp_source_1l00029"/>00029 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;&#32;usint&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00030"/><link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4">00030</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__new">cp_new</link>&lt;aT,T,std::numeric_limits&lt;uchint&gt;::max()&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00031"/>00031 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00032"/><link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1affd7283a990519977808b80c4fd39295">00032</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;aT**&#32;<link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1affd7283a990519977808b80c4fd39295">contruye_lista_de_listas_de_variables</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var_list_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;aT*[std::numeric_limits&lt;uchint&gt;::max()];
<anchor xml:id="_memory__handler_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;var_list_list;
<anchor xml:id="_memory__handler_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00036"/><link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1ada7ba416741cc31ec4f96f7c92e5a3cc">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;aT*&#32;<link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1ada7ba416741cc31ec4f96f7c92e5a3cc">contruye_lista_de_variables</link>(aT*&#32;var_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;aT[num_vars];
<anchor xml:id="_memory__handler_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;var_list;
<anchor xml:id="_memory__handler_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00040"/>00040 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00041"/><link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1a364f5a172ed5a1d98e1847df4caade8f">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__new_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1a364f5a172ed5a1d98e1847df4caade8f">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construye_lista_de_lista_de_variables(var_list_listlist_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&lt;std::numeric_limits&lt;uchint&gt;::max()<emphasis role="keyword">&gt;</emphasis>*&gt;(<link linkend="_structdetails_1_1cp__new_1a479edf9fda80c05ef9a9be9eec8e5c3a">contruye_lista_de_variables</link>(var_list_list[std::numeric_limits&lt;uchint&gt;::max()]));
<anchor xml:id="_memory__handler_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__new">cp_new&lt;aT,T,num_vars,std::numeric_limits&lt;uchint&gt;::max</link>()-1&gt;(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00046"/>00046 };
<anchor xml:id="_memory__handler_8hpp_source_1l00047"/>00047 
<anchor xml:id="_memory__handler_8hpp_source_1l00048"/>00048 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;&#32;usint&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00049"/><link linkend="_structdetails_1_1cp__new_3_012_01_4">00049</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__new">cp_new</link>&lt;2&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00050"/>00050 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00051"/><link linkend="_structdetails_1_1cp__new_3_012_01_4_1ae1d02e9e9f4679ec95010020ddee0113">00051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;aT*&#32;<link linkend="_structdetails_1_1cp__new_3_012_01_4_1ae1d02e9e9f4679ec95010020ddee0113">contruye_lista_de_variables</link>(aT*&#32;var_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;aT[num_vars];
<anchor xml:id="_memory__handler_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;var_list;
<anchor xml:id="_memory__handler_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00055"/>00055 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00056"/><link linkend="_structdetails_1_1cp__new_3_012_01_4_1a4145679ff55c1f6202e6afb9cde4cddf">00056</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__new_3_012_01_4_1a4145679ff55c1f6202e6afb9cde4cddf">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&lt;2u&gt;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_structdetails_1_1cp__new_1a479edf9fda80c05ef9a9be9eec8e5c3a">contruye_lista_de_variables</link>(var_list_list[2u]));
<anchor xml:id="_memory__handler_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__new">cp_new&lt;aT,T,num_vars,1u&gt;</link>(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00060"/>00060 };
<anchor xml:id="_memory__handler_8hpp_source_1l00061"/>00061 
<anchor xml:id="_memory__handler_8hpp_source_1l00062"/>00062 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;&#32;usint&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00063"/><link linkend="_structdetails_1_1cp__new_3_011u_01_4">00063</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__new">cp_new</link>&lt;1u&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00064"/><link linkend="_structdetails_1_1cp__new_3_011u_01_4_1a1a826df7a238c0a75f0e23ff670c9dba">00064</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__new_3_011u_01_4_1a1a826df7a238c0a75f0e23ff670c9dba">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var_list_list[1u]=<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__new">cp_new&lt;aT,T,num_vars,0u&gt;</link>(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00068"/>00068 };
<anchor xml:id="_memory__handler_8hpp_source_1l00069"/>00069 
<anchor xml:id="_memory__handler_8hpp_source_1l00070"/>00070 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;&#32;usint&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00071"/><link linkend="_structdetails_1_1cp__new_3_010u_01_4">00071</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__new">cp_new</link>&lt;0u&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00072"/><link linkend="_structdetails_1_1cp__new_3_010u_01_4_1af8c0086fe3084e294c01db552f452613">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__new_3_010u_01_4_1af8c0086fe3084e294c01db552f452613">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var_list_list[0u]=<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00075"/>00075 };
<anchor xml:id="_memory__handler_8hpp_source_1l00076"/>00076 
<anchor xml:id="_memory__handler_8hpp_source_1l00077"/>00077 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;uchint&#32;B&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00078"/><link linkend="_structdetails_1_1cp__delete">00078</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__delete">cp_delete</link>&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00079"/>00079 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00080"/><link linkend="_structdetails_1_1cp__delete_1ae7256e3961b6516f37d144d7f2f521ff">00080</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_1ae7256e3961b6516f37d144d7f2f521ff">destruye_lista_de_variables</link>(aT*&#32;var_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;matd[B];
<anchor xml:id="_memory__handler_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00083"/>00083 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00084"/><link linkend="_structdetails_1_1cp__delete_1abd0cf2f40295b124e6ecbb55ca06948c">00084</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_1abd0cf2f40295b124e6ecbb55ca06948c">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete_1ae7256e3961b6516f37d144d7f2f521ff">destruye_lista_de_variables</link>(var_list_list[B]);
<anchor xml:id="_memory__handler_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete">cp_delete</link>&lt;aT,T,B-1&gt;(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00088"/>00088 };
<anchor xml:id="_memory__handler_8hpp_source_1l00089"/>00089 
<anchor xml:id="_memory__handler_8hpp_source_1l00090"/>00090 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00091"/><link linkend="_structdetails_1_1cp__delete_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4">00091</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__delete">cp_delete</link>&lt;aT,T,std::numeric_limits&lt;uchint&gt;::max()&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00092"/>00092 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00093"/><link linkend="_structdetails_1_1cp__delete_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1a58d1e093ea6550a995971bef525306f4">00093</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1a58d1e093ea6550a995971bef525306f4">contruye_lista_de_variables</link>(aT*&#32;var_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;matd[std::numeric_limits&lt;uchint&gt;::max()];
<anchor xml:id="_memory__handler_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00096"/>00096 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00097"/><link linkend="_structdetails_1_1cp__delete_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1a6403d0c85e272cb3cbfdad6fcd6b1feb">00097</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_3_01a_t_00_01_t_00_01std_1_1numeric__limits_3_01uchint_01_4_1_1max_07_08_4_1a6403d0c85e272cb3cbfdad6fcd6b1feb">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete_1ae7256e3961b6516f37d144d7f2f521ff">destruye_lista_de_variables</link>(var_list_list[std::numeric_limits&lt;uchint&gt;::max()]);
<anchor xml:id="_memory__handler_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete">cp_delete&lt;aT,T,std::numeric_limits&lt;uchint&gt;::max</link>()-1u&gt;(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00101"/>00101 };
<anchor xml:id="_memory__handler_8hpp_source_1l00102"/>00102 
<anchor xml:id="_memory__handler_8hpp_source_1l00103"/>00103 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00104"/><link linkend="_structdetails_1_1cp__delete_3_012u_01_4">00104</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__delete">cp_delete</link>&lt;2u&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00105"/>00105 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00106"/><link linkend="_structdetails_1_1cp__delete_3_012u_01_4_1af61c966e76e35fbff5fb4f1acda07538">00106</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_3_012u_01_4_1af61c966e76e35fbff5fb4f1acda07538">contruye_lista_de_variables</link>(aT*&#32;var_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete_1ae7256e3961b6516f37d144d7f2f521ff">destruye_lista_de_variables</link>(var_list_list[2u]);
<anchor xml:id="_memory__handler_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00109"/>00109 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00110"/><link linkend="_structdetails_1_1cp__delete_3_012u_01_4_1acc659b1028b927525b5295b551ecd923">00110</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_3_012u_01_4_1acc659b1028b927525b5295b551ecd923">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&lt;2u&gt;*<emphasis role="keyword">&gt;</emphasis>(contruye_lista_de_variables(var_list_list[2u]));
<anchor xml:id="_memory__handler_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete">cp_delete&lt;aT,T,1&gt;</link>(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00114"/>00114 };
<anchor xml:id="_memory__handler_8hpp_source_1l00115"/>00115 
<anchor xml:id="_memory__handler_8hpp_source_1l00116"/>00116 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00117"/><link linkend="_structdetails_1_1cp__delete_3_011u_01_4">00117</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__delete">cp_delete</link>&lt;1u&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00118"/><link linkend="_structdetails_1_1cp__delete_3_011u_01_4_1a714971e4ac0479f48133c755274886ed">00118</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_3_011u_01_4_1a714971e4ac0479f48133c755274886ed">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(var_list_list[1u]&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_memory__handler_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;var_list_list[1u];
<anchor xml:id="_memory__handler_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete">cp_delete&lt;aT,T,0u&gt;</link>(var_list_list);
<anchor xml:id="_memory__handler_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00123"/>00123 };
<anchor xml:id="_memory__handler_8hpp_source_1l00124"/>00124 
<anchor xml:id="_memory__handler_8hpp_source_1l00125"/>00125 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;&#32;usint&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00126"/><link linkend="_structdetails_1_1cp__delete_3_010u_01_4">00126</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdetails_1_1cp__delete">cp_delete</link>&lt;0u&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00127"/><link linkend="_structdetails_1_1cp__delete_3_010u_01_4_1ab46c85282606f86e706f42cd9fbd2a93">00127</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdetails_1_1cp__delete_3_010u_01_4_1ab46c85282606f86e706f42cd9fbd2a93">operator()</link>(aT**&#32;var_list_list)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(var_list_list[0u]&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_memory__handler_8hpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;var_list_list[0u];
<anchor xml:id="_memory__handler_8hpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;var_list_list;
<anchor xml:id="_memory__handler_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00132"/>00132 };
<anchor xml:id="_memory__handler_8hpp_source_1l00133"/>00133 }
<anchor xml:id="_memory__handler_8hpp_source_1l00134"/>00134 
<anchor xml:id="_memory__handler_8hpp_source_1l00135"/>00135 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;,&#32;usint&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(num_vars&gt;0)
<anchor xml:id="_memory__handler_8hpp_source_1l00137"/><link linkend="_memory__handler_8hpp_1ada4037a5d571a8f3f17908dedd6790f5">00137</link> aT**&#32;<link linkend="_memory__handler_8hpp_1ada4037a5d571a8f3f17908dedd6790f5">construye_matriz_de_variables</link>(aT**&#32;matd)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__new">details::cp_new&lt;aT,T,num_vars,std::numeric_limits&lt;uchint&gt;::max</link>()&gt;(matd);
<anchor xml:id="_memory__handler_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00140"/>00140 }
<anchor xml:id="_memory__handler_8hpp_source_1l00141"/>00141 
<anchor xml:id="_memory__handler_8hpp_source_1l00142"/>00142 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00143"/><link linkend="_memory__handler_8hpp_1a29e9bdcfaf16780d350b4464cf30cc24">00143</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_memory__handler_8hpp_1a29e9bdcfaf16780d350b4464cf30cc24">destruye_matriz_de_variables</link>(aT**&#32;matd)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdetails_1_1cp__delete">details::cp_delete&lt;aT,T,std::numeric_limits&lt;uchint&gt;::max</link>()&gt;(matd);
<anchor xml:id="_memory__handler_8hpp_source_1l00145"/>00145 }
<anchor xml:id="_memory__handler_8hpp_source_1l00146"/>00146 
<anchor xml:id="_memory__handler_8hpp_source_1l00147"/><link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">00147</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>&#32;=&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int;
<anchor xml:id="_memory__handler_8hpp_source_1l00148"/>00148 
<anchor xml:id="_memory__handler_8hpp_source_1l00149"/>00149 <emphasis role="keyword">template</emphasis>&lt;us<emphasis role="keywordtype">int</emphasis>&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(num_vars&gt;0)
<anchor xml:id="_memory__handler_8hpp_source_1l00151"/><link linkend="_memory__handler_8hpp_1a952cf7c95f5c9fab6ea099cded5ae4ba">00151</link> <link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>**&#32;<link linkend="_memory__handler_8hpp_1a952cf7c95f5c9fab6ea099cded5ae4ba">construye_matriz_de_variables&lt;INT,INT&gt;</link>(<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>**&#32;matd)
<anchor xml:id="_memory__handler_8hpp_source_1l00152"/>00152 {
<anchor xml:id="_memory__handler_8hpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matd&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>*);
<anchor xml:id="_memory__handler_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*matd&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>[num_vars];
<anchor xml:id="_memory__handler_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00156"/>00156 }
<anchor xml:id="_memory__handler_8hpp_source_1l00157"/>00157 
<anchor xml:id="_memory__handler_8hpp_source_1l00158"/>00158 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00159"/><link linkend="_memory__handler_8hpp_1af03d0a0860e5096631c1d2be6e19cf7c">00159</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_memory__handler_8hpp_1af03d0a0860e5096631c1d2be6e19cf7c">destruye_matriz_de_variables&lt;INT,INT&gt;</link>(<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>**&#32;matd)
<anchor xml:id="_memory__handler_8hpp_source_1l00160"/>00160 {
<anchor xml:id="_memory__handler_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;*matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00163"/>00163 }
<anchor xml:id="_memory__handler_8hpp_source_1l00164"/>00164 
<anchor xml:id="_memory__handler_8hpp_source_1l00165"/><link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">00165</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int;
<anchor xml:id="_memory__handler_8hpp_source_1l00166"/>00166 
<anchor xml:id="_memory__handler_8hpp_source_1l00167"/>00167 <emphasis role="keyword">template</emphasis>&lt;us<emphasis role="keywordtype">int</emphasis>&#32;num_vars&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00168"/><link linkend="_memory__handler_8hpp_1a7931ed644b370bf8e42d89b309607701">00168</link> <link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>**&#32;<link linkend="_memory__handler_8hpp_1a7931ed644b370bf8e42d89b309607701">construye_matriz_de_variables&lt;UINT,UINT&gt;</link>(<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>**&#32;matd)
<anchor xml:id="_memory__handler_8hpp_source_1l00169"/>00169 {
<anchor xml:id="_memory__handler_8hpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matd&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>*);
<anchor xml:id="_memory__handler_8hpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*matd&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>[num_vars];
<anchor xml:id="_memory__handler_8hpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00173"/>00173 }
<anchor xml:id="_memory__handler_8hpp_source_1l00174"/>00174 <emphasis role="keyword">template</emphasis>&lt;&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00175"/><link linkend="_memory__handler_8hpp_1aeb588c3bd5963828223875c70f6278e0">00175</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_memory__handler_8hpp_1aeb588c3bd5963828223875c70f6278e0">destruye_matriz_de_variables&lt;UINT,UINT&gt;</link>(<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>**&#32;matd)
<anchor xml:id="_memory__handler_8hpp_source_1l00176"/>00176 {
<anchor xml:id="_memory__handler_8hpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;*matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;matd;
<anchor xml:id="_memory__handler_8hpp_source_1l00179"/>00179 }
<anchor xml:id="_memory__handler_8hpp_source_1l00180"/>00180 
<anchor xml:id="_memory__handler_8hpp_source_1l00181"/>00181 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;aT&#32;,&#32;<emphasis role="keyword">template</emphasis>&lt;uch<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>T&#32;&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00182"/><link linkend="_classfunc__refvar__t">00182</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfunc__refvar__t">func_refvar_t</link>&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00183"/>00183 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00184"/>00184 
<anchor xml:id="_memory__handler_8hpp_source_1l00185"/><link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">00185</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;&#32;vector&lt;bool&gt;&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00186"/><link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">00186</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00187"/><link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">00187</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aT**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00188"/><link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">00188</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;uint&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00189"/>00189 
<anchor xml:id="_memory__handler_8hpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mira&#32;si&#32;un&#32;nombre&#32;de&#32;variable&#32;esta&#32;disponible&#32;y&#32;si&#32;esta&#32;libre&#32;un&#32;lugar&#32;concreto&#32;de</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;memoria&quot;.&#32;Arregla&#32;el&#32;mapa&#32;de&#32;memoria.&#32;Si&#32;ha&#32;tenido&#32;exito&#32;y&#32;se&#32;puede&#32;insertar&#32;la</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;devuelve&#32;true,&#32;sino&#32;false.</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00193"/><link linkend="_classfunc__refvar__t_1a8d13da8d11451ddb2c520124b5820ad5">00193</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_1a8d13da8d11451ddb2c520124b5820ad5">insert</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;,&#32;uchint&#32;base&#32;,&#32;uchint&#32;var_base&#32;)
<anchor xml:id="_memory__handler_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((*it).second.second&#32;==&#32;var_base)or((*it).first==nombre))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[base][var_base]==<emphasis role="keyword">false</emphasis>)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.insert(
<anchor xml:id="_memory__handler_8hpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair&lt;std::string,par_dir_t&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_memory__handler_8hpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nombre&#32;,
<anchor xml:id="_memory__handler_8hpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair&lt;uchint,uchint&gt;(base,var_base)
<anchor xml:id="_memory__handler_8hpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_memory__handler_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_memory__handler_8hpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[base][var_base]=<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00213"/>00213 
<anchor xml:id="_memory__handler_8hpp_source_1l00214"/><link linkend="_classfunc__refvar__t_1a2935307933fb9b6f6f9ea2972cc5c4ea">00214</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a2935307933fb9b6f6f9ea2972cc5c4ea">func_refvar_t</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classfunc__refvar__t">func_refvar_t</link>&#32;&amp;);
<anchor xml:id="_memory__handler_8hpp_source_1l00215"/>00215 
<anchor xml:id="_memory__handler_8hpp_source_1l00216"/>00216 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00217"/>00217 
<anchor xml:id="_memory__handler_8hpp_source_1l00218"/><link linkend="_classfunc__refvar__t_1a8e9cb3b8e01b8aa709a2a31e4ab5d554">00218</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a8e9cb3b8e01b8aa709a2a31e4ab5d554">func_refvar_t</link>()
<anchor xml:id="_memory__handler_8hpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//inicia_matriz_digs_y_pp(matd,256u,256u);</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>&#32;=&#32;construye_matriz_de_variables&lt;ppT,pT,T&gt;(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>);
<anchor xml:id="_memory__handler_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>.resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>.resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;I=0&#32;;&#32;I&#32;&lt;&#32;256&#32;;&#32;++I){
<anchor xml:id="_memory__handler_8hpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[I].resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[I]=0;
<anchor xml:id="_memory__handler_8hpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;J=0&#32;;&#32;J&#32;&lt;&#32;256&#32;;&#32;++J){
<anchor xml:id="_memory__handler_8hpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[I][J]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00232"/>00232 
<anchor xml:id="_memory__handler_8hpp_source_1l00233"/><link linkend="_classfunc__refvar__t_1a0363255e4e3b31424f23054c421829b0">00233</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a0363255e4e3b31424f23054c421829b0">~func_refvar_t</link>()
<anchor xml:id="_memory__handler_8hpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destruye_matriz_de_variables&lt;T,T&gt;(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>);
<anchor xml:id="_memory__handler_8hpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00237"/>00237 
<anchor xml:id="_memory__handler_8hpp_source_1l00238"/>00238 <emphasis role="keyword">private</emphasis>:&#32;<emphasis role="comment">//&#32;BAJO&#32;NIVEL</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;encuentra&#32;espacio&#32;para&#32;una&#32;variable&#32;de&#32;base&#32;B</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;devuelve&#32;true&#32;si&#32;ha&#32;tenido&#32;exito&#32;y&#32;false&#32;si&#32;no</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00241"/><link linkend="_classfunc__refvar__t_1a08d5234094405d8ca9a77408516b59b7">00241</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_1a08d5234094405d8ca9a77408516b59b7">escribe_var</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;,&#32;uchint&#32;base&#32;,&#32;uchint&#32;var_base)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;se_puede_insertar&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[base]&#32;&lt;=&#32;256)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;var_base&#32;=&#32;0;
<anchor xml:id="_memory__handler_8hpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!&#32;se_puede_insertar)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;se_puede_insertar&#32;=&#32;<link linkend="_classfunc__refvar__t_1a8d13da8d11451ddb2c520124b5820ad5">insert</link>(&#32;nombre&#32;,&#32;&#32;base&#32;,&#32;var_base&#32;);
<anchor xml:id="_memory__handler_8hpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!se_puede_insertar)&#32;var_base++;
<anchor xml:id="_memory__handler_8hpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(se_puede_insertar)&#32;(<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[base])++;
<anchor xml:id="_memory__handler_8hpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;se_puede_insertar;
<anchor xml:id="_memory__handler_8hpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00253"/>00253 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;borra&#32;el&#32;lugar&#32;de&#32;una&#32;variable&#32;de&#32;base&#32;B</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00255"/><link linkend="_classfunc__refvar__t_1a2fa19582eaae01cb4af37e335dc17b8b">00255</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classfunc__refvar__t_1a2fa19582eaae01cb4af37e335dc17b8b">borra_var</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::const_iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first==nombre)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[(*it).second.first][(*it).second.second]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[(*it).second.first];
<anchor xml:id="_memory__handler_8hpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.erase(it);<emphasis role="comment">//&#32;ponerlo&#32;a&#32;0</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00268"/>00268 
<anchor xml:id="_memory__handler_8hpp_source_1l00269"/><link linkend="_classfunc__refvar__t_1a3f4a4e617944b695448b8927f68245d4">00269</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_1a3f4a4e617944b695448b8927f68245d4">existe_lugar_de_base</link>(&#32;uchint&#32;Base&#32;)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;I=0;&#32;I&#32;&lt;&#32;256&#32;;&#32;++I){
<anchor xml:id="_memory__handler_8hpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;ret&#32;and&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[Base][I];
<anchor xml:id="_memory__handler_8hpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ret)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00277"/>00277 
<anchor xml:id="_memory__handler_8hpp_source_1l00278"/><link linkend="_classfunc__refvar__t_1aef030a35222c267cfa2f81ed9e5b12d7">00278</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_1aef030a35222c267cfa2f81ed9e5b12d7">este_nombre_ya_ha_sido_declarado</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre){
<anchor xml:id="_memory__handler_8hpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::const_iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first==nombre)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00288"/>00288 
<anchor xml:id="_memory__handler_8hpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;const&#32;uch<emphasis role="keywordtype">int</emphasis>&#32;B&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00290"/><link linkend="_classfunc__refvar__t_1abb0355ab86a34517b7db6c90dd2b9e26">00290</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&lt;B&gt;&#32;<link linkend="_classfunc__refvar__t_1abb0355ab86a34517b7db6c90dd2b9e26">get</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre)
<anchor xml:id="_memory__handler_8hpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>&#32;T&lt;B&gt;*&#32;<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>[B]))[<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>[nombre].second];
<anchor xml:id="_memory__handler_8hpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00294"/>00294 
<anchor xml:id="_memory__handler_8hpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;const&#32;uch<emphasis role="keywordtype">int</emphasis>&#32;B&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00296"/><link linkend="_classfunc__refvar__t_1a9127c1c5b54819300d13a4f46fbb3610">00296</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_1a9127c1c5b54819300d13a4f46fbb3610">operator()</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre,<emphasis role="keywordtype">string</emphasis>&#32;lhs)
<anchor xml:id="_memory__handler_8hpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&lt;B&gt;&#32;temp(lhs);
<anchor xml:id="_memory__handler_8hpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;se_puede_hacer&#32;=&#32;<link linkend="_classfunc__refvar__t_1aef030a35222c267cfa2f81ed9e5b12d7">este_nombre_ya_ha_sido_declarado</link>(nombre);
<anchor xml:id="_memory__handler_8hpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(se_puede_hacer)&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>&#32;T&lt;B&gt;*&#32;<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>[B]))[<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>[nombre].second]=temp;
<anchor xml:id="_memory__handler_8hpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;se_puede_hacer;
<anchor xml:id="_memory__handler_8hpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00303"/>00303 };
<anchor xml:id="_memory__handler_8hpp_source_1l00304"/>00304 
<anchor xml:id="_memory__handler_8hpp_source_1l00305"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4">00305</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfunc__refvar__t">func_refvar_t</link>&lt;<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>**,<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>*,<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00306"/>00306 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00307"/>00307 
<anchor xml:id="_memory__handler_8hpp_source_1l00308"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a20b19e484a7c9cf47ea411a2cd9e9dd1">00308</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;&#32;vector&lt;bool&gt;&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a20b19e484a7c9cf47ea411a2cd9e9dd1">mapmem</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00309"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a3b670de0ff207940286833b7a9441e1a">00309</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a3b670de0ff207940286833b7a9441e1a">mapvd</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00310"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a16b0dd9448c925302eed862d8f7af5ef">00310</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a16b0dd9448c925302eed862d8f7af5ef">matd</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00311"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a4ceabca09a6c923102d87ad993e2c1f7">00311</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;uint&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a4ceabca09a6c923102d87ad993e2c1f7">cuentavars</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00312"/>00312 
<anchor xml:id="_memory__handler_8hpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mira&#32;si&#32;un&#32;nombre&#32;de&#32;variable&#32;est√°&#32;disponible&#32;y&#32;si&#32;est√°&#32;libre&#32;un&#32;lugar&#32;concreto&#32;de</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;memoria&quot;.&#32;Arregla&#32;el&#32;mapa&#32;de&#32;memoria.&#32;Si&#32;ha&#32;tenido&#32;exito&#32;y&#32;se&#32;puede&#32;insertar&#32;la</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;devuelve&#32;true,&#32;sino&#32;false.</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00316"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a723d0bf54892ad06965841b4d643553c">00316</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a723d0bf54892ad06965841b4d643553c">insert</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;,&#32;uchint&#32;base&#32;,&#32;uchint&#32;var_base&#32;)
<anchor xml:id="_memory__handler_8hpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((*it).second.second&#32;==&#32;var_base)or((*it).first==nombre))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[base][var_base]==<emphasis role="keyword">false</emphasis>)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.insert(
<anchor xml:id="_memory__handler_8hpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair&lt;std::string,par_dir_t&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_memory__handler_8hpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nombre&#32;,
<anchor xml:id="_memory__handler_8hpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair&lt;uchint,uchint&gt;(base,var_base)
<anchor xml:id="_memory__handler_8hpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_memory__handler_8hpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_memory__handler_8hpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[base][var_base]=<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00336"/>00336 
<anchor xml:id="_memory__handler_8hpp_source_1l00337"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a6b599ef156f44f48feef8c131c3682e3">00337</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a6b599ef156f44f48feef8c131c3682e3">func_refvar_t</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classfunc__refvar__t">func_refvar_t</link>&#32;&amp;)=<emphasis role="keyword">delete</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00338"/>00338 
<anchor xml:id="_memory__handler_8hpp_source_1l00339"/>00339 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00340"/>00340 
<anchor xml:id="_memory__handler_8hpp_source_1l00341"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a1cf67e4c6e6cd820d17fd6717b65e563">00341</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a1cf67e4c6e6cd820d17fd6717b65e563">func_refvar_t</link>()
<anchor xml:id="_memory__handler_8hpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//inicia_matriz_digs_y_pp(matd,256u,256u);</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>&#32;=&#32;construye_matriz_de_variables&lt;INT**,INT*,INT&gt;(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>);
<anchor xml:id="_memory__handler_8hpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>.resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>.resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;I=0&#32;;&#32;I&#32;&lt;&#32;256&#32;;&#32;++I){
<anchor xml:id="_memory__handler_8hpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[I].resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[I]=0;
<anchor xml:id="_memory__handler_8hpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;J=0&#32;;&#32;J&#32;&lt;&#32;256&#32;;&#32;++J){
<anchor xml:id="_memory__handler_8hpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[I][J]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00355"/>00355 
<anchor xml:id="_memory__handler_8hpp_source_1l00356"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a3976c268401d41bcc7f9a10a45dac792">00356</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a3976c268401d41bcc7f9a10a45dac792">~func_refvar_t</link>()
<anchor xml:id="_memory__handler_8hpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destruye_matriz_de_variables&lt;INT**,INT*,INT&gt;(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>);
<anchor xml:id="_memory__handler_8hpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00360"/>00360 
<anchor xml:id="_memory__handler_8hpp_source_1l00361"/>00361 <emphasis role="keyword">private</emphasis>:&#32;<emphasis role="comment">//&#32;BAJO&#32;NIVEL</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;encuentra&#32;espacio&#32;para&#32;una&#32;variable&#32;de&#32;base&#32;B</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;devuelve&#32;true&#32;si&#32;ha&#32;tenido&#32;exito&#32;y&#32;false&#32;si&#32;no</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00364"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a26e278a1187a2bfff79fdb0d25458a0e">00364</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a26e278a1187a2bfff79fdb0d25458a0e">escribe_var</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;,&#32;uchint&#32;base&#32;,&#32;uchint&#32;var_base)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;se_puede_insertar&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[base]&#32;&lt;=&#32;256)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;var_base&#32;=&#32;0;
<anchor xml:id="_memory__handler_8hpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!&#32;se_puede_insertar)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;se_puede_insertar&#32;=&#32;<link linkend="_classfunc__refvar__t_1a8d13da8d11451ddb2c520124b5820ad5">insert</link>(&#32;nombre&#32;,&#32;&#32;base&#32;,&#32;var_base&#32;);
<anchor xml:id="_memory__handler_8hpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!se_puede_insertar)&#32;var_base++;
<anchor xml:id="_memory__handler_8hpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(se_puede_insertar)&#32;(<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[base])++;
<anchor xml:id="_memory__handler_8hpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;se_puede_insertar;
<anchor xml:id="_memory__handler_8hpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00376"/>00376 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;borra&#32;el&#32;lugar&#32;de&#32;una&#32;variable&#32;de&#32;base&#32;B</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00378"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a15540c57515894459b897f901f8567e5">00378</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a15540c57515894459b897f901f8567e5">borra_var</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::const_iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first==nombre)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[(*it).second.first][(*it).second.second]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[(*it).second.first];
<anchor xml:id="_memory__handler_8hpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.erase(it);<emphasis role="comment">//&#32;ponerlo&#32;a&#32;0</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00391"/>00391 
<anchor xml:id="_memory__handler_8hpp_source_1l00392"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a6021c1d7303e96e63e4e15b0dd41febd">00392</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a6021c1d7303e96e63e4e15b0dd41febd">existe_lugar_de_base</link>(&#32;uchint&#32;Base&#32;)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;I=0;&#32;I&#32;&lt;&#32;256&#32;;&#32;++I){
<anchor xml:id="_memory__handler_8hpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;ret&#32;and&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[Base][I];
<anchor xml:id="_memory__handler_8hpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ret)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00400"/>00400 
<anchor xml:id="_memory__handler_8hpp_source_1l00401"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a0d3be942f60449948a7c26ec148303ac">00401</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1a0d3be942f60449948a7c26ec148303ac">este_nombre_ya_ha_sido_declarado</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre){
<anchor xml:id="_memory__handler_8hpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::const_iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first==nombre)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00411"/>00411 
<anchor xml:id="_memory__handler_8hpp_source_1l00412"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1ae407a8351f750c2524157747d687190b">00412</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1ae407a8351f750c2524157747d687190b">get</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre)
<anchor xml:id="_memory__handler_8hpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>[B])[<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>[nombre].second];
<anchor xml:id="_memory__handler_8hpp_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00416"/>00416 
<anchor xml:id="_memory__handler_8hpp_source_1l00417"/><link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1ab63d213a5e7e754c772965fc5375c267">00417</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_i_n_t_01_5_5_00_01_i_n_t_01_5_00_01_i_n_t_01_4_1ab63d213a5e7e754c772965fc5375c267">operator()</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre,<emphasis role="keywordtype">string</emphasis>&#32;lhs)
<anchor xml:id="_memory__handler_8hpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_memory__handler_8hpp_1a4feec61b8694ce601ac1fa077ad6ecdf">INT</link>&#32;temp(lhs);
<anchor xml:id="_memory__handler_8hpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;se_puede_hacer&#32;=&#32;<link linkend="_classfunc__refvar__t_1aef030a35222c267cfa2f81ed9e5b12d7">este_nombre_ya_ha_sido_declarado</link>(nombre);
<anchor xml:id="_memory__handler_8hpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(se_puede_hacer)&#32;(*matd)[<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>[nombre].second]=temp;
<anchor xml:id="_memory__handler_8hpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;se_puede_hacer;
<anchor xml:id="_memory__handler_8hpp_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00424"/>00424 };
<anchor xml:id="_memory__handler_8hpp_source_1l00425"/>00425 
<anchor xml:id="_memory__handler_8hpp_source_1l00426"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4">00426</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfunc__refvar__t">func_refvar_t</link>&lt;<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>**,<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>*,<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>&gt;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00427"/>00427 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00428"/>00428 
<anchor xml:id="_memory__handler_8hpp_source_1l00429"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ad5e803f48eac8dc8f394e55edb764b31">00429</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;&#32;vector&lt;bool&gt;&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ad5e803f48eac8dc8f394e55edb764b31">mapmem</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00430"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1af58f420aee670ec8408d87f5f3a88dad">00430</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1af58f420aee670ec8408d87f5f3a88dad">mapvd</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00431"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a2752e4e1b8f47ab5a8e08829bb95e01e">00431</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a2752e4e1b8f47ab5a8e08829bb95e01e">matd</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00432"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1aec0f639e329a7a01521028440ae8e3f5">00432</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;uint&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1aec0f639e329a7a01521028440ae8e3f5">cuentavars</link>;
<anchor xml:id="_memory__handler_8hpp_source_1l00433"/>00433 
<anchor xml:id="_memory__handler_8hpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mira&#32;si&#32;un&#32;nombre&#32;de&#32;variable&#32;est√°&#32;disponible&#32;y&#32;si&#32;est√°&#32;libre&#32;un&#32;lugar&#32;concreto&#32;de</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;memoria&quot;.&#32;Arregla&#32;el&#32;mapa&#32;de&#32;memoria.&#32;Si&#32;ha&#32;tenido&#32;exito&#32;y&#32;se&#32;puede&#32;insertar&#32;la</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;devuelve&#32;true,&#32;sino&#32;false.</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00437"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a2fb277764c6b8f54422992f7550d401d">00437</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a2fb277764c6b8f54422992f7550d401d">insert</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;,&#32;uchint&#32;base&#32;,&#32;uchint&#32;var_base&#32;)
<anchor xml:id="_memory__handler_8hpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((*it).second.second&#32;==&#32;var_base)or((*it).first==nombre))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[base][var_base]==<emphasis role="keyword">false</emphasis>)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.insert(
<anchor xml:id="_memory__handler_8hpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair&lt;std::string,par_dir_t&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_memory__handler_8hpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nombre&#32;,
<anchor xml:id="_memory__handler_8hpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair&lt;uchint,uchint&gt;(base,var_base)
<anchor xml:id="_memory__handler_8hpp_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_memory__handler_8hpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_memory__handler_8hpp_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[base][var_base]=<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00457"/>00457 
<anchor xml:id="_memory__handler_8hpp_source_1l00458"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a2255362c530edf0aa832d64ffd1becc4">00458</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a2255362c530edf0aa832d64ffd1becc4">func_refvar_t</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classfunc__refvar__t">func_refvar_t</link>&#32;&amp;);
<anchor xml:id="_memory__handler_8hpp_source_1l00459"/>00459 
<anchor xml:id="_memory__handler_8hpp_source_1l00460"/>00460 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00461"/>00461 
<anchor xml:id="_memory__handler_8hpp_source_1l00462"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a96c10b6ad2564de100e956b27a6287f9">00462</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a96c10b6ad2564de100e956b27a6287f9">func_refvar_t</link>()
<anchor xml:id="_memory__handler_8hpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//inicia_matriz_digs_y_pp(matd,256u,256u);</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>&#32;=&#32;construye_matriz_de_variables&lt;UINT**,UINT*,UINT&gt;(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>);
<anchor xml:id="_memory__handler_8hpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>.resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>.resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;I=0&#32;;&#32;I&#32;&lt;&#32;256&#32;;&#32;++I){
<anchor xml:id="_memory__handler_8hpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[I].resize(256);
<anchor xml:id="_memory__handler_8hpp_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[I]=0;
<anchor xml:id="_memory__handler_8hpp_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;J=0&#32;;&#32;J&#32;&lt;&#32;256&#32;;&#32;++J){
<anchor xml:id="_memory__handler_8hpp_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[I][J]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00476"/>00476 
<anchor xml:id="_memory__handler_8hpp_source_1l00477"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a17a780771564ae6bf646913bbe7aac4e">00477</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a17a780771564ae6bf646913bbe7aac4e">~func_refvar_t</link>()
<anchor xml:id="_memory__handler_8hpp_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destruye_matriz_de_variables&lt;UINT**,UINT*,UINT&gt;(<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>);
<anchor xml:id="_memory__handler_8hpp_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00481"/>00481 
<anchor xml:id="_memory__handler_8hpp_source_1l00482"/>00482 <emphasis role="keyword">private</emphasis>:&#32;<emphasis role="comment">//&#32;BAJO&#32;NIVEL</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;encuentra&#32;espacio&#32;para&#32;una&#32;variable&#32;de&#32;base&#32;B</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;devuelve&#32;true&#32;si&#32;ha&#32;tenido&#32;exito&#32;y&#32;false&#32;si&#32;no</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00485"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ab30717bd4db90f33fb095fff35ccc851">00485</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ab30717bd4db90f33fb095fff35ccc851">escribe_var</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;,&#32;uchint&#32;base&#32;,&#32;uchint&#32;var_base)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;se_puede_insertar&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[base]&#32;&lt;=&#32;256)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;var_base&#32;=&#32;0;
<anchor xml:id="_memory__handler_8hpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!&#32;se_puede_insertar)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;se_puede_insertar&#32;=&#32;<link linkend="_classfunc__refvar__t_1a8d13da8d11451ddb2c520124b5820ad5">insert</link>(&#32;nombre&#32;,&#32;&#32;base&#32;,&#32;var_base&#32;);
<anchor xml:id="_memory__handler_8hpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!se_puede_insertar)&#32;var_base++;
<anchor xml:id="_memory__handler_8hpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(se_puede_insertar)&#32;(<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[base])++;
<anchor xml:id="_memory__handler_8hpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;se_puede_insertar;
<anchor xml:id="_memory__handler_8hpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00497"/>00497 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_memory__handler_8hpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;borra&#32;el&#32;lugar&#32;de&#32;una&#32;variable&#32;de&#32;base&#32;B</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00499"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1af9ab19479d6f0313c43090f5477f2836">00499</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1af9ab19479d6f0313c43090f5477f2836">borra_var</link>(&#32;<emphasis role="keywordtype">string</emphasis>&#32;nombre&#32;)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::const_iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first==nombre)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[(*it).second.first][(*it).second.second]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_classfunc__refvar__t_1a61011017ce8cdcd3d6394e7b9f592949">cuentavars</link>[(*it).second.first];
<anchor xml:id="_memory__handler_8hpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.erase(it);<emphasis role="comment">//&#32;ponerlo&#32;a&#32;0</emphasis>
<anchor xml:id="_memory__handler_8hpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00512"/>00512 
<anchor xml:id="_memory__handler_8hpp_source_1l00513"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a640e844a830c1df1e15964d73597897c">00513</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a640e844a830c1df1e15964d73597897c">existe_lugar_de_base</link>(&#32;uchint&#32;Base&#32;)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint&#32;I=0;&#32;I&#32;&lt;&#32;256&#32;;&#32;++I){
<anchor xml:id="_memory__handler_8hpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;ret&#32;and&#32;<link linkend="_classfunc__refvar__t_1aab45617d15424da131058b17a3ab7c25">mapmem</link>[Base][I];
<anchor xml:id="_memory__handler_8hpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ret)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00521"/>00521 
<anchor xml:id="_memory__handler_8hpp_source_1l00522"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a190c8722356199f9f0367df2093e67bf">00522</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1a190c8722356199f9f0367df2093e67bf">este_nombre_ya_ha_sido_declarado</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre){
<anchor xml:id="_memory__handler_8hpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::iterator&#32;it&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.begin();
<anchor xml:id="_memory__handler_8hpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map&lt;&#32;string&#32;,&#32;par_dir_t&#32;&gt;::const_iterator&#32;itend&#32;=&#32;<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>.end();
<anchor xml:id="_memory__handler_8hpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;;&#32;it&#32;!=&#32;itend&#32;;&#32;++it)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*it).first==nombre)&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_memory__handler_8hpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00532"/>00532 
<anchor xml:id="_memory__handler_8hpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;const&#32;uch<emphasis role="keywordtype">int</emphasis>&#32;B&gt;
<anchor xml:id="_memory__handler_8hpp_source_1l00534"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ab3567151a6bf6c9274121ec1c8a3928c">00534</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ab3567151a6bf6c9274121ec1c8a3928c">get</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre)
<anchor xml:id="_memory__handler_8hpp_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>)[<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>[nombre].second];
<anchor xml:id="_memory__handler_8hpp_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00538"/>00538 
<anchor xml:id="_memory__handler_8hpp_source_1l00539"/>00539 
<anchor xml:id="_memory__handler_8hpp_source_1l00540"/><link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ab11b5bb2dc5a6f6bc98d43c9bac6e7df">00540</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classfunc__refvar__t_3_01_u_i_n_t_01_5_5_00_01_u_i_n_t_01_5_00_01_u_i_n_t_01_4_1ab11b5bb2dc5a6f6bc98d43c9bac6e7df">operator()</link>(<emphasis role="keywordtype">string</emphasis>&#32;nombre,<emphasis role="keywordtype">string</emphasis>&#32;lhs)
<anchor xml:id="_memory__handler_8hpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_memory__handler_8hpp_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_memory__handler_8hpp_1a2d51603be6f983fbbf8f23be7087badd">UINT</link>&#32;temp(lhs);
<anchor xml:id="_memory__handler_8hpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;se_puede_hacer&#32;=&#32;<link linkend="_classfunc__refvar__t_1aef030a35222c267cfa2f81ed9e5b12d7">este_nombre_ya_ha_sido_declarado</link>(nombre);
<anchor xml:id="_memory__handler_8hpp_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(se_puede_hacer)&#32;*<link linkend="_classfunc__refvar__t_1a0f5309d3f6a7ffc709f8bdd79a8ac447">matd</link>[<link linkend="_classfunc__refvar__t_1ae5fd040271a12feb311c92a5b2b7802f">mapvd</link>[nombre].second]=temp;
<anchor xml:id="_memory__handler_8hpp_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;se_puede_hacer;
<anchor xml:id="_memory__handler_8hpp_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memory__handler_8hpp_source_1l00547"/>00547 };
<anchor xml:id="_memory__handler_8hpp_source_1l00548"/>00548 
<anchor xml:id="_memory__handler_8hpp_source_1l00549"/>00549 
<anchor xml:id="_memory__handler_8hpp_source_1l00550"/>00550 
<anchor xml:id="_memory__handler_8hpp_source_1l00551"/>00551 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MEMORY_HANDLER_HPP_INCLUDED</emphasis>
</programlisting></section>
