<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1nat__reg__digs__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</title>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;nat_reg_digs_t (Copia en conflicto de MSI 2022-11-24).hpp&gt;</computeroutput>
</para>
Diagrama de colaboración para NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652">SIG_SINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> = <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&lt; UINT_T, B &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link> = std::array&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> = <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a5ae37d39e889eda3b56a58af5c242d7f">res_base_N_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt;, op, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8">res_base_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link>, op, L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab0830872a3654524eb3117e69646fe08">res_N_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt;, op, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad151db2178dbb157db841e5c8021fb64">res_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>, op, L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link> = typename std::array&lt; UINT_T, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a43e75c68765d5590c7f1427001c14352">reg_suints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link>, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a28a9c34d899f9b23d36b531ebe88b683">reg_ssints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652">SIG_SINT_T</link>, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652">SIG_SINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> = <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&lt; UINT_T, B &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link> = std::array&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> = <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a5ae37d39e889eda3b56a58af5c242d7f">res_base_N_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt;, op, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8">res_base_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link>, op, L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab0830872a3654524eb3117e69646fe08">res_N_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt;, op, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad151db2178dbb157db841e5c8021fb64">res_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>, op, L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link> = typename std::array&lt; UINT_T, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a43e75c68765d5590c7f1427001c14352">reg_suints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link>, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a28a9c34d899f9b23d36b531ebe88b683">reg_ssints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652">SIG_SINT_T</link>, N &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link> () noexcept</para>

<para>CONSTRUCTOR POR DEFECTO. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a00c466fc721a8c13b2c2e871cd7820b4">nat_reg_digs_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &gt; &amp;arg) noexcept</para>

<para>CONSTRUCTOR POR LISTA DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&gt;&amp;&amp;...)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a79417dac5a4154522330355788d20ecf">nat_reg_digs_t</link> (const Ts &amp;... args) noexcept</para>

<para>CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a04918e94f15b63785431c4153b05f992">nat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>CONSTRUCTOR COPIA DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad367e797ace322813a6fff1bb7306870">nat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a56c17d76bfaf24bbe95e8cd0402367fc">nat_reg_digs_t</link> (Ints_type ... dig_pow_i) noexcept</para>

<para>CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac754667e568ecdda0033e4672fdeefd3">nat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>CONSTRUCTOR COPIA POR REFERENCIA CONSTANTE. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9487898486f71a81f5ccc6573f8709db">nat_reg_digs_t</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aba43c889c90dfbb661c06609e10393e4">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA CONST <emphasis>NO</emphasis> COPIABLE DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aae26e3fd0c597eb576b8a73c8a6e0921">operator=</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aab48498228625991e1b7a6efc1714d6a">operator=</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA MOVIMIENTO DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0222f0fe5e680461731101767d0d658b">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA EN LA QUE SE PUEDE COPIAR. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae13d640c0fc939f463fe4db5fb58fc0a">operator=</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR MOVIMIENTO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a72f08f8b1a5fa90636429b936399920b">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE COPIAR. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc">set_0</link> () noexcept</para>

<para>OPERACION DE LIMPIEZA A CERO DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a197e63e671e4306b1d6c95cf3dddf122">set_Bm1</link> () noexcept</para>

<para>OPERACION DE LIMPIEZA A B-1 DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4ac89cc0daee3cbccf22a42164e99481">set_dig</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) noexcept</para>

<para>OPERACION DE LIMPIEZA A VALOR DIG_T DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad7f694c626b4b9199f0fd299a0c06f54">set_interval_0</link> () noexcept</para>

<para>OPERACION DE PONER A VALOR DIG_0 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af1e049ae99df1afdfaf216efa6877f77">set_interval_Bm1</link> () noexcept</para>

<para>OPERACION DE PONER A VALOR DIG_Bm1 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a5755851c821c5b1a87ab04e4bd7861a0">set_interval_dig</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> dig) noexcept</para>

<para>OPERACION DE PONER A VALOR DIG EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a38fa3f288d43c0fa115e89bf9afd6da5">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;arg) noexcept</para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab1a63d715621ca9fea2c4d765155a23b">operator=</link> (Int_Type arg) noexcept</para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf64ab106dc1e03510434256064d85ef">cat</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>SUBREPR =&gt; SUB REPRESENTACION. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1e54bb927680f14dbd4d180a1262bc8a">cat</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a503c26355f8e7d254480e5bc3c0aca90">cat_inv</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4df4d89b90103f73c6bd40a88ca103b3">cat_inv</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ibegin, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae0035860926f7f260553e8bce191066e">subrepr</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a314ac41efce60c862c67a3939c8e6c5e">operator Int_Type</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f">is_0</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a728a486aa19bebdb5556480f3ad25917">is_1</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a41bae51f82d9802c60d34a71705372dc">is_B</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8169a3ed50e5d45ab556403132ba9138">is_Bp1</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2454172f796622228d0238a14bfba7cc">is_B_pow_m1</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2b7eb96b8286969f0c1cb8a31f9e9ec8">is_B_pow</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9affc4906635a0803bf77af16c65dfaf">is_filled_of_1</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac33e1f6d87472a368b38851aac245d33">is_filled_of_Bm1</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> d&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a45127fc7411537147f1bf4fc66e90710">is_filled_of</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a164f15e36c8a63b4379bafda3b14c989">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aea0d7502c64527b4b97ef9fe0e99e404">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2cadc24c85fcfad11ff98735e03e7570">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aa1b50464c47ec2306e132409e5c0d39b">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a77baf6645dae586ff93ee57f9eb1abb8">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8eced305bac59431a2c2c0bb10feb7be">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a154c67536bfad0e2ecdfea8d40521833">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a11543159dbaddde4dcb666056e758070">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4279a9edb1c26bf0bc08f853ededd183">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a75a06e97717d145137e875999180048e">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae31ac5280cc4e0a252ad62a65f5b15c4">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0c0115fb7a0bc33e71bc0b6848d97c5d">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a760667e522ab381ea922f79a0fe37032">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad7426f73c780c180a0c684705e3e277a">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a158ee12a14cbc5dc81d1a563915b8484">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ada5a7a435ca701c309e80ee6700264f1">get</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a98300c5254e99ef248757aee3fa2966d">put</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a99c01e95abff85318cb5a4e6c0fba2ae">operator[]</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a953e903e06ac7220399e624582ddfe1f">operator[]</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type = UINT_T&gt; </para><para>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8c41105ef914ccd1caec1a993bd95601">operator()</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a84abdae22a3b9638c2a93e5aed0a4f19">const_ref_data</link> () const</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a52a4fc749cfd9844a635a0e7154b86d4">cpy_data</link> () const</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a061cc41d3e0bcfca2f86c6f15eeeba7b">operator++</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad7a7be3dd91bec57f46819f95a5bbe8c">operator++</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aca9335419e9033518f40cccb436c13f5">operator--</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aceeb01544e642ed62c0f91026d78fd41">operator--</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6b97104904f8b86ad4b6c07880f7b3b8">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4d5e6973b1ebcf8efa59719b52516f5d">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7">C_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a">C_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">operator!</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a3c3887dbbf256226834180e0e692d230">operator-</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a49556722a8fb2fe40f41d12a23cd7773">operator&lt;&lt;</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a258de4665d5dad190a1f431949a57e9b">operator&lt;&lt;=</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a780df06ed084ec6d67298c50d5bebd06">operator&gt;&gt;</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1afdfd81c1577f21a78a883d78c69e661d">operator&gt;&gt;=</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6647618fb6d484f4c257159dba69c370">rem_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a7c50665e783bd8dd09b76af26e2d43b4">m_rem_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a76502863356a962c922528a7e0de7c22">mer_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad55f50be24724cc0790b2cafb3733a69">m_mer_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac904337e0a7ca97801a344494172e56e">operator|=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9b74fb6bb9d72c60570c4105ab56894a">operator|</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2700fbcaf685ccd1d8e1aebfd71e59b2">operator&amp;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a149564766c923ec353f74e647d15a0f5">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af16da7d777f0461043ec0d7daae338b3">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abcc6c82c4a4563ff93f43cdba0ea5a3d">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acff45608b5b1956e95e00d668b6f9e53">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2d07be047b2627cdf0b309167372ceff">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link> () noexcept</para>

<para>CONSTRUCTOR POR DEFECTO. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a00c466fc721a8c13b2c2e871cd7820b4">nat_reg_digs_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &gt; &amp;arg) noexcept</para>

<para>CONSTRUCTOR POR LISTA DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&gt;&amp;&amp;...)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a79417dac5a4154522330355788d20ecf">nat_reg_digs_t</link> (const Ts &amp;... args) noexcept</para>

<para>CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a04918e94f15b63785431c4153b05f992">nat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>CONSTRUCTOR COPIA DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad367e797ace322813a6fff1bb7306870">nat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a56c17d76bfaf24bbe95e8cd0402367fc">nat_reg_digs_t</link> (Ints_type ... dig_pow_i) noexcept</para>

<para>CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac754667e568ecdda0033e4672fdeefd3">nat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>CONSTRUCTOR COPIA POR REFERENCIA CONSTANTE. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9487898486f71a81f5ccc6573f8709db">nat_reg_digs_t</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aba43c889c90dfbb661c06609e10393e4">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA CONST <emphasis>NO</emphasis> COPIABLE DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aae26e3fd0c597eb576b8a73c8a6e0921">operator=</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aab48498228625991e1b7a6efc1714d6a">operator=</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA MOVIMIENTO DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0222f0fe5e680461731101767d0d658b">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA EN LA QUE SE PUEDE COPIAR. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae13d640c0fc939f463fe4db5fb58fc0a">operator=</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR MOVIMIENTO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a72f08f8b1a5fa90636429b936399920b">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE COPIAR. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc">set_0</link> () noexcept</para>

<para>OPERACION DE LIMPIEZA A CERO DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a197e63e671e4306b1d6c95cf3dddf122">set_Bm1</link> () noexcept</para>

<para>OPERACION DE LIMPIEZA A B-1 DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4ac89cc0daee3cbccf22a42164e99481">set_dig</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) noexcept</para>

<para>OPERACION DE LIMPIEZA A VALOR DIG_T DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad7f694c626b4b9199f0fd299a0c06f54">set_interval_0</link> () noexcept</para>

<para>OPERACION DE PONER A VALOR DIG_0 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af1e049ae99df1afdfaf216efa6877f77">set_interval_Bm1</link> () noexcept</para>

<para>OPERACION DE PONER A VALOR DIG_Bm1 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a5755851c821c5b1a87ab04e4bd7861a0">set_interval_dig</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> dig) noexcept</para>

<para>OPERACION DE PONER A VALOR DIG EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a38fa3f288d43c0fa115e89bf9afd6da5">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;arg) noexcept</para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab1a63d715621ca9fea2c4d765155a23b">operator=</link> (Int_Type arg) noexcept</para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf64ab106dc1e03510434256064d85ef">cat</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>SUBREPR =&gt; SUB REPRESENTACION. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1e54bb927680f14dbd4d180a1262bc8a">cat</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a503c26355f8e7d254480e5bc3c0aca90">cat_inv</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4df4d89b90103f73c6bd40a88ca103b3">cat_inv</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ibegin, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae0035860926f7f260553e8bce191066e">subrepr</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a314ac41efce60c862c67a3939c8e6c5e">operator Int_Type</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f">is_0</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a728a486aa19bebdb5556480f3ad25917">is_1</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a41bae51f82d9802c60d34a71705372dc">is_B</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8169a3ed50e5d45ab556403132ba9138">is_Bp1</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2454172f796622228d0238a14bfba7cc">is_B_pow_m1</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2b7eb96b8286969f0c1cb8a31f9e9ec8">is_B_pow</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9affc4906635a0803bf77af16c65dfaf">is_filled_of_1</link> () const</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac33e1f6d87472a368b38851aac245d33">is_filled_of_Bm1</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> d&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a45127fc7411537147f1bf4fc66e90710">is_filled_of</link> () const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a164f15e36c8a63b4379bafda3b14c989">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aea0d7502c64527b4b97ef9fe0e99e404">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2cadc24c85fcfad11ff98735e03e7570">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aa1b50464c47ec2306e132409e5c0d39b">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a77baf6645dae586ff93ee57f9eb1abb8">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8eced305bac59431a2c2c0bb10feb7be">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a154c67536bfad0e2ecdfea8d40521833">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a11543159dbaddde4dcb666056e758070">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4279a9edb1c26bf0bc08f853ededd183">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a75a06e97717d145137e875999180048e">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae31ac5280cc4e0a252ad62a65f5b15c4">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0c0115fb7a0bc33e71bc0b6848d97c5d">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a760667e522ab381ea922f79a0fe37032">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad7426f73c780c180a0c684705e3e277a">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a158ee12a14cbc5dc81d1a563915b8484">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ada5a7a435ca701c309e80ee6700264f1">get</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a98300c5254e99ef248757aee3fa2966d">put</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a99c01e95abff85318cb5a4e6c0fba2ae">operator[]</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a953e903e06ac7220399e624582ddfe1f">operator[]</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type = UINT_T&gt; </para><para>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8c41105ef914ccd1caec1a993bd95601">operator()</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a84abdae22a3b9638c2a93e5aed0a4f19">const_ref_data</link> () const</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a52a4fc749cfd9844a635a0e7154b86d4">cpy_data</link> () const</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a061cc41d3e0bcfca2f86c6f15eeeba7b">operator++</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad7a7be3dd91bec57f46819f95a5bbe8c">operator++</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aca9335419e9033518f40cccb436c13f5">operator--</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aceeb01544e642ed62c0f91026d78fd41">operator--</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6b97104904f8b86ad4b6c07880f7b3b8">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4d5e6973b1ebcf8efa59719b52516f5d">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7">C_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a">C_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">operator!</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a3c3887dbbf256226834180e0e692d230">operator-</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a49556722a8fb2fe40f41d12a23cd7773">operator&lt;&lt;</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a258de4665d5dad190a1f431949a57e9b">operator&lt;&lt;=</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a780df06ed084ec6d67298c50d5bebd06">operator&gt;&gt;</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1afdfd81c1577f21a78a883d78c69e661d">operator&gt;&gt;=</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6647618fb6d484f4c257159dba69c370">rem_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a7c50665e783bd8dd09b76af26e2d43b4">m_rem_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a76502863356a962c922528a7e0de7c22">mer_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad55f50be24724cc0790b2cafb3733a69">m_mer_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac904337e0a7ca97801a344494172e56e">operator|=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9b74fb6bb9d72c60570c4105ab56894a">operator|</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2700fbcaf685ccd1d8e1aebfd71e59b2">operator&amp;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a149564766c923ec353f74e647d15a0f5">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af16da7d777f0461043ec0d7daae338b3">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abcc6c82c4a4563ff93f43cdba0ea5a3d">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acff45608b5b1956e95e00d668b6f9e53">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2d07be047b2627cdf0b309167372ceff">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad75f5d976f829391ff1a2dd444ada770">operator+</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a22fe395b3bc039501e85f32739585378">operator-</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a66df3998850226ded5adad90ba303519">operator*</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ad662b6de3a00cd05bd8360af261578af">operator/</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>

<para>DIVISION BY A DIGIT. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a19230c6b73d80f18d23b299450d2a6d0">operator%</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const noexcept</para>

<para>REMAINDER BY A DIGIT. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4f4dcebb7aaf1dacde690b6b847e66d4">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2f2b61989451de1806071e761547e75e">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae1fb554a49a057b8e372a7c3b661559b">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a88e0cbd81bf9591a474869c5abd7579b">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abb76020807fd7517e6c238c41291d830">operator*=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0e87dc1755fe87fbbb6a6ce6a32b5d51">operator*=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2e993a7ba4bced5c0294564e2ba67999">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>

<para>TO DO. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a962ba532424e77c124ebc9fbde8d75cc">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a2244f1f8ec6816d363690387c8e24e5e">operator*</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1afcfbc7a19a2913245aeca67444ecbdc7">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4c2bf9b5eb73071ee089b28f26de7ace">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab80945af6751b25477521685c680b0a0">operator*</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac9064422cde6b378fe3c6242e41c0e9c">operator%</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp;arg) const noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a7b6093b0510c4fdf207e0db13556b410">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac474f6ef06fa9b772eb916dba6785145">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af7f4ff31f9ebe9f4ea61a2c1d3e33f31">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a70edaef36a22608963953cfb870c9381">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a10b62bcda139808daaba4d8d295027d0">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aaec621293aafe2333a44aae75d26f409">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abbe17a523c4b9a2244096891dd3ee307">ui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6e799b6bf51d69e92e9f267836022cf3">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab5277ff888e0a6c4ccc39cbe8f25c7cd">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a3c96c91771da24227a62d426728c8f21">sui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a35bd4491adbd998178de7b0577317374">sui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab83b9db44f407ad0516572fa747b20f4">sui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae60164c51b204fca341766c6bb762a48">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aa0312de3e99cb31b17e36295710baa72">sui_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0e0ce3574da31820f62617ff44a48ba7">regd_base_N_0</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4348d3c7e66b4316c9336de940900b4f">regd_base_N_1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a207bbdbb5f8b3ba6fef2cbd0fb3b2fd4">regd_base_N_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac1b7ea3317908fc13e2372226218f30c">regd_base_N_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1afa3463868582493cbae113570c005ff5">regd_base_N_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aced30ba689f6251588687cbc4891b055">regd_base_N_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9e76fca3636eb9c56b09cda38d61e2bc">regd_base_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a94a069651e6f07f0b117db42d77d6895">regd_base_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a62701d8d011fd069348c7ebeb888318a">regd_base_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a78688c0779605ff2e70400c2cf83cf9f">regd_base_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0436673bf267b740051916a794c0b335">regd_base_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a830f3c3de58bb73633c9cff13b217ae3">regd_base_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1735c9e1782d2117df23eb12a0feeda2">regd_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a881321b54a24d12bff09e271e0a505c4">regd_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1adc9a13a06dc19e25b899e7584aa2014e">regd_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1adf3405e104a61285b26efab30703513f">regd_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a054433a5c6b1119a661844bc20df43e6">regd_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8a6ada1089e4ecee20e0438b6a21881e">regd_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link> () noexcept</para>

<para>ARRAYS DE ENTEROS (CONSTANTES EN TIEMPO DE COMPILACION INMEDIATAS) </para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a11a8669870d26e8e0e4d0d2af3c814d8">regi_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9fb67b33d8f8d153fce5b8bcc575f283">regi_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a197912d151a7d43a251ec8c019701678">regi_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a72cde29ddb63c9bc1d77bd7ba9954e78">regi_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6173c51991a13f10e5608e51a8f06d8a">regi_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a02c8ea238d4e8921ae5e92d330f5bfba">assign</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, Int_Type arg) noexcept</para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN BASE_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a27d98c64f9ebb5af914f72b4cb46f457">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae36250d4dfb237c42163dcfb75a85edc">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a871142259e72da7bdb23be2d1bb631e4">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a695a0c3fc7ca2e33e09b7e307d35e59a">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abba03f817df42b3ae6bef35737f4a348">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a76b7bc4da5a7fe5de1a5d71cae196912">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a15b6a642118ce4c9465ca861a0c7c610">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae03840c70392af70f692a7f447c93c18">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aea5400ccaefeacf64023a1a606af31f6">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aa3d767ff05a632abc41c920fe558aa26">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a06c5c4901df7213d6b816d36f0295007">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aed85b3cc96fcfc122851baf8ee9ec0f8">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;bool with_result_type&gt; </para><para>static constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af990d1acc2982f27df4ce9d72c3f327d">m_add</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) -&gt; typename std::conditional_t&lt; with_result_type, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8">res_base_op_t</link>&lt; <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">binop_e::add</link> &gt;, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> const &amp; &gt; noexcept</para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</listitem>
            <listitem><para>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a65523219739c53202de6718061c2867d">m_sub</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>

<para>OPERATOR BASE_T -= DIG_T CON NOMBRE M_SUB. </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a00fccdbaa0c2380eac5a7ae6f196c122">add</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aebb9ac400ced2eaf90ab5c218b61bffe">sub</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a7b6093b0510c4fdf207e0db13556b410">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac474f6ef06fa9b772eb916dba6785145">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af7f4ff31f9ebe9f4ea61a2c1d3e33f31">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a70edaef36a22608963953cfb870c9381">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a10b62bcda139808daaba4d8d295027d0">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aaec621293aafe2333a44aae75d26f409">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abbe17a523c4b9a2244096891dd3ee307">ui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6e799b6bf51d69e92e9f267836022cf3">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab5277ff888e0a6c4ccc39cbe8f25c7cd">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a3c96c91771da24227a62d426728c8f21">sui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a35bd4491adbd998178de7b0577317374">sui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab83b9db44f407ad0516572fa747b20f4">sui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae60164c51b204fca341766c6bb762a48">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aa0312de3e99cb31b17e36295710baa72">sui_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0e0ce3574da31820f62617ff44a48ba7">regd_base_N_0</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4348d3c7e66b4316c9336de940900b4f">regd_base_N_1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a207bbdbb5f8b3ba6fef2cbd0fb3b2fd4">regd_base_N_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac1b7ea3317908fc13e2372226218f30c">regd_base_N_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1afa3463868582493cbae113570c005ff5">regd_base_N_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aced30ba689f6251588687cbc4891b055">regd_base_N_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9e76fca3636eb9c56b09cda38d61e2bc">regd_base_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a94a069651e6f07f0b117db42d77d6895">regd_base_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a62701d8d011fd069348c7ebeb888318a">regd_base_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a78688c0779605ff2e70400c2cf83cf9f">regd_base_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0436673bf267b740051916a794c0b335">regd_base_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a830f3c3de58bb73633c9cff13b217ae3">regd_base_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1735c9e1782d2117df23eb12a0feeda2">regd_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a881321b54a24d12bff09e271e0a505c4">regd_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1adc9a13a06dc19e25b899e7584aa2014e">regd_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1adf3405e104a61285b26efab30703513f">regd_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a054433a5c6b1119a661844bc20df43e6">regd_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8a6ada1089e4ecee20e0438b6a21881e">regd_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link> () noexcept</para>

<para>ARRAYS DE ENTEROS (CONSTANTES EN TIEMPO DE COMPILACION INMEDIATAS) </para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a11a8669870d26e8e0e4d0d2af3c814d8">regi_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9fb67b33d8f8d153fce5b8bcc575f283">regi_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a197912d151a7d43a251ec8c019701678">regi_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a72cde29ddb63c9bc1d77bd7ba9954e78">regi_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</para><para>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6173c51991a13f10e5608e51a8f06d8a">regi_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a02c8ea238d4e8921ae5e92d330f5bfba">assign</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, Int_Type arg) noexcept</para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN BASE_T. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a27d98c64f9ebb5af914f72b4cb46f457">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae36250d4dfb237c42163dcfb75a85edc">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a871142259e72da7bdb23be2d1bb631e4">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a695a0c3fc7ca2e33e09b7e307d35e59a">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1abba03f817df42b3ae6bef35737f4a348">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a76b7bc4da5a7fe5de1a5d71cae196912">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a15b6a642118ce4c9465ca861a0c7c610">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae03840c70392af70f692a7f447c93c18">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aea5400ccaefeacf64023a1a606af31f6">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aa3d767ff05a632abc41c920fe558aa26">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a06c5c4901df7213d6b816d36f0295007">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</para><para>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aed85b3cc96fcfc122851baf8ee9ec0f8">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;bool with_result_type&gt; </para><para>static constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af990d1acc2982f27df4ce9d72c3f327d">m_add</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) -&gt; typename std::conditional_t&lt; with_result_type, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8">res_base_op_t</link>&lt; <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">binop_e::add</link> &gt;, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> const &amp; &gt; noexcept</para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</listitem>
            <listitem><para>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a65523219739c53202de6718061c2867d">m_sub</link> (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>

<para>OPERATOR BASE_T -= DIG_T CON NOMBRE M_SUB. </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a00fccdbaa0c2380eac5a7ae6f196c122">add</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aebb9ac400ced2eaf90ab5c218b61bffe">sub</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>static constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ab6a4b438c955cdff6d124d39aaec788c">fediv</link> (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; 1 &gt; &amp;rarg) -&gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a5ae37d39e889eda3b56a58af5c242d7f">res_base_N_op_t</link>&lt; binop_e::fediv &gt; noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt;<?linebreak?>requires (suitable_base&lt;UINT_T,B&gt;() &amp;&amp; (L&gt;0))<?linebreak?>struct NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</title></simplesect>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521"/><section>
    <title>base_N_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>base_N_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_N_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">::base_N_t</link> =  std::array&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521"/><section>
    <title>base_N_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>base_N_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_N_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">::base_N_t</link> =  std::array&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565"/><section>
    <title>base_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>base_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">::base_t</link> =  <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt;L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565"/><section>
    <title>base_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>base_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">::base_t</link> =  <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt;L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40"/><section>
    <title>dig_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> =  <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&lt;UINT_T,B&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40"/><section>
    <title>dig_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> =  <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&lt;UINT_T,B&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c"/><section>
    <title>nat_reg_N_digs_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>nat_reg_N_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_N_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2351264c10e7ecf3ace8a2f8b9bf21f8">::nat_reg_N_digs_t</link> =  <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt;UINT_T,B,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c"/><section>
    <title>nat_reg_N_digs_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>nat_reg_N_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_N_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2351264c10e7ecf3ace8a2f8b9bf21f8">::nat_reg_N_digs_t</link> =  <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt;UINT_T,B,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8"/><section>
    <title>reg_ints_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reg_ints_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_ints_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">::reg_ints_t</link> =  typename std::array&lt;UINT_T,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8"/><section>
    <title>reg_ints_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reg_ints_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_ints_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">::reg_ints_t</link> =  typename std::array&lt;UINT_T,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a28a9c34d899f9b23d36b531ebe88b683"/><section>
    <title>reg_ssints_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reg_ssints_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_ssints_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a603eebc5e425ffafe94d8b1f55ef31a8">::reg_ssints_t</link> =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652">SIG_SINT_T</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a28a9c34d899f9b23d36b531ebe88b683"/><section>
    <title>reg_ssints_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reg_ssints_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_ssints_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a603eebc5e425ffafe94d8b1f55ef31a8">::reg_ssints_t</link> =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652">SIG_SINT_T</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a43e75c68765d5590c7f1427001c14352"/><section>
    <title>reg_suints_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reg_suints_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_suints_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a4a8728f420e00f6756a236651239f0b1">::reg_suints_t</link> =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a43e75c68765d5590c7f1427001c14352"/><section>
    <title>reg_suints_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reg_suints_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_suints_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a4a8728f420e00f6756a236651239f0b1">::reg_suints_t</link> =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a5ae37d39e889eda3b56a58af5c242d7f"/><section>
    <title>res_base_N_op_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>res_base_N_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_N_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a50eddfd182c56f5bb0ae7232729df2ea">::res_base_N_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt;N&gt;,op,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a5ae37d39e889eda3b56a58af5c242d7f"/><section>
    <title>res_base_N_op_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>res_base_N_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_N_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a50eddfd182c56f5bb0ae7232729df2ea">::res_base_N_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt;N&gt;,op,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8"/><section>
    <title>res_base_op_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>res_base_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1af8a7d0fac51131719ef364bd36d174ec">::res_base_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link>,op,L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8"/><section>
    <title>res_base_op_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>res_base_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1af8a7d0fac51131719ef364bd36d174ec">::res_base_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link>,op,L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab0830872a3654524eb3117e69646fe08"/><section>
    <title>res_N_op_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>res_N_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_N_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1ada662cac426f61ba755877841fc9f8f6">::res_N_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt;N&gt;,op,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab0830872a3654524eb3117e69646fe08"/><section>
    <title>res_N_op_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>res_N_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_N_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1ada662cac426f61ba755877841fc9f8f6">::res_N_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt;N&gt;,op,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad151db2178dbb157db841e5c8021fb64"/><section>
    <title>res_op_t<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>res_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1ab1bbebc6ebbc446a97086097880597b1">::res_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>,op,L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad151db2178dbb157db841e5c8021fb64"/><section>
    <title>res_op_t<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>res_op_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1ab1bbebc6ebbc446a97086097880597b1">::res_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>,op,L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652"/><section>
    <title>SIG_SINT_T<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">::SIG_SINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a114709921106b32e26ba3e8a1b64a652"/><section>
    <title>SIG_SINT_T<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">::SIG_SINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa"/><section>
    <title>SIG_UINT_T<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">::SIG_UINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa"/><section>
    <title>SIG_UINT_T<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">::SIG_UINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
</section>
<section>
<title>Documentación del constructor y destructor</title>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453"/><section>
    <title>nat_reg_digs_t()<computeroutput>[1/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR DEFECTO. </para>
</para>
<programlisting linenumbering="unnumbered">00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()}&#32;{}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a48e13b837d97d5b20e16d06fdb896453_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a00c466fc721a8c13b2c2e871cd7820b4"/><section>
    <title>nat_reg_digs_t()<computeroutput>[2/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR LISTA DE DIGITOS. </para>
</para>
<programlisting linenumbering="unnumbered">00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{arg}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a79417dac5a4154522330355788d20ecf"/><section>
    <title>nat_reg_digs_t()<computeroutput>[3/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&gt;&amp;&amp;...)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const Ts &amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO. </para>
</para>
<programlisting linenumbering="unnumbered">00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{(utility::pack2array&lt;Ts...&gt;{})(args...)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a04918e94f15b63785431c4153b05f992"/><section>
    <title>nat_reg_digs_t()<computeroutput>[4/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA DESDE UN ARRAY DE DIGITOS. </para>
</para>
<programlisting linenumbering="unnumbered">00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{copy_arg_N&lt;N&gt;(arg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad367e797ace322813a6fff1bb7306870"/><section>
    <title>nat_reg_digs_t()<computeroutput>[5/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</para>
<programlisting linenumbering="unnumbered">00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{move_arg_N&lt;N&gt;(std::move(arg))}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a56c17d76bfaf24bbe95e8cd0402367fc"/><section>
    <title>nat_reg_digs_t()<computeroutput>[6/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (Ints_type ... dig_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO. </para>
</para>
<programlisting linenumbering="unnumbered">00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{normalize&lt;Ints_type...&gt;(dig_pow_i...)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac754667e568ecdda0033e4672fdeefd3"/><section>
    <title>nat_reg_digs_t()<computeroutput>[7/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA POR REFERENCIA CONSTANTE. </para>
</para>
<programlisting linenumbering="unnumbered">00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{copy_arg_N&lt;N&gt;(arg.const_ref_data())}&#32;{}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac754667e568ecdda0033e4672fdeefd3_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9487898486f71a81f5ccc6573f8709db"/><section>
    <title>nat_reg_digs_t()<computeroutput>[8/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</para>
<programlisting linenumbering="unnumbered">00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{move_arg_N(std::move(*(arg.data())))}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453"/><section>
    <title>nat_reg_digs_t()<computeroutput>[9/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR DEFECTO. </para>
</para>
<programlisting linenumbering="unnumbered">00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()}&#32;{}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a48e13b837d97d5b20e16d06fdb896453_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a00c466fc721a8c13b2c2e871cd7820b4"/><section>
    <title>nat_reg_digs_t()<computeroutput>[10/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR LISTA DE DIGITOS. </para>
</para>
<programlisting linenumbering="unnumbered">00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{arg}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a79417dac5a4154522330355788d20ecf"/><section>
    <title>nat_reg_digs_t()<computeroutput>[11/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>&gt;&amp;&amp;...)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const Ts &amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO. </para>
</para>
<programlisting linenumbering="unnumbered">00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{(utility::pack2array&lt;Ts...&gt;{})(args...)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a04918e94f15b63785431c4153b05f992"/><section>
    <title>nat_reg_digs_t()<computeroutput>[12/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA DESDE UN ARRAY DE DIGITOS. </para>
</para>
<programlisting linenumbering="unnumbered">00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{copy_arg_N&lt;N&gt;(arg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad367e797ace322813a6fff1bb7306870"/><section>
    <title>nat_reg_digs_t()<computeroutput>[13/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</para>
<programlisting linenumbering="unnumbered">00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{move_arg_N&lt;N&gt;(std::move(arg))}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a56c17d76bfaf24bbe95e8cd0402367fc"/><section>
    <title>nat_reg_digs_t()<computeroutput>[14/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (Ints_type ... dig_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO. </para>
</para>
<programlisting linenumbering="unnumbered">00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{normalize&lt;Ints_type...&gt;(dig_pow_i...)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac754667e568ecdda0033e4672fdeefd3"/><section>
    <title>nat_reg_digs_t()<computeroutput>[15/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA POR REFERENCIA CONSTANTE. </para>
</para>
<programlisting linenumbering="unnumbered">00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{copy_arg_N&lt;N&gt;(arg.const_ref_data())}&#32;{}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac754667e568ecdda0033e4672fdeefd3_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9487898486f71a81f5ccc6573f8709db"/><section>
    <title>nat_reg_digs_t()<computeroutput>[16/16]</computeroutput></title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::nat_reg_digs_t (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</para>
<programlisting linenumbering="unnumbered">00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{move_arg_N(std::move(*(arg.data())))}&#32;{}
</programlisting></section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a00fccdbaa0c2380eac5a7ae6f196c122"/><section>
    <title>add()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>add</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::add (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_add&lt;false&gt;(larg,rarg);
02290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a00fccdbaa0c2380eac5a7ae6f196c122"/><section>
    <title>add()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>add</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::add (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_add&lt;false&gt;(larg,rarg);
02318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a02c8ea238d4e8921ae5e92d330f5bfba"/><section>
    <title>assign()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>assign</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::assign (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN BASE_T. </para>
</para>
<programlisting linenumbering="unnumbered">00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">type_traits::maxbase</link>();
00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int128_t&#32;B_128t_v{<emphasis role="keyword">static_cast&lt;</emphasis>int128_t<emphasis role="keyword">&gt;</emphasis>(B)};
00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;puede_multiplicarse{
00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(maxbase&lt;int128_t&gt;()/B_128t_v)&#32;&gt;&#32;0
00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;larg)!=(&amp;arg))&#32;{
00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int128_t&#32;creg_g{<emphasis role="keyword">static_cast&lt;</emphasis>int128_t<emphasis role="keyword">&gt;</emphasis>(arg)};
00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int128_t&#32;BasePowIx{B_128t_v};
00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{1u}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k)&#32;{
00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(puede_multiplicarse)
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B_128t_v;
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(creg_g&#32;&lt;&#32;0)&#32;{
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;+=&#32;BasePowIx;
00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{0u}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k){
00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[k]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(creg_g%B_128t_v);
00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;/=&#32;B_128t_v;
00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00378">NumRepr::type_traits::maxbase()</link>.</para>
<para>
Referenciado por <link linkend="_l00735">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator=()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a02c8ea238d4e8921ae5e92d330f5bfba_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a02c8ea238d4e8921ae5e92d330f5bfba_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a02c8ea238d4e8921ae5e92d330f5bfba"/><section>
    <title>assign()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>assign</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::assign (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN BASE_T. </para>
</para>
<programlisting linenumbering="unnumbered">00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">type_traits::maxbase</link>();
00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int128_t&#32;B_128t_v{<emphasis role="keyword">static_cast&lt;</emphasis>int128_t<emphasis role="keyword">&gt;</emphasis>(B)};
00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;puede_multiplicarse{
00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(maxbase&lt;int128_t&gt;()/B_128t_v)&#32;&gt;&#32;0
00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;larg)!=(&amp;arg))&#32;{
00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int128_t&#32;creg_g{<emphasis role="keyword">static_cast&lt;</emphasis>int128_t<emphasis role="keyword">&gt;</emphasis>(arg)};
00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int128_t&#32;BasePowIx{B_128t_v};
00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{1u}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k)&#32;{
00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(puede_multiplicarse)
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B_128t_v;
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(creg_g&#32;&lt;&#32;0)&#32;{
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;+=&#32;BasePowIx;
00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{0u}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k){
00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[k]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(creg_g%B_128t_v);
00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;/=&#32;B_128t_v;
00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00378">NumRepr::type_traits::maxbase()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a02c8ea238d4e8921ae5e92d330f5bfba_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a"/><section>
    <title>C_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>C_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a">C_B</link>(m_dc)};
01917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01914">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_B()</link>.</para>
<para>
Referenciado por <link linkend="_l01914">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_B()</link> y <link linkend="_l01926">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator-()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acb0c6bc9a10107e686ac7f9dbf545b9a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acb0c6bc9a10107e686ac7f9dbf545b9a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a"/><section>
    <title>C_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>C_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a">C_B</link>(m_dc)};
01945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01914">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acb0c6bc9a10107e686ac7f9dbf545b9a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7"/><section>
    <title>C_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7">C_Bm1</link>(m_dc)};
01911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01908">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_Bm1()</link>.</para>
<para>
Referenciado por <link linkend="_l01908">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_Bm1()</link> y <link linkend="_l01920">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator!()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac08d43112d9336e1e76fd7e62f3ba8a7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac08d43112d9336e1e76fd7e62f3ba8a7_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7"/><section>
    <title>C_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7">C_Bm1</link>(m_dc)};
01939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01908">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac08d43112d9336e1e76fd7e62f3ba8a7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acf64ab106dc1e03510434256064d85ef"/><section>
    <title>cat()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SUBREPR =&gt; SUB REPRESENTACION. </para>
</para>

<para>FORMACION DE UN REG_M_DIGS_T&lt;M&gt; DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T&lt;N&gt; EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION FORMACION DE UN REG_M_DIGS_T&lt;M&gt; DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T&lt;N&gt; EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION NAT_REG_N_T&lt;L+M&gt; NAT_REG_T::CAT(NAT_REG_N_T&lt;M&gt;) NAT_REG_N_T&lt;L+M&gt; NAT_REG_T::CAT_INV(NAT_REG_N_T&lt;M&gt;) NAT_REG_N_T&lt;L+1&gt; NAT_REG_T::CAT(DIG_T) NAT_REG_N_T&lt;L+1&gt; NAT_REG_T::CAT_INV(DIG_T) </para>
<programlisting linenumbering="unnumbered">00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;L,N&gt;(m_dc,arg));
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acf64ab106dc1e03510434256064d85ef"/><section>
    <title>cat()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SUBREPR =&gt; SUB REPRESENTACION. </para>
</para>

<para>FORMACION DE UN REG_M_DIGS_T&lt;M&gt; DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T&lt;N&gt; EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION FORMACION DE UN REG_M_DIGS_T&lt;M&gt; DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T&lt;N&gt; EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION NAT_REG_N_T&lt;L+M&gt; NAT_REG_T::CAT(NAT_REG_N_T&lt;M&gt;) NAT_REG_N_T&lt;L+M&gt; NAT_REG_T::CAT_INV(NAT_REG_N_T&lt;M&gt;) NAT_REG_N_T&lt;L+1&gt; NAT_REG_T::CAT(DIG_T) NAT_REG_N_T&lt;L+1&gt; NAT_REG_T::CAT_INV(DIG_T) </para>
<programlisting linenumbering="unnumbered">00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;L,N&gt;(m_dc,arg));
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a1e54bb927680f14dbd4d180a1262bc8a"/><section>
    <title>cat()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;L&gt;(m_dc,arg));
00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a1e54bb927680f14dbd4d180a1262bc8a"/><section>
    <title>cat()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;L&gt;(m_dc,arg));
00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a503c26355f8e7d254480e5bc3c0aca90"/><section>
    <title>cat_inv()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>cat_inv</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat_inv</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat_inv (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;N,L&gt;(arg,m_dc));
00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a503c26355f8e7d254480e5bc3c0aca90"/><section>
    <title>cat_inv()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>cat_inv</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat_inv</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N+L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat_inv (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;N,L&gt;(arg,m_dc));
00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4df4d89b90103f73c6bd40a88ca103b3"/><section>
    <title>cat_inv()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>cat_inv</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat_inv</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat_inv (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;L&gt;(arg,m_dc));
00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4df4d89b90103f73c6bd40a88ca103b3"/><section>
    <title>cat_inv()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>cat_inv</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat_inv</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat_inv (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(concat&lt;L&gt;(arg,m_dc));
00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a84abdae22a3b9638c2a93e5aed0a4f19"/><section>
    <title>const_ref_data()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>const_ref_data</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>const_ref_data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::const_ref_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;m_dc);
01573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00439">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::nat_reg_digs_t()</link>, <link linkend="_l01409">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator!=()</link>, <link linkend="_l01457">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator&lt;()</link>, <link linkend="_l01425">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator&lt;=()</link>, <link linkend="_l01482">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator&lt;=&gt;()</link>, <link linkend="_l00485">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator=()</link>, <link linkend="_l01393">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator==()</link>, <link linkend="_l01473">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator&gt;()</link> y <link linkend="_l01441">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator&gt;=()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a84abdae22a3b9638c2a93e5aed0a4f19_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a84abdae22a3b9638c2a93e5aed0a4f19"/><section>
    <title>const_ref_data()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>const_ref_data</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>const_ref_data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::const_ref_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;m_dc);
01601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a52a4fc749cfd9844a635a0e7154b86d4"/><section>
    <title>cpy_data()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cpy_data</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cpy_data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cpy_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;m_dc;
01577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a52a4fc749cfd9844a635a0e7154b86d4"/><section>
    <title>cpy_data()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cpy_data</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cpy_data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::cpy_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;m_dc;
01605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7"/><section>
    <title>dig_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_0();}
</programlisting><para>
Referenciado por <link linkend="_l02170">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_add()</link>, <link linkend="_l02251">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_sub()</link>, <link linkend="_l00273">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::nat_reg_digs_t()</link>, <link linkend="_l00099">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_0()</link>, <link linkend="_l00141">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B_m1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a85a8b769de34b30bc8f57d8fe7b6eca7_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7"/><section>
    <title>dig_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713"/><section>
    <title>dig_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_1();}
</programlisting><para>
Referenciado por <link linkend="_l02170">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_add()</link>, <link linkend="_l02251">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_sub()</link>, <link linkend="_l02877">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator+=()</link>, <link linkend="_l02925">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator-=()</link>, <link linkend="_l00109">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_1()</link>, <link linkend="_l00125">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_B()</link>, <link linkend="_l00133">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B()</link>, <link linkend="_l00220">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_1()</link>, <link linkend="_l00234">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_B()</link> y <link linkend="_l00243">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_pow_n_B()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_af5f8d64e4139b59eada5483f2e3b4713_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713"/><section>
    <title>dig_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a"/><section>
    <title>dig_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_Bm1();}
</programlisting><para>
Referenciado por <link linkend="_l02170">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_add()</link>, <link linkend="_l02251">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_sub()</link>, <link linkend="_l00117">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_Bm1()</link>, <link linkend="_l00141">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B_m1()</link> y <link linkend="_l00227">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_Bm1()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acd8786bcc458752321399dfb474df42a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a"/><section>
    <title>dig_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_Bm1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac474f6ef06fa9b772eb916dba6785145"/><section>
    <title>dig_Bm2()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_Bm2();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac474f6ef06fa9b772eb916dba6785145"/><section>
    <title>dig_Bm2()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_Bm2();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a7b6093b0510c4fdf207e0db13556b410"/><section>
    <title>dig_max()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a7b6093b0510c4fdf207e0db13556b410"/><section>
    <title>dig_max()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af7f4ff31f9ebe9f4ea61a2c1d3e33f31"/><section>
    <title>dig_submax()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_submax();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af7f4ff31f9ebe9f4ea61a2c1d3e33f31"/><section>
    <title>dig_submax()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_submax();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab6a4b438c955cdff6d124d39aaec788c"/><section>
    <title>fediv()</title>
<indexterm><primary>fediv</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>fediv</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>static constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::fediv (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; 1 &gt; &amp; rarg) -&gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a5ae37d39e889eda3b56a58af5c242d7f">res_base_N_op_t</link>&lt;binop_e::fediv&gt;
		noexcept <computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ada5a7a435ca701c309e80ee6700264f1"/><section>
    <title>get()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[I]);
01531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ada5a7a435ca701c309e80ee6700264f1"/><section>
    <title>get()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[I]);
01559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f"/><section>
    <title>is_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f">is_0</link>(m_dc);
01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01135">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_0()</link>.</para>
<para>
Referenciado por <link linkend="_l01135">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_0()</link> y <link linkend="_l02251">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_sub()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a6847060c452b924139575fd342cc850f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a6847060c452b924139575fd342cc850f_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f"/><section>
    <title>is_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f">is_0</link>(m_dc);
01165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01135">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a6847060c452b924139575fd342cc850f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a728a486aa19bebdb5556480f3ad25917"/><section>
    <title>is_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a728a486aa19bebdb5556480f3ad25917">is_1</link>(m_dc);
01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01140">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_1()</link>.</para>
<para>
Referenciado por <link linkend="_l01140">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a728a486aa19bebdb5556480f3ad25917_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a728a486aa19bebdb5556480f3ad25917_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a728a486aa19bebdb5556480f3ad25917"/><section>
    <title>is_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a728a486aa19bebdb5556480f3ad25917">is_1</link>(m_dc);
01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01140">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a728a486aa19bebdb5556480f3ad25917_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a41bae51f82d9802c60d34a71705372dc"/><section>
    <title>is_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a41bae51f82d9802c60d34a71705372dc">is_B</link>(m_dc);
01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01150">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_B()</link>.</para>
<para>
Referenciado por <link linkend="_l01150">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a41bae51f82d9802c60d34a71705372dc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a41bae51f82d9802c60d34a71705372dc_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a41bae51f82d9802c60d34a71705372dc"/><section>
    <title>is_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a41bae51f82d9802c60d34a71705372dc">is_B</link>(m_dc);
01180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01150">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a41bae51f82d9802c60d34a71705372dc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2b7eb96b8286969f0c1cb8a31f9e9ec8"/><section>
    <title>is_B_pow()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_B_pow</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_B_pow&lt;L,n&gt;(m_dc);
01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2b7eb96b8286969f0c1cb8a31f9e9ec8"/><section>
    <title>is_B_pow()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_B_pow</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_B_pow&lt;L,n&gt;(m_dc);
01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2454172f796622228d0238a14bfba7cc"/><section>
    <title>is_B_pow_m1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_B_pow_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow_m1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_B_pow_m1&lt;L,n&gt;(m_dc);
01164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2454172f796622228d0238a14bfba7cc"/><section>
    <title>is_B_pow_m1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_B_pow_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow_m1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_B_pow_m1&lt;L,n&gt;(m_dc);
01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197"/><section>
    <title>is_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link>(m_dc);
01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01145">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bm1()</link>.</para>
<para>
Referenciado por <link linkend="_l01145">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bm1()</link> y <link linkend="_l02170">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::m_add()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a1d08d0fd3545ed827f4cf1699b71e197_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a1d08d0fd3545ed827f4cf1699b71e197_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197"/><section>
    <title>is_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link>(m_dc);
01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01145">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a1d08d0fd3545ed827f4cf1699b71e197_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8169a3ed50e5d45ab556403132ba9138"/><section>
    <title>is_Bp1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_Bp1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bp1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8169a3ed50e5d45ab556403132ba9138">is_Bp1</link>(m_dc);
01157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01155">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bp1()</link>.</para>
<para>
Referenciado por <link linkend="_l01155">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bp1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8169a3ed50e5d45ab556403132ba9138_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8169a3ed50e5d45ab556403132ba9138_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8169a3ed50e5d45ab556403132ba9138"/><section>
    <title>is_Bp1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_Bp1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bp1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a8169a3ed50e5d45ab556403132ba9138">is_Bp1</link>(m_dc);
01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01155">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bp1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8169a3ed50e5d45ab556403132ba9138_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a45127fc7411537147f1bf4fc66e90710"/><section>
    <title>is_filled_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_filled_of</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> d&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_filled_of&lt;L,n,d&gt;(m_dc);
01188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a45127fc7411537147f1bf4fc66e90710"/><section>
    <title>is_filled_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_filled_of</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n, <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> d&gt; <?linebreak?>requires ((n&gt;0) &amp;&amp; (n&lt;L))</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_filled_of&lt;L,n,d&gt;(m_dc);
01216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9affc4906635a0803bf77af16c65dfaf"/><section>
    <title>is_filled_of_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_filled_of_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_filled_of_1&lt;L&gt;(m_dc);
01176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9affc4906635a0803bf77af16c65dfaf"/><section>
    <title>is_filled_of_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_filled_of_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_filled_of_1&lt;L&gt;(m_dc);
01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac33e1f6d87472a368b38851aac245d33"/><section>
    <title>is_filled_of_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_filled_of_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_filled_of_Bm1&lt;L&gt;(m_dc);
01181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac33e1f6d87472a368b38851aac245d33"/><section>
    <title>is_filled_of_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_filled_of_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_filled_of_Bm1&lt;L&gt;(m_dc);
01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af990d1acc2982f27df4ce9d72c3f327d"/><section>
    <title>m_add()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>m_add</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_add</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;bool with_result_type&gt; </computeroutput><para><computeroutput>static constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_add (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg) -&gt; typename std::conditional_t&lt;
			with_result_type,
				<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8">res_base_op_t</link>&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">binop_e::add</link>&gt;,
				<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> const&amp;
		&gt;                                           noexcept
	<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</para>

<para>OPERACIONES BINARIAS CON/SIN TIPO RESULTADO OPERACIONES BINARIAS BASE_T @ DIG_T OPERATOR BASE_T += DIG_T CON NOMBRE M_ADDITION </para>

<para>CARRY INICIAL POR DEFECTO</para>

<para>SUMA DEL PRIMER DIGITO DE LARG[0] Y RARG</para>

<para>BUCLE FOR QUE SUMA ARG Y 1 DESDE IDX=1 A IDX=L-1</para>

<para>INICIALIZACION</para>

<para>NOMBRE CORTO PARA RET.RESULT_CONTENT_LOW</para>

<para>NOMBRE CORTO PARA RET.CARRY</para>

<para>NOMBRE CORTO PARA RET.GOOD_RESULT</para>

<para>SUMA DEL PRIMER DIGITO DE LARG[0] Y RARG</para>

<para>BUCLE FOR QUE SUMA ARG Y 1 DESDE IDX=1 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">02176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;UINT_T&#32;<link linkend="_namespace_num_repr_1_1type__traits_1ab7aafe6bcb405d5c200145181755984f">middle_max</link>{std::numeric_limits&lt;UINT_T&gt;::max()/2};
02178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>uint_type&#32;=&#32;std::conditional_t&lt;B&lt;=middle_max,UINT_T,SIG_UINT_T&gt;;
02179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;=&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t&lt;uint_type,B&gt;</link>;
02180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!&#32;with_result_type)&#32;{
02182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()};
02184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&lt;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()-rarg)&#32;{
02185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;+=&#32;rarg;
02186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;-=&#32;(<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()-rarg+1);
02190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry.is_1())&#32;{
02195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link>())&#32;{
02196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++larg[ix];
02201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1af8a7d0fac51131719ef364bd36d174ec">res_base_op_t&lt;binop_e::add&gt;</link>&#32;ret{
02210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.result_content_low&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg,
02211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>(),
02212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.good_result&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>
02213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
02215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result{ret.result_content_low};
02217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;&#32;carry{ret.carry};
02219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;good{ret.good_result};
02221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&lt;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()-rarg)&#32;{
02222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;&#32;&#32;&#32;&#32;&#32;&#32;+=&#32;&#32;&#32;&#32;&#32;&#32;rarg;
02223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.result_content[0]&#32;&#32;&#32;-=&#32;(dig_B()-rarg);
02228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry.is_not_0())&#32;{
02233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result[ix].<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link>())&#32;{
02234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[ix]&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++result[ix];
02239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry.is_not_0())
02244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;good&#32;=&#32;<emphasis role="keyword">false</emphasis>;
02245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>, <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>, <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link> y <link linkend="_l01145">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_af990d1acc2982f27df4ce9d72c3f327d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af990d1acc2982f27df4ce9d72c3f327d"/><section>
    <title>m_add()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>m_add</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_add</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;bool with_result_type&gt; </computeroutput><para><computeroutput>static constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_add (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg) -&gt; typename std::conditional_t&lt;
			with_result_type,
				<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a746f29b586f41fa1f3c2ef159158cae8">res_base_op_t</link>&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">binop_e::add</link>&gt;,
				<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> const&amp;
		&gt;                                           noexcept
	<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</para>

<para>OPERACIONES BINARIAS CON/SIN TIPO RESULTADO OPERACIONES BINARIAS BASE_T @ DIG_T OPERATOR BASE_T += DIG_T CON NOMBRE M_ADDITION </para>

<para>CARRY INICIAL POR DEFECTO</para>

<para>SUMA DEL PRIMER DIGITO DE LARG[0] Y RARG</para>

<para>BUCLE FOR QUE SUMA ARG Y 1 DESDE IDX=1 A IDX=L-1</para>

<para>INICIALIZACION</para>

<para>NOMBRE CORTO PARA RET.RESULT_CONTENT_LOW</para>

<para>NOMBRE CORTO PARA RET.CARRY</para>

<para>NOMBRE CORTO PARA RET.GOOD_RESULT</para>

<para>SUMA DEL PRIMER DIGITO DE LARG[0] Y RARG</para>

<para>BUCLE FOR QUE SUMA ARG Y 1 DESDE IDX=1 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">02204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;UINT_T&#32;<link linkend="_namespace_num_repr_1_1type__traits_1ab7aafe6bcb405d5c200145181755984f">middle_max</link>{std::numeric_limits&lt;UINT_T&gt;::max()/2};
02206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>uint_type&#32;=&#32;std::conditional_t&lt;B&lt;=middle_max,UINT_T,SIG_UINT_T&gt;;
02207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;=&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t&lt;uint_type,B&gt;</link>;
02208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!&#32;with_result_type)&#32;{
02210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()};
02212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&lt;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()-rarg)&#32;{
02213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;+=&#32;rarg;
02214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;-=&#32;(<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()-rarg+1);
02218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry.is_1())&#32;{
02223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link>())&#32;{
02224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++larg[ix];
02229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1af8a7d0fac51131719ef364bd36d174ec">res_base_op_t&lt;binop_e::add&gt;</link>&#32;ret{
02238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.result_content_low&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg,
02239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>(),
02240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.good_result&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>
02241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
02243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result{ret.result_content_low};
02245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;&#32;carry{ret.carry};
02247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;good{ret.good_result};
02249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&lt;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()-rarg)&#32;{
02250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0]&#32;&#32;&#32;&#32;&#32;&#32;&#32;+=&#32;&#32;&#32;&#32;&#32;&#32;rarg;
02251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.result_content[0]&#32;&#32;&#32;-=&#32;(dig_B()-rarg);
02256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry.is_not_0())&#32;{
02261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result[ix].<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a1d08d0fd3545ed827f4cf1699b71e197">is_Bm1</link>())&#32;{
02262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[ix]&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++result[ix];
02267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry.is_not_0())
02272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;good&#32;=&#32;<emphasis role="keyword">false</emphasis>;
02273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>, <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>, <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link> y <link linkend="_l01145">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_af990d1acc2982f27df4ce9d72c3f327d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad55f50be24724cc0790b2cafb3733a69"/><section>
    <title>m_mer_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>m_mer_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_mer_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_mer_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mer_B(m_dc,n);
02071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad55f50be24724cc0790b2cafb3733a69"/><section>
    <title>m_mer_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>m_mer_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_mer_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_mer_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_mer_B(m_dc,n);
02099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a7c50665e783bd8dd09b76af26e2d43b4"/><section>
    <title>m_rem_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>m_rem_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_rem_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_rem_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rem_B(m_dc,n);
02057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a7c50665e783bd8dd09b76af26e2d43b4"/><section>
    <title>m_rem_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>m_rem_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_rem_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_rem_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rem_B(m_dc,n);
02085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a65523219739c53202de6718061c2867d"/><section>
    <title>m_sub()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>m_sub</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_sub</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_sub (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERATOR BASE_T -= DIG_T CON NOMBRE M_SUB. </para>
</para>

<para>COPIA DE RARG</para>

<para>CARRY INICIAL POR DEFECTO: NULO</para>

<para>SUMA DEL PRIMER DIGITO DE LARG[0] Y RARG</para>

<para>BUCLE FOR QUE RESTA RARG A LARG DESDE IDX=1 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">02252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;cprarg{rarg};
02256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;borrow{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()};
02258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;=&#32;rarg)&#32;{
02259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;-=&#32;rarg;
02260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cprarg&#32;-=&#32;larg[0];
02265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;=&#32;cprarg.C_B();
02266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(borrow.is_1())&#32;{
02271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg[ix].<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f">is_0</link>())&#32;{
02272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>();
02273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--arg[ix];
02278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(arg);
02280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(arg);
02284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>, <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>, <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link> y <link linkend="_l01135">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a65523219739c53202de6718061c2867d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a65523219739c53202de6718061c2867d"/><section>
    <title>m_sub()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>m_sub</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_sub</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_sub (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERATOR BASE_T -= DIG_T CON NOMBRE M_SUB. </para>
</para>

<para>COPIA DE RARG</para>

<para>CARRY INICIAL POR DEFECTO: NULO</para>

<para>SUMA DEL PRIMER DIGITO DE LARG[0] Y RARG</para>

<para>BUCLE FOR QUE RESTA RARG A LARG DESDE IDX=1 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">02280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;cprarg{rarg};
02284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;borrow{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()};
02286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;=&#32;rarg)&#32;{
02287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;-=&#32;rarg;
02288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(larg);
02290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cprarg&#32;-=&#32;larg[0];
02293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;larg[0]&#32;=&#32;cprarg.C_B();
02294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(borrow.is_1())&#32;{
02299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg[ix].<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6847060c452b924139575fd342cc850f">is_0</link>())&#32;{
02300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>();
02301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--arg[ix];
02306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
02307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(arg);
02308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(arg);
02312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>, <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>, <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link> y <link linkend="_l01135">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a65523219739c53202de6718061c2867d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6b97104904f8b86ad4b6c07880f7b3b8"/><section>
    <title>mC_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6b97104904f8b86ad4b6c07880f7b3b8">mC_B</link>(m_dc);
01897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01894">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::mC_B()</link>.</para>
<para>
Referenciado por <link linkend="_l01894">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::mC_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a6b97104904f8b86ad4b6c07880f7b3b8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a6b97104904f8b86ad4b6c07880f7b3b8_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6b97104904f8b86ad4b6c07880f7b3b8"/><section>
    <title>mC_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a6b97104904f8b86ad4b6c07880f7b3b8">mC_B</link>(m_dc);
01925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01894">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::mC_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a6b97104904f8b86ad4b6c07880f7b3b8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4d5e6973b1ebcf8efa59719b52516f5d"/><section>
    <title>mC_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4d5e6973b1ebcf8efa59719b52516f5d">mC_Bm1</link>(m_dc);
01904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01901">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link>.</para>
<para>
Referenciado por <link linkend="_l01901">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a4d5e6973b1ebcf8efa59719b52516f5d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a4d5e6973b1ebcf8efa59719b52516f5d_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4d5e6973b1ebcf8efa59719b52516f5d"/><section>
    <title>mC_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4d5e6973b1ebcf8efa59719b52516f5d">mC_Bm1</link>(m_dc);
01932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01901">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a4d5e6973b1ebcf8efa59719b52516f5d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a76502863356a962c922528a7e0de7c22"/><section>
    <title>mer_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>mer_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mer_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::mer_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{mer_B(m_dc,n)};
02064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a76502863356a962c922528a7e0de7c22"/><section>
    <title>mer_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>mer_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mer_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::mer_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{mer_B(m_dc,n)};
02092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a314ac41efce60c862c67a3939c8e6c5e"/><section>
    <title>operator Int_Type()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator Int_Type</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator Int_Type</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link> Int_Type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">type_traits::maxbase</link>();
00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&#32;retInt{0};
00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&#32;BasePowIx{1};
00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k)&#32;{
00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retInt&#32;+=&#32;m_dc[k]*BasePowIx;
00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B;
00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&#32;&#32;&#32;&#32;(k+1&#32;&lt;&#32;L)
00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;
00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;maxbase&lt;Int_Type&gt;()&#32;&lt;&#32;(retInt+(m_dc[k+1]*BasePowIx))&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retInt;&#32;}
00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retInt;
00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00378">NumRepr::type_traits::maxbase()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a314ac41efce60c862c67a3939c8e6c5e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a314ac41efce60c862c67a3939c8e6c5e"/><section>
    <title>operator Int_Type()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator Int_Type</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator Int_Type</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link> Int_Type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">type_traits::maxbase</link>();
00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&#32;retInt{0};
00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&#32;BasePowIx{1};
00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k)&#32;{
00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retInt&#32;+=&#32;m_dc[k]*BasePowIx;
00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B;
00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&#32;&#32;&#32;&#32;(k+1&#32;&lt;&#32;L)
00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;
00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;maxbase&lt;Int_Type&gt;()&#32;&lt;&#32;(retInt+(m_dc[k+1]*BasePowIx))&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retInt;&#32;}
00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retInt;
00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00378">NumRepr::type_traits::maxbase()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a314ac41efce60c862c67a3939c8e6c5e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf"/><section>
    <title>operator!()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7">C_Bm1</link>();
01923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01908">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aeeaec5efd2f7238613f826e21de5edbf_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf"/><section>
    <title>operator!()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac08d43112d9336e1e76fd7e62f3ba8a7">C_Bm1</link>();
01951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01908">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aeeaec5efd2f7238613f826e21de5edbf_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2cadc24c85fcfad11ff98735e03e7570"/><section>
    <title>operator!=()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;!=&#32;arg);
01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2cadc24c85fcfad11ff98735e03e7570"/><section>
    <title>operator!=()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;!=&#32;arg);
01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae03840c70392af70f692a7f447c93c18"/><section>
    <title>operator!=()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(larg&#32;==&#32;rarg));
01308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae03840c70392af70f692a7f447c93c18"/><section>
    <title>operator!=()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(larg&#32;==&#32;rarg));
01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae36250d4dfb237c42163dcfb75a85edc"/><section>
    <title>operator!=()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;!=&#32;rarg)
01219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01221 
01222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae36250d4dfb237c42163dcfb75a85edc"/><section>
    <title>operator!=()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;!=&#32;rarg)
01247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01249 
01250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aa1b50464c47ec2306e132409e5c0d39b"/><section>
    <title>operator!=()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;!=&#32;arg.const_ref_data());
01412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aa1b50464c47ec2306e132409e5c0d39b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aa1b50464c47ec2306e132409e5c0d39b"/><section>
    <title>operator!=()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1aeeaec5efd2f7238613f826e21de5edbf">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;!=&#32;arg.const_ref_data());
01440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aa1b50464c47ec2306e132409e5c0d39b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac9064422cde6b378fe3c6242e41c0e9c"/><section>
    <title>operator%()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator%</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator%</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>% (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">03055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
03057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;retuds&#32;&#32;&#32;=&#32;ret(0);
03058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;retdecs&#32;&#32;=&#32;ret(1);
03059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;arguds&#32;&#32;&#32;=&#32;arg(0);
03060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;argdecs&#32;&#32;=&#32;arg(1);
03061 
03062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retuds&#32;&#32;+=&#32;(B*retdecs);
03063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arguds&#32;&#32;+=&#32;(B*argdecs);
03064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retuds&#32;&#32;%=&#32;arguds;
03065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retdecs&#32;&#32;=&#32;retuds;
03066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retdecs&#32;/=&#32;B;
03067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retuds&#32;&#32;%=&#32;B;
03068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[1]&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(retdecs);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a19230c6b73d80f18d23b299450d2a6d0"/><section>
    <title>operator%()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator%</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator%</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>% (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>REMAINDER BY A DIGIT. </para>
</para>
<programlisting linenumbering="unnumbered">02866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a72d39095b29792b4a7229408d6edb5c9">NumRepr::fediv</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a149564766c923ec353f74e647d15a0f5"/><section>
    <title>operator&amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
02142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&amp;=&#32;arg;
02143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a149564766c923ec353f74e647d15a0f5"/><section>
    <title>operator&amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
02170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&amp;=&#32;arg;
02171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2700fbcaf685ccd1d8e1aebfd71e59b2"/><section>
    <title>operator&amp;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;&amp;=&#32;arg.const_ref_data();
02135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2700fbcaf685ccd1d8e1aebfd71e59b2"/><section>
    <title>operator&amp;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;&amp;=&#32;arg.const_ref_data();
02163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8c41105ef914ccd1caec1a993bd95601"/><section>
    <title>operator()()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type = UINT_T&gt; </computeroutput><para><computeroutput>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>() (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Int_Type<emphasis role="keyword">&gt;</emphasis>(m_dc[idx]());
01558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8c41105ef914ccd1caec1a993bd95601"/><section>
    <title>operator()()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type = UINT_T&gt; </computeroutput><para><computeroutput>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>() (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Int_Type<emphasis role="keyword">&gt;</emphasis>(m_dc[idx]());
01586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2244f1f8ec6816d363690387c8e24e5e"/><section>
    <title>operator*()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">03020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab80945af6751b25477521685c680b0a0"/><section>
    <title>operator*()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">03047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a66df3998850226ded5adad90ba303519"/><section>
    <title>operator*()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abb76020807fd7517e6c238c41291d830"/><section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>*= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
02965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&amp;&#32;cthis{0};
02966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)&#32;{
02967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;(cpthis*arg[ix]);
02968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis&#32;&lt;&lt;=&#32;1;
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0e87dc1755fe87fbbb6a6ce6a32b5d51"/><section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>*= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2e993a7ba4bced5c0294564e2ba67999"/><section>
    <title>operator+()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>TO DO. </para>
</para>

<para>TO DO </para>
<programlisting linenumbering="unnumbered">03002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acff45608b5b1956e95e00d668b6f9e53"/><section>
    <title>operator+()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">add</link>(m_dc,rarg)};
02318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">NumRepr::add</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acff45608b5b1956e95e00d668b6f9e53"/><section>
    <title>operator+()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">add</link>(m_dc,rarg)};
02346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a34ec78fcc91ffb1e54cd85e4a0924332">NumRepr::add</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1afcfbc7a19a2913245aeca67444ecbdc7"/><section>
    <title>operator+()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">03029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad75f5d976f829391ff1a2dd444ada770"/><section>
    <title>operator+()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:
02822 
02823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
02824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acff45608b5b1956e95e00d668b6f9e53">operator + </link>(<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;arg)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
02825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a061cc41d3e0bcfca2f86c6f15eeeba7b"/><section>
    <title>operator++()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preincrement&lt;false&gt;(m_dc);
01693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a061cc41d3e0bcfca2f86c6f15eeeba7b"/><section>
    <title>operator++()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preincrement&lt;false&gt;(m_dc);
01721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad7a7be3dd91bec57f46819f95a5bbe8c"/><section>
    <title>operator++()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;postincrement&lt;false&gt;(m_dc);
01725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad7a7be3dd91bec57f46819f95a5bbe8c"/><section>
    <title>operator++()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;postincrement&lt;false&gt;(m_dc);
01753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4f4dcebb7aaf1dacde690b6b847e66d4"/><section>
    <title>operator+=()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;&amp;&#32;cthis&#32;=&#32;(*this);
02883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry{0};
02884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&#32;&lt;&#32;L)&#32;{
02885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)&#32;{
02886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis{cthis.m_dc[ix]};
02887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;cpthis{cthis.m_dc[ix]};
02888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;cparg{arg[ix]};
02889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;cparg;
02890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;carry;
02891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((cthis&#32;&lt;&#32;cpthis)&#32;||&#32;(cparg&#32;&lt;&#32;cpthis))
02892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{N}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis{cthis.m_dc[ix]};
02896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;cpthis{cthis.m_dc[ix]};
02897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;carry;
02898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&lt;&#32;cpthis)
02899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
02904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis{cthis.m_dc[ix]};
02905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;cpthis{cthis.m_dc[ix]};
02906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;cparg{arg[ix]};
02907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;cparg;
02908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;carry;
02909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((cthis&#32;&lt;&#32;cpthis)&#32;||&#32;(cparg&#32;&lt;&#32;cpthis))
02910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a4f4dcebb7aaf1dacde690b6b847e66d4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af16da7d777f0461043ec0d7daae338b3"/><section>
    <title>operator+=()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_add&lt;false&gt;(m_dc,rarg);
02304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af16da7d777f0461043ec0d7daae338b3"/><section>
    <title>operator+=()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_add&lt;false&gt;(m_dc,rarg);
02332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2f2b61989451de1806071e761547e75e"/><section>
    <title>operator+=()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a3c3887dbbf256226834180e0e692d230"/><section>
    <title>operator-()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a">C_B</link>();
01929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01914">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a3c3887dbbf256226834180e0e692d230_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a3c3887dbbf256226834180e0e692d230"/><section>
    <title>operator-()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acb0c6bc9a10107e686ac7f9dbf545b9a">C_B</link>();
01957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01914">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::C_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a3c3887dbbf256226834180e0e692d230_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a962ba532424e77c124ebc9fbde8d75cc"/><section>
    <title>operator-()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">03011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2d07be047b2627cdf0b309167372ceff"/><section>
    <title>operator-()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a8a68dc3e925eacf92633be230722a140">sub</link>(m_dc,rarg)};
02324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a8a68dc3e925eacf92633be230722a140">NumRepr::sub</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a2d07be047b2627cdf0b309167372ceff"/><section>
    <title>operator-()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a8a68dc3e925eacf92633be230722a140">sub</link>(m_dc,rarg)};
02352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a8a68dc3e925eacf92633be230722a140">NumRepr::sub</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4c2bf9b5eb73071ee089b28f26de7ace"/><section>
    <title>operator-()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">03038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a22fe395b3bc039501e85f32739585378"/><section>
    <title>operator-()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aca9335419e9033518f40cccb436c13f5"/><section>
    <title>operator--()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;predecrement&lt;false&gt;(m_dc);
01816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aca9335419e9033518f40cccb436c13f5"/><section>
    <title>operator--()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;predecrement&lt;false&gt;(m_dc);
01844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aceeb01544e642ed62c0f91026d78fd41"/><section>
    <title>operator--()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;postdecrement&lt;false&gt;(m_dc);
01848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aceeb01544e642ed62c0f91026d78fd41"/><section>
    <title>operator--()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;postdecrement&lt;false&gt;(m_dc);
01876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae1fb554a49a057b8e372a7c3b661559b"/><section>
    <title>operator-=()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt; cparg pasa a ser el complemento a la base menos 1 de cparg</para>
<programlisting linenumbering="unnumbered">02929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
02931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;cparg{arg};
02933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;begin</emphasis>
02934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;elem_dig&#32;:&#32;cparg)&#32;{
02935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem_dig&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(B-1)-elem_dig;
02936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry{0};
02938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)&#32;{
02939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis{cthis.m_dc[ix]};
02940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;&#32;&#32;&#32;cpthis{cthis.m_dc[ix]};
02941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;carry;
02942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&lt;&#32;cpthis)
02943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
02944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
02945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;end</emphasis>
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ae1fb554a49a057b8e372a7c3b661559b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abcc6c82c4a4563ff93f43cdba0ea5a3d"/><section>
    <title>operator-=()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sub&lt;false&gt;(m_dc,rarg);
02311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abcc6c82c4a4563ff93f43cdba0ea5a3d"/><section>
    <title>operator-=()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_sub&lt;false&gt;(m_dc,rarg);
02339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a88e0cbd81bf9591a474869c5abd7579b"/><section>
    <title>operator-=()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad662b6de3a00cd05bd8360af261578af"/><section>
    <title>operator/()</title>
<indexterm><primary>operator/</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>/ (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>DIVISION BY A DIGIT. </para>
</para>
<programlisting linenumbering="unnumbered">02859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a72d39095b29792b4a7229408d6edb5c9">NumRepr::fediv</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4279a9edb1c26bf0bc08f853ededd183"/><section>
    <title>operator&lt;()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;&#32;arg);
01452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4279a9edb1c26bf0bc08f853ededd183"/><section>
    <title>operator&lt;()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;&#32;arg);
01480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aa3d767ff05a632abc41c920fe558aa26"/><section>
    <title>operator&lt;()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(N,M)};
01344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(N,M)};
01345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;N_gt_M{N&gt;M};
01346 
01347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&#32;!=&#32;M)&#32;{
01348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&gt;M)&#32;{
01350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].is_not_0())
01351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01359 
01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{N}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)
01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix]&#32;&lt;&#32;rarg[ix])
01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aa3d767ff05a632abc41c920fe558aa26"/><section>
    <title>operator&lt;()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(N,M)};
01372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(N,M)};
01373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;N_gt_M{N&gt;M};
01374 
01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&#32;!=&#32;M)&#32;{
01376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&gt;M)&#32;{
01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].is_not_0())
01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01387 
01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{N}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)
01389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix]&#32;&lt;&#32;rarg[ix])
01390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a695a0c3fc7ca2e33e09b7e307d35e59a"/><section>
    <title>operator&lt;()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;=&#32;rarg)
01244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a695a0c3fc7ca2e33e09b7e307d35e59a"/><section>
    <title>operator&lt;()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;=&#32;rarg)
01272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a75a06e97717d145137e875999180048e"/><section>
    <title>operator&lt;()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;&#32;arg.const_ref_data());
01460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a75a06e97717d145137e875999180048e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a75a06e97717d145137e875999180048e"/><section>
    <title>operator&lt;()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;&#32;arg.const_ref_data());
01488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a75a06e97717d145137e875999180048e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a49556722a8fb2fe40f41d12a23cd7773"/><section>
    <title>operator&lt;&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt; (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
02022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.ref_data()&#32;&lt;&lt;=&#32;n;
02023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(cpthis);
02024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a49556722a8fb2fe40f41d12a23cd7773"/><section>
    <title>operator&lt;&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt; (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
02050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.ref_data()&#32;&lt;&lt;=&#32;n;
02051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(cpthis);
02052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a258de4665d5dad190a1f431949a57e9b"/><section>
    <title>operator&lt;&lt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt;= (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;&lt;&lt;=&#32;n;
02030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a258de4665d5dad190a1f431949a57e9b"/><section>
    <title>operator&lt;&lt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt;= (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;&lt;&lt;=&#32;n;
02058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a77baf6645dae586ff93ee57f9eb1abb8"/><section>
    <title>operator&lt;=()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;=&#32;arg);
01420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a77baf6645dae586ff93ee57f9eb1abb8"/><section>
    <title>operator&lt;=()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;=&#32;arg);
01448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aed85b3cc96fcfc122851baf8ee9ec0f8"/><section>
    <title>operator&lt;=()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(larg&#32;&gt;&#32;rarg));
01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aed85b3cc96fcfc122851baf8ee9ec0f8"/><section>
    <title>operator&lt;=()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(larg&#32;&gt;&#32;rarg));
01408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a76b7bc4da5a7fe5de1a5d71cae196912"/><section>
    <title>operator&lt;=()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;&#32;rarg)
01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a76b7bc4da5a7fe5de1a5d71cae196912"/><section>
    <title>operator&lt;=()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;&#32;rarg)
01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8eced305bac59431a2c2c0bb10feb7be"/><section>
    <title>operator&lt;=()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;=&#32;arg.const_ref_data());
01428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8eced305bac59431a2c2c0bb10feb7be_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8eced305bac59431a2c2c0bb10feb7be"/><section>
    <title>operator&lt;=()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&lt;=&#32;arg.const_ref_data());
01456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8eced305bac59431a2c2c0bb10feb7be_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad7426f73c780c180a0c684705e3e277a"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;==&#32;arg)
01499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::equivalent;
01500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&lt;&#32;arg)
01501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::less;
01502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::greater;
01504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad7426f73c780c180a0c684705e3e277a"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;==&#32;arg)
01527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::equivalent;
01528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&lt;&#32;arg)
01529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::less;
01530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::greater;
01532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a158ee12a14cbc5dc81d1a563915b8484"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&gt;&#32;arg)
01511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::greater;
01512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&lt;&#32;arg)
01513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::less;
01514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::equivalent;
01516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a158ee12a14cbc5dc81d1a563915b8484"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&gt;&#32;arg)
01539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::greater;
01540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&lt;&#32;arg)
01541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::less;
01542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::equivalent;
01544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a760667e522ab381ea922f79a0fe37032"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;==&#32;arg.const_ref_data())
01485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::equal;
01486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&lt;&#32;arg.const_ref_data())
01487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::less;
01488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::greater;
01490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a760667e522ab381ea922f79a0fe37032_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a760667e522ab381ea922f79a0fe37032"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;==&#32;arg.const_ref_data())
01513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::equal;
01514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc&#32;&lt;&#32;arg.const_ref_data())
01515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::less;
01516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::greater;
01518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a760667e522ab381ea922f79a0fe37032_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aab48498228625991e1b7a6efc1714d6a"/><section>
    <title>operator=()<computeroutput>[1/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA MOVIMIENTO DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_arg_N&lt;N&gt;(std::move(arg));
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aab48498228625991e1b7a6efc1714d6a"/><section>
    <title>operator=()<computeroutput>[2/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA MOVIMIENTO DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_arg_N&lt;N&gt;(std::move(arg));
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aae26e3fd0c597eb576b8a73c8a6e0921"/><section>
    <title>operator=()<computeroutput>[3/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg_N&lt;N&gt;(arg);
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aae26e3fd0c597eb576b8a73c8a6e0921"/><section>
    <title>operator=()<computeroutput>[4/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg_N&lt;N&gt;(arg);
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aba43c889c90dfbb661c06609e10393e4"/><section>
    <title>operator=()<computeroutput>[5/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA CONST <emphasis>NO</emphasis> COPIABLE DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg_N&lt;N&gt;(arg);
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aba43c889c90dfbb661c06609e10393e4"/><section>
    <title>operator=()<computeroutput>[6/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA CONST <emphasis>NO</emphasis> COPIABLE DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg_N&lt;N&gt;(arg);
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a38fa3f288d43c0fa115e89bf9afd6da5"/><section>
    <title>operator=()<computeroutput>[7/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</para>
<programlisting linenumbering="unnumbered">00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;(this-&gt;m_dc[0]))!=(&amp;arg))&#32;{
00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc">set_0</link>();
00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[0]&#32;=&#32;arg;
00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00652">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a38fa3f288d43c0fa115e89bf9afd6da5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a38fa3f288d43c0fa115e89bf9afd6da5"/><section>
    <title>operator=()<computeroutput>[8/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</para>
<programlisting linenumbering="unnumbered">00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;(this-&gt;m_dc[0]))!=(&amp;arg))&#32;{
00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc">set_0</link>();
00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[0]&#32;=&#32;arg;
00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00652">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a38fa3f288d43c0fa115e89bf9afd6da5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0222f0fe5e680461731101767d0d658b"/><section>
    <title>operator=()<computeroutput>[9/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA EN LA QUE SE PUEDE COPIAR. </para>
</para>
<programlisting linenumbering="unnumbered">00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;arg.const_ref_data();
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0222f0fe5e680461731101767d0d658b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a72f08f8b1a5fa90636429b936399920b"/><section>
    <title>operator=()<computeroutput>[10/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE COPIAR. </para>
</para>
<programlisting linenumbering="unnumbered">00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;arg.const_ref_data();
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a72f08f8b1a5fa90636429b936399920b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0222f0fe5e680461731101767d0d658b"/><section>
    <title>operator=()<computeroutput>[11/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA EN LA QUE SE PUEDE COPIAR. </para>
</para>
<programlisting linenumbering="unnumbered">00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;arg.const_ref_data();
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0222f0fe5e680461731101767d0d658b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a72f08f8b1a5fa90636429b936399920b"/><section>
    <title>operator=()<computeroutput>[12/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE COPIAR. </para>
</para>
<programlisting linenumbering="unnumbered">00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;arg.const_ref_data();
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a72f08f8b1a5fa90636429b936399920b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab1a63d715621ca9fea2c4d765155a23b"/><section>
    <title>operator=()<computeroutput>[13/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) </para>
</para>
<programlisting linenumbering="unnumbered">00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a02c8ea238d4e8921ae5e92d330f5bfba">assign</link>(m_dc,arg);
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00707">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::assign()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ab1a63d715621ca9fea2c4d765155a23b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab1a63d715621ca9fea2c4d765155a23b"/><section>
    <title>operator=()<computeroutput>[14/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) </para>
</para>
<programlisting linenumbering="unnumbered">00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a02c8ea238d4e8921ae5e92d330f5bfba">assign</link>(m_dc,arg);
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00707">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::assign()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ab1a63d715621ca9fea2c4d765155a23b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae13d640c0fc939f463fe4db5fb58fc0a"/><section>
    <title>operator=()<computeroutput>[15/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR MOVIMIENTO. </para>
</para>
<programlisting linenumbering="unnumbered">00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;std::move(*(arg.data()));
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae13d640c0fc939f463fe4db5fb58fc0a"/><section>
    <title>operator=()<computeroutput>[16/16]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR MOVIMIENTO. </para>
</para>
<programlisting linenumbering="unnumbered">00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;std::move(*(arg.data()));
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a164f15e36c8a63b4379bafda3b14c989"/><section>
    <title>operator==()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;==&#32;arg);
01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a164f15e36c8a63b4379bafda3b14c989"/><section>
    <title>operator==()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;==&#32;arg);
01416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a15b6a642118ce4c9465ca861a0c7c610"/><section>
    <title>operator==()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>COMPARACIONES ENTRE BASE_N_T Y BASE_N_T HETEROGENEOS EN GENERAL EN FORMA BASE_N_T&lt;N&gt; @ BASE_N_T&lt;M&gt; STATIC </para>
<programlisting linenumbering="unnumbered">01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(N,M)};
01282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(N,M)};
01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;N_gt_M{N&gt;M};
01284 
01285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N!=M)&#32;{
01286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N_gt_M)&#32;{
01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].is_not_0())
01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;P&#32;;&#32;++ix)
01298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix]&#32;!=&#32;rarg[ix])
01299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a15b6a642118ce4c9465ca861a0c7c610"/><section>
    <title>operator==()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>COMPARACIONES ENTRE BASE_N_T Y BASE_N_T HETEROGENEOS EN GENERAL EN FORMA BASE_N_T&lt;N&gt; @ BASE_N_T&lt;M&gt; STATIC </para>
<programlisting linenumbering="unnumbered">01308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(N,M)};
01310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(N,M)};
01311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;N_gt_M{N&gt;M};
01312 
01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N!=M)&#32;{
01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N_gt_M)&#32;{
01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].is_not_0())
01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;P&#32;;&#32;++ix)
01326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix]&#32;!=&#32;rarg[ix])
01327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a27d98c64f9ebb5af914f72b4cb46f457"/><section>
    <title>operator==()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para>
<para>COMPARACIONES ENTRE BASE_N_T Y DIG_T EN FORMA BASE_N_T&lt;N&gt; @ DIG_T STATIC </para>
<programlisting linenumbering="unnumbered">01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;!=&#32;rarg)
01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a27d98c64f9ebb5af914f72b4cb46f457"/><section>
    <title>operator==()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para>
<para>COMPARACIONES ENTRE BASE_N_T Y DIG_T EN FORMA BASE_N_T&lt;N&gt; @ DIG_T STATIC </para>
<programlisting linenumbering="unnumbered">01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;!=&#32;rarg)
01232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aea0d7502c64527b4b97ef9fe0e99e404"/><section>
    <title>operator==()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;==&#32;arg.const_ref_data());
01396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aea0d7502c64527b4b97ef9fe0e99e404_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aea0d7502c64527b4b97ef9fe0e99e404"/><section>
    <title>operator==()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;==&#32;arg.const_ref_data());
01424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aea0d7502c64527b4b97ef9fe0e99e404_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae31ac5280cc4e0a252ad62a65f5b15c4"/><section>
    <title>operator&gt;()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;&#32;arg);
01468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae31ac5280cc4e0a252ad62a65f5b15c4"/><section>
    <title>operator&gt;()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;&#32;arg);
01496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aea5400ccaefeacf64023a1a606af31f6"/><section>
    <title>operator&gt;()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(N,M)};
01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(N,M)};
01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;N_gt_M{N&gt;M};
01318 
01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&#32;!=&#32;M)&#32;{
01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&gt;M)&#32;{
01322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].is_not_0())
01323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01331 
01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{N}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)
01333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix]&#32;&gt;&#32;rarg[ix])
01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aea5400ccaefeacf64023a1a606af31f6"/><section>
    <title>operator&gt;()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(N,M)};
01344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(N,M)};
01345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;N_gt_M{N&gt;M};
01346 
01347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&#32;!=&#32;M)&#32;{
01348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&gt;M)&#32;{
01350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix].is_not_0())
01351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01359 
01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{N}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)
01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[ix]&#32;&gt;&#32;rarg[ix])
01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a871142259e72da7bdb23be2d1bb631e4"/><section>
    <title>operator&gt;()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;&#32;rarg)
01232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a871142259e72da7bdb23be2d1bb631e4"/><section>
    <title>operator&gt;()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;&#32;rarg)
01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0c0115fb7a0bc33e71bc0b6848d97c5d"/><section>
    <title>operator&gt;()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;&#32;arg.const_ref_data());
01476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0c0115fb7a0bc33e71bc0b6848d97c5d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0c0115fb7a0bc33e71bc0b6848d97c5d"/><section>
    <title>operator&gt;()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;&#32;arg.const_ref_data());
01504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0c0115fb7a0bc33e71bc0b6848d97c5d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a154c67536bfad0e2ecdfea8d40521833"/><section>
    <title>operator&gt;=()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;=&#32;arg);
01436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a154c67536bfad0e2ecdfea8d40521833"/><section>
    <title>operator&gt;=()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;=&#32;arg);
01464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a06c5c4901df7213d6b816d36f0295007"/><section>
    <title>operator&gt;=()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(larg&#32;&lt;&#32;rarg));
01372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a06c5c4901df7213d6b816d36f0295007"/><section>
    <title>operator&gt;=()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;(M&gt;0))</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(larg&#32;&lt;&#32;rarg));
01400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abba03f817df42b3ae6bef35737f4a348"/><section>
    <title>operator&gt;=()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;=&#32;rarg)
01256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abba03f817df42b3ae6bef35737f4a348"/><section>
    <title>operator&gt;=()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
01281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].is_not_0())
01282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg[0]&#32;&gt;=&#32;rarg)
01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a11543159dbaddde4dcb666056e758070"/><section>
    <title>operator&gt;=()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;=&#32;arg.const_ref_data());
01444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a11543159dbaddde4dcb666056e758070_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a11543159dbaddde4dcb666056e758070"/><section>
    <title>operator&gt;=()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; N &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc&#32;&gt;=&#32;arg.const_ref_data());
01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01571">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::const_ref_data()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a11543159dbaddde4dcb666056e758070_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a780df06ed084ec6d67298c50d5bebd06"/><section>
    <title>operator&gt;&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt; (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{*<emphasis role="keyword">this</emphasis>}.ref_data()&#32;&gt;&gt;=&#32;n);
02037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a780df06ed084ec6d67298c50d5bebd06"/><section>
    <title>operator&gt;&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt; (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{*<emphasis role="keyword">this</emphasis>}.ref_data()&#32;&gt;&gt;=&#32;n);
02065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1afdfd81c1577f21a78a883d78c69e661d"/><section>
    <title>operator&gt;&gt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt;= (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;&gt;&gt;=&#32;n;
02043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1afdfd81c1577f21a78a883d78c69e661d"/><section>
    <title>operator&gt;&gt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt;= (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;&gt;&gt;=&#32;n;
02071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a99c01e95abff85318cb5a4e6c0fba2ae"/><section>
    <title>operator[]()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx]);
01546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a99c01e95abff85318cb5a4e6c0fba2ae"/><section>
    <title>operator[]()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx]);
01574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a953e903e06ac7220399e624582ddfe1f"/><section>
    <title>operator[]()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx]);
01552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a953e903e06ac7220399e624582ddfe1f"/><section>
    <title>operator[]()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> idx)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx]);
01580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9b74fb6bb9d72c60570c4105ab56894a"/><section>
    <title>operator|()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator|</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>| (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
02127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;|=&#32;arg;
02128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9b74fb6bb9d72c60570c4105ab56894a"/><section>
    <title>operator|()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator|</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>| (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
02155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;|=&#32;arg;
02156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac904337e0a7ca97801a344494172e56e"/><section>
    <title>operator|=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>|= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;|=&#32;arg.const_ref_data();
02120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac904337e0a7ca97801a344494172e56e"/><section>
    <title>operator|=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>|= (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc&#32;|=&#32;arg.const_ref_data();
02148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a98300c5254e99ef248757aee3fa2966d"/><section>
    <title>put()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>put</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>put</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::put (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[I]&#32;=&#32;arg;
01539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[I]);
01540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a98300c5254e99ef248757aee3fa2966d"/><section>
    <title>put()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>put</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>put</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> I&gt; <?linebreak?>requires ((I&lt;L)&amp;&amp;(I&gt;=0))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::put (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[I]&#32;=&#32;arg;
01567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[I]);
01568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a1735c9e1782d2117df23eb12a0feeda2"/><section>
    <title>regd_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>FUNCIONES INMEDIATAS QUE NOS DAN CONSTANTES DEL TIPO DE LA ACTUAL CLASE SE HACE CREANDO UNA VARIABLE RVALUE TEMPORAL CON LA FUNCION HOMOLOGA PARA BASE_T </para>
<programlisting linenumbering="unnumbered">00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9e76fca3636eb9c56b09cda38d61e2bc">regd_base_0</link>()};
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00155">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_0()</link>.</para>
<para>
Referenciado por <link linkend="_l03090">NumRepr::operator&gt;&gt;()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a1735c9e1782d2117df23eb12a0feeda2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a1735c9e1782d2117df23eb12a0feeda2_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a1735c9e1782d2117df23eb12a0feeda2"/><section>
    <title>regd_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>FUNCIONES INMEDIATAS QUE NOS DAN CONSTANTES DEL TIPO DE LA ACTUAL CLASE SE HACE CREANDO UNA VARIABLE RVALUE TEMPORAL CON LA FUNCION HOMOLOGA PARA BASE_T </para>
<programlisting linenumbering="unnumbered">00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a9e76fca3636eb9c56b09cda38d61e2bc">regd_base_0</link>()};
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00155">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a1735c9e1782d2117df23eb12a0feeda2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a881321b54a24d12bff09e271e0a505c4"/><section>
    <title>regd_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a94a069651e6f07f0b117db42d77d6895">regd_base_1</link>()};
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00159">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a881321b54a24d12bff09e271e0a505c4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a881321b54a24d12bff09e271e0a505c4"/><section>
    <title>regd_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a94a069651e6f07f0b117db42d77d6895">regd_base_1</link>()};
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00159">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a881321b54a24d12bff09e271e0a505c4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1adf3405e104a61285b26efab30703513f"/><section>
    <title>regd_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a78688c0779605ff2e70400c2cf83cf9f">regd_base_B</link>()};
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00167">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_adf3405e104a61285b26efab30703513f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1adf3405e104a61285b26efab30703513f"/><section>
    <title>regd_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a78688c0779605ff2e70400c2cf83cf9f">regd_base_B</link>()};
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00167">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_adf3405e104a61285b26efab30703513f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9e76fca3636eb9c56b09cda38d61e2bc"/><section>
    <title>regd_base_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T&lt;L&gt; DONDE BASE_T == BASE_N_T&lt;L&gt; TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL </para>
<programlisting linenumbering="unnumbered">00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_0&lt;L&gt;()};
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00182">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_0()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a9e76fca3636eb9c56b09cda38d61e2bc_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9e76fca3636eb9c56b09cda38d61e2bc"/><section>
    <title>regd_base_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T&lt;L&gt; DONDE BASE_T == BASE_N_T&lt;L&gt; TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL </para>
<programlisting linenumbering="unnumbered">00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_0&lt;L&gt;()};
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a94a069651e6f07f0b117db42d77d6895"/><section>
    <title>regd_base_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_1&lt;L&gt;()};
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00186">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_1()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a94a069651e6f07f0b117db42d77d6895_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a94a069651e6f07f0b117db42d77d6895"/><section>
    <title>regd_base_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_1&lt;L&gt;()};
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a78688c0779605ff2e70400c2cf83cf9f"/><section>
    <title>regd_base_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_B&lt;L&gt;()};
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00194">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_B()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a78688c0779605ff2e70400c2cf83cf9f_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a78688c0779605ff2e70400c2cf83cf9f"/><section>
    <title>regd_base_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_B&lt;L&gt;()};
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a62701d8d011fd069348c7ebeb888318a"/><section>
    <title>regd_base_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_Bm1&lt;L&gt;()};
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00190">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_Bm1()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a62701d8d011fd069348c7ebeb888318a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a62701d8d011fd069348c7ebeb888318a"/><section>
    <title>regd_base_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_Bm1&lt;L&gt;()};
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0e0ce3574da31820f62617ff44a48ba7"/><section>
    <title>regd_base_N_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_N_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL </para>
<programlisting linenumbering="unnumbered">00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{};
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;dig&#32;:&#32;ret)&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dig&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0e0ce3574da31820f62617ff44a48ba7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0e0ce3574da31820f62617ff44a48ba7"/><section>
    <title>regd_base_N_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_N_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL </para>
<programlisting linenumbering="unnumbered">00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret;
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;dig&#32;:&#32;ret)&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dig&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0e0ce3574da31820f62617ff44a48ba7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4348d3c7e66b4316c9336de940900b4f"/><section>
    <title>regd_base_N_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_N_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a4348d3c7e66b4316c9336de940900b4f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4348d3c7e66b4316c9336de940900b4f"/><section>
    <title>regd_base_N_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_N_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a4348d3c7e66b4316c9336de940900b4f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac1b7ea3317908fc13e2372226218f30c"/><section>
    <title>regd_base_N_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_N_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac1b7ea3317908fc13e2372226218f30c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac1b7ea3317908fc13e2372226218f30c"/><section>
    <title>regd_base_N_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_N_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac1b7ea3317908fc13e2372226218f30c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a207bbdbb5f8b3ba6fef2cbd0fb3b2fd4"/><section>
    <title>regd_base_N_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_N_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>();
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a207bbdbb5f8b3ba6fef2cbd0fb3b2fd4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a207bbdbb5f8b3ba6fef2cbd0fb3b2fd4"/><section>
    <title>regd_base_N_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_N_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (N&gt;=0)</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>();
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a207bbdbb5f8b3ba6fef2cbd0fb3b2fd4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1afa3463868582493cbae113570c005ff5"/><section>
    <title>regd_base_N_pow_n_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_N_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_afa3463868582493cbae113570c005ff5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1afa3463868582493cbae113570c005ff5"/><section>
    <title>regd_base_N_pow_n_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_N_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>();
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_afa3463868582493cbae113570c005ff5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aced30ba689f6251588687cbc4891b055"/><section>
    <title>regd_base_N_pow_n_B_m1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_N_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{};
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>();
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)&#32;{
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link> y <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aced30ba689f6251588687cbc4891b055_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aced30ba689f6251588687cbc4891b055"/><section>
    <title>regd_base_N_pow_n_B_m1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_N_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a4be6820bce9cbdab9fce0897b48d2521">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{};
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>();
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)&#32;{
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>();
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link> y <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_aced30ba689f6251588687cbc4891b055_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0436673bf267b740051916a794c0b335"/><section>
    <title>regd_base_pow_n_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_pow_n_B&lt;L&gt;()};
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00200">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_pow_n_B()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a0436673bf267b740051916a794c0b335_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a0436673bf267b740051916a794c0b335"/><section>
    <title>regd_base_pow_n_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_pow_n_B&lt;L&gt;()};
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a830f3c3de58bb73633c9cff13b217ae3"/><section>
    <title>regd_base_pow_n_B_m1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_base_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_pow_n_B_m1&lt;L&gt;()};
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l00206">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_pow_n_B_m1()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a830f3c3de58bb73633c9cff13b217ae3_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a830f3c3de58bb73633c9cff13b217ae3"/><section>
    <title>regd_base_pow_n_B_m1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_base_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_pow_n_B_m1&lt;L&gt;()};
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1adc9a13a06dc19e25b899e7584aa2014e"/><section>
    <title>regd_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a62701d8d011fd069348c7ebeb888318a">regd_base_Bm1</link>()};
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00163">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_adc9a13a06dc19e25b899e7584aa2014e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1adc9a13a06dc19e25b899e7584aa2014e"/><section>
    <title>regd_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a62701d8d011fd069348c7ebeb888318a">regd_base_Bm1</link>()};
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00163">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_adc9a13a06dc19e25b899e7584aa2014e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a054433a5c6b1119a661844bc20df43e6"/><section>
    <title>regd_pow_n_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0436673bf267b740051916a794c0b335">regd_base_pow_n_B</link>()};
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00171">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_pow_n_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a054433a5c6b1119a661844bc20df43e6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a054433a5c6b1119a661844bc20df43e6"/><section>
    <title>regd_pow_n_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0436673bf267b740051916a794c0b335">regd_base_pow_n_B</link>()};
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00171">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_pow_n_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a054433a5c6b1119a661844bc20df43e6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8a6ada1089e4ecee20e0438b6a21881e"/><section>
    <title>regd_pow_n_B_m1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regd_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a830f3c3de58bb73633c9cff13b217ae3">regd_base_pow_n_B_m1</link>()};
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00175">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_pow_n_B_m1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8a6ada1089e4ecee20e0438b6a21881e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a8a6ada1089e4ecee20e0438b6a21881e"/><section>
    <title>regd_pow_n_B_m1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regd_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a830f3c3de58bb73633c9cff13b217ae3">regd_base_pow_n_B_m1</link>()};
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00175">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regd_base_pow_n_B_m1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a8a6ada1089e4ecee20e0438b6a21881e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843"/><section>
    <title>regi_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regi_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>ARRAYS DE ENTEROS (CONSTANTES EN TIEMPO DE COMPILACION INMEDIATAS) </para>
</para>
<programlisting linenumbering="unnumbered">00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{};
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;digint&#32;:&#32;ret)&#32;{
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digint&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()();
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>.</para>
<para>
Referenciado por <link linkend="_l00220">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_1()</link>, <link linkend="_l00234">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_B()</link>, <link linkend="_l00227">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_Bm1()</link> y <link linkend="_l00243">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_pow_n_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acf4ea2de98d127c1bfc0ffef53fc2843_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acf4ea2de98d127c1bfc0ffef53fc2843_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843"/><section>
    <title>regi_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regi_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>ARRAYS DE ENTEROS (CONSTANTES EN TIEMPO DE COMPILACION INMEDIATAS) </para>
</para>
<programlisting linenumbering="unnumbered">00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{};
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;digint&#32;:&#32;ret)&#32;{
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digint&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a85a8b769de34b30bc8f57d8fe7b6eca7">dig_0</link>()();
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00059">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_acf4ea2de98d127c1bfc0ffef53fc2843_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a11a8669870d26e8e0e4d0d2af3c814d8"/><section>
    <title>regi_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regi_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>()();
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a11a8669870d26e8e0e4d0d2af3c814d8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a11a8669870d26e8e0e4d0d2af3c814d8"/><section>
    <title>regi_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regi_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>()();
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a11a8669870d26e8e0e4d0d2af3c814d8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a197912d151a7d43a251ec8c019701678"/><section>
    <title>regi_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regi_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>()();
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a197912d151a7d43a251ec8c019701678_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a197912d151a7d43a251ec8c019701678"/><section>
    <title>regi_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regi_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>()();
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a197912d151a7d43a251ec8c019701678_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9fb67b33d8f8d153fce5b8bcc575f283"/><section>
    <title>regi_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regi_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()();
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a9fb67b33d8f8d153fce5b8bcc575f283_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a9fb67b33d8f8d153fce5b8bcc575f283"/><section>
    <title>regi_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regi_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acd8786bcc458752321399dfb474df42a">dig_Bm1</link>()();
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00063">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_Bm1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a9fb67b33d8f8d153fce5b8bcc575f283_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a72cde29ddb63c9bc1d77bd7ba9954e78"/><section>
    <title>regi_pow_n_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regi_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>()();
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a72cde29ddb63c9bc1d77bd7ba9954e78_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a72cde29ddb63c9bc1d77bd7ba9954e78"/><section>
    <title>regi_pow_n_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regi_pow_n_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1acf4ea2de98d127c1bfc0ffef53fc2843">regi_0</link>()};
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af5f8d64e4139b59eada5483f2e3b4713">dig_1</link>()();
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00061">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::dig_1()</link> y <link linkend="_l00211">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a72cde29ddb63c9bc1d77bd7ba9954e78_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6173c51991a13f10e5608e51a8f06d8a"/><section>
    <title>regi_pow_n_B_m1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>regi_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{};
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(B-1)();
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(0)();
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6173c51991a13f10e5608e51a8f06d8a"/><section>
    <title>regi_pow_n_B_m1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>regi_pow_n_B_m1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regi_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; L))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ae197f40f9e67e915152a55ff0a9c6bc8">reg_ints_t</link>&lt; L &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::regi_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;L&gt;</link>&#32;ret{};
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(B-1)();
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link>(0)();
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6647618fb6d484f4c257159dba69c370"/><section>
    <title>rem_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rem_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rem_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::rem_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{rem_B(m_dc,n)};
02050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6647618fb6d484f4c257159dba69c370"/><section>
    <title>rem_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rem_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rem_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t">nat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::rem_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a48e13b837d97d5b20e16d06fdb896453">nat_reg_digs_t</link>&#32;ret{rem_B(m_dc,n)};
02078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
02079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc"/><section>
    <title>set_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE LIMPIEZA A CERO DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc">set_0</link>(m_dc);
00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00652">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_0()</link>.</para>
<para>
Referenciado por <link linkend="_l00695">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::operator=()</link> y <link linkend="_l00652">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac4f2f52679334d058322e2537881b5fc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac4f2f52679334d058322e2537881b5fc_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc"/><section>
    <title>set_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE LIMPIEZA A CERO DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1ac4f2f52679334d058322e2537881b5fc">set_0</link>(m_dc);
00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00652">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_ac4f2f52679334d058322e2537881b5fc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a197e63e671e4306b1d6c95cf3dddf122"/><section>
    <title>set_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE LIMPIEZA A B-1 DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a197e63e671e4306b1d6c95cf3dddf122">set_Bm1</link>(m_dc);
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00658">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_Bm1()</link>.</para>
<para>
Referenciado por <link linkend="_l00658">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a197e63e671e4306b1d6c95cf3dddf122_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a197e63e671e4306b1d6c95cf3dddf122_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a197e63e671e4306b1d6c95cf3dddf122"/><section>
    <title>set_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE LIMPIEZA A B-1 DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a197e63e671e4306b1d6c95cf3dddf122">set_Bm1</link>(m_dc);
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00658">NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;::set_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__reg__digs__t_a197e63e671e4306b1d6c95cf3dddf122_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4ac89cc0daee3cbccf22a42164e99481"/><section>
    <title>set_dig()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_dig</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_dig (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE LIMPIEZA A VALOR DIG_T DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_dig(m_dc,arg);
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a4ac89cc0daee3cbccf22a42164e99481"/><section>
    <title>set_dig()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_dig</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_dig (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE LIMPIEZA A VALOR DIG_T DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_dig(m_dc,arg);
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad7f694c626b4b9199f0fd299a0c06f54"/><section>
    <title>set_interval_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_interval_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE PONER A VALOR DIG_0 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_interval_0&lt;N_i,N_pf&gt;(m_dc);
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ad7f694c626b4b9199f0fd299a0c06f54"/><section>
    <title>set_interval_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_interval_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE PONER A VALOR DIG_0 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_interval_0&lt;N_i,N_pf&gt;(m_dc);
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af1e049ae99df1afdfaf216efa6877f77"/><section>
    <title>set_interval_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_interval_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE PONER A VALOR DIG_Bm1 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_interval_Bm1&lt;N_i,N_pf&gt;(m_dc);
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1af1e049ae99df1afdfaf216efa6877f77"/><section>
    <title>set_interval_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_interval_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE PONER A VALOR DIG_Bm1 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_interval_Bm1&lt;N_i,N_pf&gt;(m_dc);
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a5755851c821c5b1a87ab04e4bd7861a0"/><section>
    <title>set_interval_dig()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_interval_dig</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_dig (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> dig)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE PONER A VALOR DIG EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_interval_0&lt;N_i,N_pf&gt;(m_dc,dig);
00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a5755851c821c5b1a87ab04e4bd7861a0"/><section>
    <title>set_interval_dig()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_interval_dig</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_dig (<link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> dig)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION DE PONER A VALOR DIG EN [N_0 , N_1) DEL NAT_REG_DIGS_T. </para>
</para>
<programlisting linenumbering="unnumbered">00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_interval_0&lt;N_i,N_pf&gt;(m_dc,dig);
00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aebb9ac400ced2eaf90ab5c218b61bffe"/><section>
    <title>sub()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sub</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sub</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sub (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_sub&lt;false&gt;(larg,rarg);
02296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aebb9ac400ced2eaf90ab5c218b61bffe"/><section>
    <title>sub()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sub</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sub</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sub (const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a672d5826194facdec958a6d914808565">base_t</link> &amp; larg, const <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1af0ef47d7041ec4388d9bd68338867f40">dig_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_sub&lt;false&gt;(larg,rarg);
02324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae0035860926f7f260553e8bce191066e"/><section>
    <title>subrepr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>subrepr</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>subrepr</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ibegin, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::subrepr ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;subregister&lt;L,ibegin,iend&gt;(m_dc);
00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae0035860926f7f260553e8bce191066e"/><section>
    <title>subrepr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>subrepr</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>subrepr</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ibegin, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a44ebd2cc3dfba1630868cd0ac286817c">nat_reg_N_digs_t</link>&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::subrepr ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;subregister&lt;L,ibegin,iend&gt;(m_dc);
00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a3c96c91771da24227a62d426728c8f21"/><section>
    <title>sui_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sui_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a3c96c91771da24227a62d426728c8f21"/><section>
    <title>sui_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sui_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a35bd4491adbd998178de7b0577317374"/><section>
    <title>sui_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sui_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a35bd4491adbd998178de7b0577317374"/><section>
    <title>sui_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sui_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae60164c51b204fca341766c6bb762a48"/><section>
    <title>sui_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ae60164c51b204fca341766c6bb762a48"/><section>
    <title>sui_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab83b9db44f407ad0516572fa747b20f4"/><section>
    <title>sui_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sui_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab83b9db44f407ad0516572fa747b20f4"/><section>
    <title>sui_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sui_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aa0312de3e99cb31b17e36295710baa72"/><section>
    <title>sui_Bp1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sui_Bp1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()+1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aa0312de3e99cb31b17e36295710baa72"/><section>
    <title>sui_Bp1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sui_Bp1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1nat__reg__digs__t_1a0bc66161b8896407c4c036a8ef98f1fa">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()+1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a70edaef36a22608963953cfb870c9381"/><section>
    <title>ui_0()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a70edaef36a22608963953cfb870c9381"/><section>
    <title>ui_0()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a10b62bcda139808daaba4d8d295027d0"/><section>
    <title>ui_1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a10b62bcda139808daaba4d8d295027d0"/><section>
    <title>ui_1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abbe17a523c4b9a2244096891dd3ee307"/><section>
    <title>ui_B()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ui_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;B;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1abbe17a523c4b9a2244096891dd3ee307"/><section>
    <title>ui_B()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ui_B</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;B;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aaec621293aafe2333a44aae75d26f409"/><section>
    <title>ui_Bm1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;B-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1aaec621293aafe2333a44aae75d26f409"/><section>
    <title>ui_Bm1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;B-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab5277ff888e0a6c4ccc39cbe8f25c7cd"/><section>
    <title>ui_max()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1ab5277ff888e0a6c4ccc39cbe8f25c7cd"/><section>
    <title>ui_max()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6e799b6bf51d69e92e9f267836022cf3"/><section>
    <title>ui_submax()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_submax();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__reg__digs__t_1a6e799b6bf51d69e92e9f267836022cf3"/><section>
    <title>ui_submax()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1nat__reg__digs__t">NumRepr::nat_reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_submax();}
</programlisting></section>
<para>
La documentación para esta estructura fue generada a partir de los siguientes ficheros:</para>
<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp">nat_reg_digs_t (Copia en conflicto de MSI 2022-11-24).hpp</link><link linkend="_nat__reg__digs__t_8hpp">nat_reg_digs_t.hpp</link></section>
</section>
