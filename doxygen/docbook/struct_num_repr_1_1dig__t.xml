<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1dig__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::dig_t&lt; UINT_T, B &gt;</title>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;dig_t.hpp&gt;</computeroutput>
</para>
Diagrama de colaboración para NumRepr::dig_t&lt; UINT_T, B &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> = <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> = <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link> = std::array&lt; UINT_T, 2 &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a1051e56dae889dea37c0fc56c629ef47">digspair</link> = std::array&lt; <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>, 2 &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9">uintspairlist</link> = std::array&lt; <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link>, B &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a66b00dc8a233028c0b8af1d6c8c968df">uintspairtbl</link> = std::array&lt; <link linkend="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9">uintspairlist</link>, B &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1dig__t_1ad0179be562c80f204f00fa63ee87f595">resbinop_t</link> = <link linkend="_struct_num_repr_1_1auxiliary__types_1_1resbinop__t">auxiliary_types::resbinop_t</link>&lt; <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>, op &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1aafdbf9ec2e1c2c693053bddc9c3da18b">operator UINT_T</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const UINT_T &amp; <link linkend="_struct_num_repr_1_1dig__t_1a41f650033f842a57e20462acf2d56bd3">get</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a98f3c67f12b327b29cb7dd956979aa6b">operator SIG_UINT_T</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a11aa8890a01df04bb8c78e36b1671bcb">operator SIG_SINT_T</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t_1aad3081cc834a2404026c745da3a19624">operator()</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1dig__t_1ab4dcf1d753e748b3d6b7a1060fab4ef6">set_0</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1dig__t_1a0c80d7466c95459dd00be306eead4646">set_1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1dig__t_1a3b378922ef3003a5c8ea7a243a4a8303">set_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1dig__t_1ad56cccb9f0884cea668bacef17054f72">set_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a6a88c25f113c10a3e960dff6bc83209d">dig_t</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1af0449bb155f32b9f4d0a77616be964f5">dig_t</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;) noexcept=default</para>

<para>CONSTRUCTOR COPIA POR REFERENCIA. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a0271247936d99587c10e4e7f793eca59">dig_t</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;&amp;) noexcept=default</para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ae1e378970227631d984b568c6e87aea9">operator=</link> (const Int_t &amp;a) noexcept</para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN INT_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a2c7df43b2672d12d58b0170564b65067">operator=</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;) noexcept=default</para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN DIG_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1acd2c86722aea84ff8caa599f46143096">operator=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;&amp;) noexcept=default</para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE MOVIMIENTO DESDE UN DIG_T. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1aecc930e8cb3dbc3ede5beeff11ef77ee">is_unit</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a48f6d7f54f227eaf337438fccd8b9ff4">is_0_divisor</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1aa62606aacfd127f2670db23a727e1689">mult_inv</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1aaad1f6b6c362bb8b79e308d8dbd3623e">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aadb521540be446f8f6affbe08593f521">operator&amp;=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a3794e0222d9b563c1692006bba0af83e">operator|</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ab917ba177adf7c56596f814db3bc3e26">operator|=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::unsigned_integral_c UIntType&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1abcc6416630883d3061eb2cc4a2b19b6d">operator^=</link> (UIntType exp) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::unsigned_integral_c UIntType&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a38d52e65a990092a76e803e16e918fb7">operator^</link> (UIntType exp) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a16d0da2599654bff077fbeca82c74935">operator==</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a47635d2d0ec4782ae299ee8d120e3382">operator!=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a2e48d921d1562d835c6fe6804ab2ec29">operator&gt;=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1afefef1d7905f1b427805fed3bac47b6f">operator&gt;</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1acdc26317d35ccf448bf50bc5aa8a88e2">operator&lt;=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a541d4e253f487b533befc4b36db15b37">operator&lt;</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1dig__t_1a6c213b8f2f95f130cd8557f4d910e645">operator&lt;=&gt;</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> rhs) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a98120e7f67bdd81793d79f21df596840">operator==</link> (Int_t rhs) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1dig__t_1ab70884cd01554850ffe4d26a86dc72e0">operator&lt;=&gt;</link> (Int_t rhs) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aba27e3396b7ed8788f2cfe819f4d4bb3">operator+=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ae24ff79c3041e20d742037441037d2b3">operator+=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aaea951b73ed6db7bbddace9d937e65e1">operator-=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a8ccb0b59a15564ffb2b293664267d5ec">operator-=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a4a8206b542cb7f4b6346f8958757b977">operator*=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a168a6f67f18e796f8873a0e6c2333d54">operator*=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ae6090e4504d28bdd974c7366150a5eaa">operator/=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a2ae86f82c15b23402ab0893d841e9f9f">operator/=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a6c7356a5ae3558ef870ec13760e4cb8a">operator%=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a2c84aafb21be9d9cdbe35758bc44d98b">operator%=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aaa1f4b500974e6fd56e680e03f29b2c2">operator++</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a8870447b3f8ce7bd2a9119b6f7d4530c">operator++</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a760f7426a2aa1c3633499eb30faa47bc">operator--</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a8c9932459b63c42c16f18da0e6b72b86">operator--</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a0b75235bdbf8643db99997e9ecbb41fe">operator+</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1ac0fdb16b6029708a28c6db50eb5cf71d">operator-</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a13f9599ed8b248ba17c973f9044123da">operator*</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1af8bbcb61605057ec7caee066cec098d3">operator/</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a81c124dfd1f9bec0d42a33229279d4c6">operator%</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a00c1f1363179d60534b4c673ca1e1ca1">operator+</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a4acce2a25030ead690d375a1953d8882">operator-</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a1914890e81afe75f7d090ff87ce82f22">operator*</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1ac0d386b51a9b2d64547d64b98f903ef2">operator/</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1aef688b2a7dffda3d612f59446753074a">operator%</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1abfd426bf39f6c5e0421a0fa532e1d886">operator!</link> () const noexcept</para>

<para>EN BASE B, B-1-m_d ES EL COMPL_Bm1(m_d) </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a4d310043a6574e445b13cea0f7096690">operator-</link> () const noexcept</para>

<para>EN BASE B, B-m_d ES EL COMPL_B(m_d) </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a3d6a5c0e1d8a4719d58a476cfb68c960">C_Bm1</link> () const noexcept</para>

<para>&quot;C_Bm1&quot; es identico a &quot;operator!()&quot; </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a946d999d39a25dda024a06800ac57f70">C_B</link> () const noexcept</para>

<para>&quot;C_B&quot; es identico a &quot;operator-()&quot; </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aeaabd19b772acd490a224d21840165cf">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a08ec2a242e2d81958e5b23970c16aab1">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c">is_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a3097efc035d69810593924081fe87698">is_0or1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a3f3fbeaf6b33d1715bbd18a32c9d786b">is_not_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a8186108a31cd8a25848f0269a7d19a7c">is_not_0</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1aacae804f80074c18f9ab9a84bd53b39b">is_not_0or1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b">is_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd">is_not_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a6c4fba7ed06b49210ef5ff28df23a668">is_Bm1orBm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a6ef1aa06ecb5f66b634124209f18cb2e">is_not_Bm1orBm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a8f6e6f45df7dc5326ff1006bf5bebd10">is_Bm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a7b1616ba435215cc41468ae13696a369">is_not_Bm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1af27980a6204664a1333284ba9c60d316">is_not_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ad54d97fbbe203e3aecaf937df2600ba2">is_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ad5a111737f792b6ae0bf54153e4a8b17">is_far_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1af91d529a5c32bcc62d02b4700713b512">is_near_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr std::string <link linkend="_struct_num_repr_1_1dig__t_1a485ebeb8d32500ce824d6e88e02f4eba">to_string</link> () const noexcept</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_num_repr_1_1dig__t_1aac7bbe0123608fe9eef2c9ef75b082f6">get_type_template_string_id_token</link> (std::istream &amp;is) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>template&lt;UINT_T n, UINT_T m&gt; <?linebreak?>requires ((n&lt;B)&amp;&amp;(m&lt;B))</para><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link> <link linkend="_struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5">mult</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval bool <link linkend="_struct_num_repr_1_1dig__t_1a2e4a2d001d8b4a6e97639da50e33d3cb">is_prime</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a4295924ee3603c94ef1f1c7d83976be8">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a2f8231e5cfedba8aaef0a404ca8df5d5">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a85fa7ae1435069ddd1b87658c97a5856">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a326196de3bd9537e5c23df66440b8a56">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a73c90f6b9bab2442e884cc30b0af258f">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a7cdf0d9df3dedb75f66d4d7eda2e2da5">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1aaac3a2d93ea02d4860644ede5dc38506">ui_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a815d56d548d1572c87630f311d8b49e9">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a9684eea2c5657f412de910eea97817c7">sui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a9df237777f14cf1ebc8d550a885260ff">sui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1aeb3cb9d0b23b1c211dff853083a6fe83">sui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a43a4e505e240a8f1ad75f5ad5f8d1353">sui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1ae5704d076a53f9416a1b943df75b9179">ssi_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1ae42291bd38bbbaffa802f75d6a1baeab">ssi_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a73855570e049a9b032a7a49587fb6d90">ssi_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a287219a289b34f6f682e318b3ca1f92c">ssi_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1af8eebfebac403516d028ecce97b98d63">ssi_1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a879e2a4684c282b6449f23a262c91ce3">normaliza</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a081c0bf1162ff858903c226cb48b08e8">sum_carry</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg_1, <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg_2) noexcept</para>
</listitem>
            <listitem><para>static constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a038d9d12be4bf69c11a1544a29698806">is_type_template_string_id</link> (std::string in) noexcept</para>

<para>el parser/lexer del <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> </para>
</listitem>
            <listitem><para>static constexpr std::string <link linkend="_struct_num_repr_1_1dig__t_1a502583a59394f36d40dfc03402177c84">to_type_template_string_id</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a2818baa334a2d9efafc9dc3ce8fbfb25">size_of_type_template_string_id</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a7eaaf1b30f1b962c539ec833fa5b3c5f">get_digit_token</link> (std::istream &amp;is, UINT_T &amp;uint_value)</para>

<para>FUNCION QUE CONSIGUE EL TOKEN DIGITO. </para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_num_repr_1_1dig__t_1a256f1cc8420ff589031fef99193a1b52">get_radix_token</link> (std::istream &amp;is)</para>

<para>FUNCION QUE CONSIGUE EL TOKEN BASE. </para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_num_repr_1_1dig__t_1a4b2689884533f42678398c144b127910">read</link> (std::istream &amp;is, <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;value) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos privados    </title>
        <itemizedlist>
            <listitem><para>constexpr std::string <link linkend="_struct_num_repr_1_1dig__t_1ae3669f0d5e1a3533692e714ed8381a19">num_to_string</link> () const noexcept</para>

<para>TIENE QUE DEVOLVER STD::STRING. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos privados estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr std::string <link linkend="_struct_num_repr_1_1dig__t_1aafbbe9b31b632c19b6b161d7da7052c8">radix_str</link> () noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Atributos privados    </title>
        <itemizedlist>
            <listitem><para>UINT_T <link linkend="_struct_num_repr_1_1dig__t_1ac0c7935b799a4e21bfafdd8f4b6a0bbc">m_d</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt;<?linebreak?>requires (suitable_base&lt;UINT_T,B&gt;())<?linebreak?>struct NumRepr::dig_t&lt; UINT_T, B &gt;</title></simplesect>

<para>&lt; WRAPPER PARA UN TIPO UINT_T QUE UNSIGNED_INTEGRAL_T&lt;UINT_T&gt; SE SOBRECARGAN LOS OPERADORES ARITMETICOS PARA ARITMETICA MODULAR DIG_T = SUMA Y MULTIPLICACION CIRCULAR (MODULAR CON MOD B) </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00019">19</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a1051e56dae889dea37c0fc56c629ef47"/><section>
    <title>digspair</title>
<indexterm><primary>digspair</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>digspair</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::digspair =  std::array&lt;<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>,2&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00029">29</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad0179be562c80f204f00fa63ee87f595"/><section>
    <title>resbinop_t</title>
<indexterm><primary>resbinop_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>resbinop_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::resbinop_t =  <link linkend="_struct_num_repr_1_1auxiliary__types_1_1resbinop__t">auxiliary_types::resbinop_t</link>&lt;<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>,op&gt;</computeroutput></para>
<para>BEGIN : CONSTRUCCION DE LAS TABLAS DE MULTIPLICAR ESTATICAS PARA TODA LA CLASE </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00034">34</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38"/><section>
    <title>SIG_SINT_T</title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::SIG_SINT_T =  <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00026">26</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a"/><section>
    <title>SIG_UINT_T</title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::SIG_UINT_T =  <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00024">24</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb"/><section>
    <title>uintspair</title>
<indexterm><primary>uintspair</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>uintspair</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::uintspair =  std::array&lt;UINT_T,2&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00028">28</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9"/><section>
    <title>uintspairlist</title>
<indexterm><primary>uintspairlist</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>uintspairlist</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::uintspairlist =  std::array&lt;<link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link>,B&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00030">30</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a66b00dc8a233028c0b8af1d6c8c968df"/><section>
    <title>uintspairtbl</title>
<indexterm><primary>uintspairtbl</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>uintspairtbl</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::uintspairtbl =  std::array&lt;<link linkend="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9">uintspairlist</link>,B&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00031">31</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación del constructor y destructor</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68"/><section>
    <title>dig_t()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt; CONSTRUCTORES CONSTRUCTOR POR DEFECTO NORMALIZA ES UNA FUNCION QUE BASICAMENTE SI ENTRA 1524 DEVUELVE 1524B TENIENDO EN CUENTA TIPOS Y SIGNOS </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00213">213</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6a88c25f113c10a3e960dff6bc83209d"/><section>
    <title>dig_t()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_t (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR A PARTIR DE UN ENTERO ARG ARG EQUIV ARG+Z*B DONDE Z ES UN ENTERO EN m_d SOLO QUEREMOS QUE HAYA UN NUMERO ENTRE 0 Y B-1 INCLUSIVES </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00290">290</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af0449bb155f32b9f4d0a77616be964f5"/><section>
    <title>dig_t()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_t (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA POR REFERENCIA. </para>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a0271247936d99587c10e4e7f793eca59"/><section>
    <title>dig_t()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_t (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp;&amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</para>
</section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a946d999d39a25dda024a06800ac57f70"/><section>
    <title>C_B()</title>
<indexterm><primary>C_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&quot;C_B&quot; es identico a &quot;operator-()&quot; </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00962">962</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a946d999d39a25dda024a06800ac57f70_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3d6a5c0e1d8a4719d58a476cfb68c960"/><section>
    <title>C_Bm1()</title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&quot;C_Bm1&quot; es identico a &quot;operator!()&quot; </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00956">956</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a3d6a5c0e1d8a4719d58a476cfb68c960_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3"/><section>
    <title>dig_0()</title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00160">160</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_ac6a8ff5406dd59f782f096ea7f2d2da3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c"/><section>
    <title>dig_1()</title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00161">161</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a1dc126ef160231a2c2a87a30fdda731c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a85fa7ae1435069ddd1b87658c97a5856"/><section>
    <title>dig_Bm1()</title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00158">158</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a85fa7ae1435069ddd1b87658c97a5856_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a326196de3bd9537e5c23df66440b8a56"/><section>
    <title>dig_Bm2()</title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00159">159</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a326196de3bd9537e5c23df66440b8a56_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4295924ee3603c94ef1f1c7d83976be8"/><section>
    <title>dig_max()</title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00156">156</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a4295924ee3603c94ef1f1c7d83976be8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2f8231e5cfedba8aaef0a404ca8df5d5"/><section>
    <title>dig_submax()</title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00157">157</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a2f8231e5cfedba8aaef0a404ca8df5d5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a41f650033f842a57e20462acf2d56bd3"/><section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const UINT_T &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00121">121</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7eaaf1b30f1b962c539ec833fa5b3c5f"/><section>
    <title>get_digit_token()</title>
<indexterm><primary>get_digit_token</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>get_digit_token</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::get_digit_token (std::istream &amp; is, UINT_T &amp; uint_value)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>FUNCION QUE CONSIGUE EL TOKEN DIGITO. </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01313">1313</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a7eaaf1b30f1b962c539ec833fa5b3c5f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a256f1cc8420ff589031fef99193a1b52"/><section>
    <title>get_radix_token()</title>
<indexterm><primary>get_radix_token</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>get_radix_token</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::get_radix_token (std::istream &amp; is)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>FUNCION QUE CONSIGUE EL TOKEN BASE. </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01378">1378</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a256f1cc8420ff589031fef99193a1b52_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aac7bbe0123608fe9eef2c9ef75b082f6"/><section>
    <title>get_type_template_string_id_token()</title>
<indexterm><primary>get_type_template_string_id_token</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>get_type_template_string_id_token</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::get_type_template_string_id_token (std::istream &amp; is)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>FUNCION GENERICA QUE CONSIGUE EL TOKEN TYPE PARA LA OBTENCION DEL OBJETO CORRESPONDIENTE POR TECLADO </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01183">1183</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aac7bbe0123608fe9eef2c9ef75b082f6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d"/><section>
    <title>is_0()</title>
<indexterm><primary>is_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>dig_t&lt;uchint,7&gt; a,b,c; a = 5; b = 2; c = 0; !a == 1 is TRUE a.C_Bm1() == 1 is TRUE !b == 4 is TRUE b.C_Bm1() == 4 is TRUE !c == 6 is TRUE c.C_Bm1() == 6 is TRUE -a == 2 is TRUE a.C_B() == 2 is TRUE -b == 5 is TRUE b.C_B() == 5 is TRUE -c == 0 is TRUE c.C_B() == 0 is TRUE a.mC_Bm1() == 1 is TRUE a == 1 is TRUE b.mC_Bm1() == 4 is TRUE b == 4 is TRUE c.mC_Bm1() == 6 is TRUE c == 6 is TRUE a.mC_B() == 2 is TRUE a == 2 is TRUE b.mC_B() == 5 is TRUE b == 5 is TRUE c.mC_B() == 0 is TRUE c == 0 is TRUE </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01013">1013</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a48f6d7f54f227eaf337438fccd8b9ff4"/><section>
    <title>is_0_divisor()</title>
<indexterm><primary>is_0_divisor</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_0_divisor</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_0_divisor ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00362">362</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a48f6d7f54f227eaf337438fccd8b9ff4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3097efc035d69810593924081fe87698"/><section>
    <title>is_0or1()</title>
<indexterm><primary>is_0or1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_0or1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_0or1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01025">1025</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a3097efc035d69810593924081fe87698_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c"/><section>
    <title>is_1()</title>
<indexterm><primary>is_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01019">1019</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_ac906122dd220e44ed6762896888b8e4c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b"/><section>
    <title>is_Bm1()</title>
<indexterm><primary>is_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01049">1049</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6c4fba7ed06b49210ef5ff28df23a668"/><section>
    <title>is_Bm1orBm2()</title>
<indexterm><primary>is_Bm1orBm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_Bm1orBm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_Bm1orBm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01061">1061</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8f6e6f45df7dc5326ff1006bf5bebd10"/><section>
    <title>is_Bm2()</title>
<indexterm><primary>is_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_Bm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_Bm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01073">1073</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad5a111737f792b6ae0bf54153e4a8b17"/><section>
    <title>is_far_maxormin()</title>
<indexterm><primary>is_far_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_far_maxormin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_far_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01097">1097</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad54d97fbbe203e3aecaf937df2600ba2"/><section>
    <title>is_maxormin()</title>
<indexterm><primary>is_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_maxormin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01091">1091</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af91d529a5c32bcc62d02b4700713b512"/><section>
    <title>is_near_maxormin()</title>
<indexterm><primary>is_near_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_near_maxormin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_near_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01108">1108</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8186108a31cd8a25848f0269a7d19a7c"/><section>
    <title>is_not_0()</title>
<indexterm><primary>is_not_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01037">1037</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aacae804f80074c18f9ab9a84bd53b39b"/><section>
    <title>is_not_0or1()</title>
<indexterm><primary>is_not_0or1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_0or1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_0or1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01043">1043</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3f3fbeaf6b33d1715bbd18a32c9d786b"/><section>
    <title>is_not_1()</title>
<indexterm><primary>is_not_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01031">1031</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a3f3fbeaf6b33d1715bbd18a32c9d786b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd"/><section>
    <title>is_not_Bm1()</title>
<indexterm><primary>is_not_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01055">1055</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6ef1aa06ecb5f66b634124209f18cb2e"/><section>
    <title>is_not_Bm1orBm2()</title>
<indexterm><primary>is_not_Bm1orBm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_Bm1orBm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_Bm1orBm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01067">1067</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7b1616ba435215cc41468ae13696a369"/><section>
    <title>is_not_Bm2()</title>
<indexterm><primary>is_not_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_Bm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_Bm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01079">1079</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af27980a6204664a1333284ba9c60d316"/><section>
    <title>is_not_maxormin()</title>
<indexterm><primary>is_not_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_maxormin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01085">1085</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2e4a2d001d8b4a6e97639da50e33d3cb"/><section>
    <title>is_prime()</title>
<indexterm><primary>is_prime</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_prime</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_prime ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00152">152</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a2e4a2d001d8b4a6e97639da50e33d3cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a038d9d12be4bf69c11a1544a29698806"/><section>
    <title>is_type_template_string_id()</title>
<indexterm><primary>is_type_template_string_id</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_type_template_string_id</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_type_template_string_id (std::string in)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>el parser/lexer del <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> </para>
</para>

<para>Funciones de ayuda para </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01162">1162</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aecc930e8cb3dbc3ede5beeff11ef77ee"/><section>
    <title>is_unit()</title>
<indexterm><primary>is_unit</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_unit</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_unit ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>a y b son digitos; a = std::move(b); a es identico a b; en b puede no queda nada; </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00338">338</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aecc930e8cb3dbc3ede5beeff11ef77ee_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a08ec2a242e2d81958e5b23970c16aab1"/><section>
    <title>mC_B()</title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00981">981</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aeaabd19b772acd490a224d21840165cf"/><section>
    <title>mC_Bm1()</title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00974">974</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5"/><section>
    <title>mult()</title>
<indexterm><primary>mult</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mult</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;UINT_T n, UINT_T m&gt; <?linebreak?>requires ((n&lt;B)&amp;&amp;(m&lt;B))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mult ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00041">41</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aa62606aacfd127f2670db23a727e1689"/><section>
    <title>mult_inv()</title>
<indexterm><primary>mult_inv</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mult_inv</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mult_inv ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00385">385</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aa62606aacfd127f2670db23a727e1689_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a879e2a4684c282b6449f23a262c91ce3"/><section>
    <title>normaliza()</title>
<indexterm><primary>normaliza</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>normaliza</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::normaliza (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00219">219</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae3669f0d5e1a3533692e714ed8381a19"/><section>
    <title>num_to_string()</title>
<indexterm><primary>num_to_string</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>num_to_string</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr std::string <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::num_to_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>TIENE QUE DEVOLVER STD::STRING. </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01127">1127</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a11aa8890a01df04bb8c78e36b1671bcb"/><section>
    <title>operator SIG_SINT_T()</title>
<indexterm><primary>operator SIG_SINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00129">129</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a98f3c67f12b327b29cb7dd956979aa6b"/><section>
    <title>operator SIG_UINT_T()</title>
<indexterm><primary>operator SIG_UINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00125">125</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aafdbf9ec2e1c2c693053bddc9c3da18b"/><section>
    <title>operator UINT_T()</title>
<indexterm><primary>operator UINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator UINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator UINT_T ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>PARA B=3 2*2 1 COMIENZAN POR 2 B-2 PARA B=4 2*2 2*3 3*4 3 COMIENZAN POR 2 B-2, 3 B-3 PARA B=5 2*2 2*3 2*4 3*3 3*4 4*4 6 COMIENZAN POR 2 B-2, 3 B-3, 4 B-4 PARA B=6 2*2 2*3 2*4 2*5 3*3 3*4 3*5 4*4 4*5 5*5 10 COMIENZAN POR 2 B-2, 3 B-3, 4 B-4, 5 B-5 PARA B=r 2*2 2*(2+1) ... 2*(r-1) r-1 r COMIENZAN POR 2 B-2, 3 B-3, 4 B-4, 5 B-1, ... , r-1 B-r+1 3*3 ... 3*(r-1) r-2 ... (r-1)*(r-1) r-(r-1) <informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 (r-2)r-(r-1)*r/2 + 1 = [2(r-2)-((r-2)+1)]r/2 + 1 = ((r-3)r + 2)/2 = (r^2 - 3r + 2) / 2 </para>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md0">
<title>a r^2 + b r + c</title>

<para>1 = a 9 + b 3 + c 3 = a 16 + b 4 + c </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md1">
<title>6 = a 25 + b 5 + c</title>

<para>1 = a 9 + b 3 + c 2 = a 7 + b 1 </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md2">
<title>5 = a 16 + b 2</title>

<para>1 = a 9 + b 3 + c 2 = a 7 + b </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md3">
<title>1 = a  2</title>

<para>c = 2/2 b = -3/2 </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md4">
<title>a =  1/2</title>

<para>SIZE = (B^2 - 3B + 2)/2 2+3+4+...+B-1 = 1+2+3+4+...+B-1 - 1 = (B-1)B/2 - 2(B-1)/2 = (B^2 - B - 2B +2)/2 = =(B^2-3B+2)/2</para>

<para>FALTARIA HACER SOLO PARA BASES MAYORES QUE 2 CODE NEW USING TYPES : using pair_map = std::pair&lt;uintspair,uintspair&gt;; CODE MULTTABLE: static consteval std::array&lt;pair_map,(B^2 - 3B + 2)/2&gt; multtable{make_multtables()}; CODE FOR MAKE_MULTTABLES(): static consteval std::array&lt;pair_map,(B^2 - 3B + 2)/2&gt; make_multtables() noexcept { std::array&lt;pair_map,(B^2 - 3B + 2)/2&gt; ret; /// ESTO QUE SIGUE HABRIA QUE HACERLO POR UNROOLING LOOP EN COMPILE TIME /// YA QUE IDX E IDY NO SON CONSTANTES EN TIEMPO DE COMPILACION /// LO MEJOR ES HACERLO EN UNA CLASE TEMPLATE POR RECURSION for(size_t idx{2} ; idx &lt; B ; ++idx) { for(size_t idy{idx} ; idy &lt; B ; ++idy) { make_pair(make_array(idx,idy),<link linkend="_struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5">mult&lt;idx,idy&gt;()</link>); } } } </para>
</section>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00117">117</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1abfd426bf39f6c5e0421a0fa532e1d886"/><section>
    <title>operator!()</title>
<indexterm><primary>operator!</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>EN BASE B, B-1-m_d ES EL COMPL_Bm1(m_d) </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00944">944</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a47635d2d0ec4782ae299ee8d120e3382"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_struct_num_repr_1_1dig__t_1abfd426bf39f6c5e0421a0fa532e1d886">::operator!</link>= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00575">575</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a81c124dfd1f9bec0d42a33229279d4c6"/><section>
    <title>operator%()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator%</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator% (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00877">877</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aef688b2a7dffda3d612f59446753074a"/><section>
    <title>operator%()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator%</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator% (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00926">926</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6c7356a5ae3558ef870ec13760e4cb8a"/><section>
    <title>operator%=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator%=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator%= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00785">785</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2c84aafb21be9d9cdbe35758bc44d98b"/><section>
    <title>operator%=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator%=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator%= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00793">793</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaad1f6b6c362bb8b79e308d8dbd3623e"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&amp; (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MENOR: ANDBITWISE NO TIENE POSIBILIDAD DE ERROR </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00485">485</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aadb521540be446f8f6affbe08593f521"/><section>
    <title>operator&amp;=()</title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&amp;= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MENOR HABIENDOLO ASIGNADO ANDBITWISE AND ASSIGN NO TIENE POSIBILIDAD DE ERROR </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00494">494</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aad3081cc834a2404026c745da3a19624"/><section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator() ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00133">133</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a13f9599ed8b248ba17c973f9044123da"/><section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator* (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00861">861</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a1914890e81afe75f7d090ff87ce82f22"/><section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator* (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00905">905</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4a8206b542cb7f4b6346f8958757b977"/><section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator*= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00703">703</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a168a6f67f18e796f8873a0e6c2333d54"/><section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator*= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00719">719</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a0b75235bdbf8643db99997e9ecbb41fe"/><section>
    <title>operator+()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator+ (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00845">845</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a00c1f1363179d60534b4c673ca1e1ca1"/><section>
    <title>operator+()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator+ (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00886">886</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaa1f4b500974e6fd56e680e03f29b2c2"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator++ ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>Tengo serias dudas que la division y el resto euclideo tengan cabida entre los operadores aritmeticos de un tipo <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> DUDA SATISFECHA: TIENEN CABIDA PORQUE EL INVERSO MULTIPLICATIVO ETC. SOLO NOS SIRVE SI ESTUVIERAMOS CONSTRUYENDO NUMEROS DE UN ANILLO FINITO </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00812">812</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aaa1f4b500974e6fd56e680e03f29b2c2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8870447b3f8ce7bd2a9119b6f7d4530c"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator++ (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00819">819</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aba27e3396b7ed8788f2cfe819f4d4bb3"/><section>
    <title>operator+=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator+= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00637">637</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae24ff79c3041e20d742037441037d2b3"/><section>
    <title>operator+=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator+= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00659">659</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4d310043a6574e445b13cea0f7096690"/><section>
    <title>operator-()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>EN BASE B, B-m_d ES EL COMPL_B(m_d) </para>
</para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00950">950</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac0fdb16b6029708a28c6db50eb5cf71d"/><section>
    <title>operator-()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator- (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00853">853</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4acce2a25030ead690d375a1953d8882"/><section>
    <title>operator-()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator- (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00895">895</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a760f7426a2aa1c3633499eb30faa47bc"/><section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator-- ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00825">825</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a760f7426a2aa1c3633499eb30faa47bc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8c9932459b63c42c16f18da0e6b72b86"/><section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator-- (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00832">832</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaea951b73ed6db7bbddace9d937e65e1"/><section>
    <title>operator-=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator-= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00681">681</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8ccb0b59a15564ffb2b293664267d5ec"/><section>
    <title>operator-=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator-= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00692">692</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af8bbcb61605057ec7caee066cec098d3"/><section>
    <title>operator/()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator/ (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00869">869</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac0d386b51a9b2d64547d64b98f903ef2"/><section>
    <title>operator/()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator/ (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00915">915</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae6090e4504d28bdd974c7366150a5eaa"/><section>
    <title>operator/=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator/= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00768">768</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2ae86f82c15b23402ab0893d841e9f9f"/><section>
    <title>operator/=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator/= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00776">776</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a541d4e253f487b533befc4b36db15b37"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&lt; (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00583">583</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1acdc26317d35ccf448bf50bc5aa8a88e2"/><section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&lt;= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00581">581</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6c213b8f2f95f130cd8557f4d910e645"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&lt;=&gt; (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; rhs) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>SI COMPARAMOS O HACEMOS UNA OPERACION CON UN INT_T SIEMPRE SERA DIG_T @ INT_T -&gt; DIG_T Y NUNCA INT_T @ DIG_T -&gt; ANY_TYPE METODO PROPIO DE C++20 </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00589">589</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ab70884cd01554850ffe4d26a86dc72e0"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&lt;=&gt; (Int_t rhs) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>METODO PROPIO DE C++20 ESTABLECEMOS UN ORDEN PARCIAL SOBRE LOS ENTEROS SI a b EN Z ESTANDO EN ESTE AMBITO DE BASE B SI a mod B = b mod B </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00619">619</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2c7df43b2672d12d58b0170564b65067"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator= (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN DIG_T. </para>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae1e378970227631d984b568c6e87aea9"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator= (const Int_t &amp; a)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN INT_T. </para>
</para>

<para>PODEMOS PASAR ARGUMENTOS POR COPIA, REFERENCIA (PUNTEROS) Y MOVIMIENTO COPIA : COPIA EL ARGUMENTO LITERALMENTE PARA PASARLO: EL ORIGINAL INTACTO REFERENCIA: COPIA LA DIRECCION DEL ARGUMENTO (SI ES CONST EL COMPILADOR NO TE DEJA COMPILAR SI LO CAMBIAS) MOVIMIENTO: SI EL ARGUMETO NO SE VA A UTILIZAR MAS SE LE PASA LA PROPIEDAD A LA FUNCION </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00314">314</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1acd2c86722aea84ff8caa599f46143096"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp;&amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE MOVIMIENTO DESDE UN DIG_T. </para>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a16d0da2599654bff077fbeca82c74935"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator== (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00573">573</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a98120e7f67bdd81793d79f21df596840"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator== (Int_t rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00604">604</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1afefef1d7905f1b427805fed3bac47b6f"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&gt; (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00579">579</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2e48d921d1562d835c6fe6804ab2ec29"/><section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator&gt;= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00577">577</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a38d52e65a990092a76e803e16e918fb7"/><section>
    <title>operator^()</title>
<indexterm><primary>operator^</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator^</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::unsigned_integral_c UIntType&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator^ (UIntType exp) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00559">559</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1abcc6416630883d3061eb2cc4a2b19b6d"/><section>
    <title>operator^=()</title>
<indexterm><primary>operator^=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator^=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::unsigned_integral_c UIntType&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator^= (UIntType exp)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00532">532</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3794e0222d9b563c1692006bba0af83e"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator| (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MAYOR ORBITWISE NO TIENE POSIBILIDAD DE ERROR </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00505">505</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ab917ba177adf7c56596f814db3bc3e26"/><section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator|= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MAYOR HABIENDOLO ASIGNADO ORBITWISE AND ASSIGN NO TIENE POSIBILIDAD DE ERROR </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00514">514</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aafbbe9b31b632c19b6b161d7da7052c8"/><section>
    <title>radix_str()</title>
<indexterm><primary>radix_str</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>radix_str</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr std::string <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::radix_str ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01138">1138</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4b2689884533f42678398c144b127910"/><section>
    <title>read()</title>
<indexterm><primary>read</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>read</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::read (std::istream &amp; is, <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; value)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01457">1457</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a4b2689884533f42678398c144b127910_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ab4dcf1d753e748b3d6b7a1060fab4ef6"/><section>
    <title>set_0()</title>
<indexterm><primary>set_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>set_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::set_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>dig_t&lt;uchint,10&gt; digito{4}; digito() devuelve un 4 de tipo uchint </para>
<para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00138">138</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a0c80d7466c95459dd00be306eead4646"/><section>
    <title>set_1()</title>
<indexterm><primary>set_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>set_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::set_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00141">141</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3b378922ef3003a5c8ea7a243a4a8303"/><section>
    <title>set_Bm1()</title>
<indexterm><primary>set_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>set_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::set_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00144">144</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad56cccb9f0884cea668bacef17054f72"/><section>
    <title>set_Bm2()</title>
<indexterm><primary>set_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>set_Bm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::set_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00147">147</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2818baa334a2d9efafc9dc3ce8fbfb25"/><section>
    <title>size_of_type_template_string_id()</title>
<indexterm><primary>size_of_type_template_string_id</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>size_of_type_template_string_id</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::size_of_type_template_string_id ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01177">1177</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a287219a289b34f6f682e318b3ca1f92c"/><section>
    <title>ssi_0()</title>
<indexterm><primary>ssi_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00195">195</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a287219a289b34f6f682e318b3ca1f92c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af8eebfebac403516d028ecce97b98d63"/><section>
    <title>ssi_1()</title>
<indexterm><primary>ssi_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00198">198</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_af8eebfebac403516d028ecce97b98d63_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae5704d076a53f9416a1b943df75b9179"/><section>
    <title>ssi_B()</title>
<indexterm><primary>ssi_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00186">186</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_ae5704d076a53f9416a1b943df75b9179_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae42291bd38bbbaffa802f75d6a1baeab"/><section>
    <title>ssi_max()</title>
<indexterm><primary>ssi_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_max</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00189">189</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a73855570e049a9b032a7a49587fb6d90"/><section>
    <title>ssi_submax()</title>
<indexterm><primary>ssi_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_submax</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00192">192</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aeb3cb9d0b23b1c211dff853083a6fe83"/><section>
    <title>sui_0()</title>
<indexterm><primary>sui_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00179">179</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aeb3cb9d0b23b1c211dff853083a6fe83_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a43a4e505e240a8f1ad75f5ad5f8d1353"/><section>
    <title>sui_1()</title>
<indexterm><primary>sui_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00182">182</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a43a4e505e240a8f1ad75f5ad5f8d1353_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a815d56d548d1572c87630f311d8b49e9"/><section>
    <title>sui_B()</title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00170">170</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a815d56d548d1572c87630f311d8b49e9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a9684eea2c5657f412de910eea97817c7"/><section>
    <title>sui_max()</title>
<indexterm><primary>sui_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_max</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00173">173</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a9df237777f14cf1ebc8d550a885260ff"/><section>
    <title>sui_submax()</title>
<indexterm><primary>sui_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_submax</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00176">176</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a081c0bf1162ff858903c226cb48b08e8"/><section>
    <title>sum_carry()</title>
<indexterm><primary>sum_carry</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sum_carry</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sum_carry (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg_1, <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg_2)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00413">413</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a485ebeb8d32500ce824d6e88e02f4eba"/><section>
    <title>to_string()</title>
<indexterm><primary>to_string</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>to_string</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr std::string <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::to_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01149">1149</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a502583a59394f36d40dfc03402177c84"/><section>
    <title>to_type_template_string_id()</title>
<indexterm><primary>to_type_template_string_id</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>to_type_template_string_id</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr std::string <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::to_type_template_string_id ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l01173">1173</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4"/><section>
    <title>ui_0()</title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00167">167</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a76b5c675bb32de9c1803da4dd804d8e4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5"/><section>
    <title>ui_1()</title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00168">168</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a7abd8bcb3f0bd6b749488dfad8e56da5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7cdf0d9df3dedb75f66d4d7eda2e2da5"/><section>
    <title>ui_Bm1()</title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00165">165</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a7cdf0d9df3dedb75f66d4d7eda2e2da5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaac3a2d93ea02d4860644ede5dc38506"/><section>
    <title>ui_Bm2()</title>
<indexterm><primary>ui_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_Bm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00166">166</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336"/><section>
    <title>ui_max()</title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00163">163</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a91e737faa7255b8706deb3220ceaa336_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a73c90f6b9bab2442e884cc30b0af258f"/><section>
    <title>ui_submax()</title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00164">164</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a73c90f6b9bab2442e884cc30b0af258f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Documentación de los datos miembro</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac0c7935b799a4e21bfafdd8f4b6a0bbc"/><section>
    <title>m_d</title>
<indexterm><primary>m_d</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>m_d</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::m_d<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_dig__t_8hpp_source_1l00021">21</link> del archivo <link linkend="_dig__t_8hpp_source">dig_t.hpp</link>.</para>
</section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_dig__t_8hpp">dig_t.hpp</link></section>
</section>
