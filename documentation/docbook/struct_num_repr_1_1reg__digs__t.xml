<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1reg__digs__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</title>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;reg_digs_t.hpp&gt;</computeroutput>
</para>
Diagrama de herencias de NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Diagrama de colaboración para NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> = <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&lt; UINT_T, B &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link> = std::array&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> = <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link> = <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1ab04d648f3421732b3103e32a28f28d09">res_base_N_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt;, op, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a410c269c5a379228ee4f9c757cdaace8">res_base_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link>, op, L &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>consteval const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link> () const noexcept</para>

<para>#define crrefcthis const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; cr_cthis{*this} </para>
</listitem>
            <listitem><para>consteval const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t_1a74c82ed1a83eb365068b45d8d7249ea9">c_base_this</link> () const noexcept</para>
</listitem>
            <listitem><para>consteval const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1abbe8f7f42d69953008355e864df79d39">cr_base_cthis</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a3daed924c4d82360a716dc3dad94d4f5">cr_cthis</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> k) const noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link> () noexcept</para>

<para>#define rrefcthis <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; r_cthis{*this} </para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t_1a56111bb4487539c5c3de69d049fff6ef">base_this</link> () noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a58d33a0c301cc7852f81b1920b5503ee">r_base_cthis</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a96c742c51089cee31c4672f27ded1939">r_cthis</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> k) noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a0e97e4277a18747a5caa503ca65ff7ec">cp_cthis</link> () const noexcept</para>

<para>#define cpcthis <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> cp_cthis{*this} </para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a07c100547e627d6d9935482705ab9010">cp_base_cthis</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a5dd42ab49b278f1008c06d3a9aacba7d">cp_cthis</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> k) const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a2f8a4ff3bd499089c6440c7992ee13cd">begin</link> () noexcept</para>

<para>En este bloque hacemos esta clase wrapper como si fuese una clase derivada de base_t Para esto replicamos y sobrecargamos cada una de las funciones por defecto de std::array  </para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1aa912c8d96b92e95e0d751f2a4500c436">cbegin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445">end</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a2cc438add79ca50b7ec3a0dcb3b4c6df">cend</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1ae0932422c4f294cd994b0f457af37599">rbegin</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1abfbe9a50e4c844fa73ee64e3de27d4c1">crbegin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a6a98c20beaf0085e9b75ed6a73b6fac5">rend</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1ab2f586a22c208f2db8981f236be1f8a5">crend</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a7c0ccc82f763ae0b3bf9fd78f218c206">size</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a79ebf142083abdc8dcd44a354f159129">max_size</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a1344b97a93e4af1c28f04d2f8238ee09">empty</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a3746b11d0b23dc5d2bbba1d9cea58a41">front</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a022dc0ba35bb79d3a00d31f6603bcfbe">front</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a5fd5f903aae0b2017103d59e368c71f7">back</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ab3d4db33623c17c1f36712663487df1b">back</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;value) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1aa0d612930f23d7545926c12c6149759b">swap</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a795f3202b17cb6bc3d4b771d8c6c9eaf">other</link>) noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1af158dcd2b4c5d1cd725810f7b32a6377">reg_digs_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp;arg) noexcept</para>

<para>Constructor por lista de digitos utilizando la función make_base_t  </para>
</listitem>
            <listitem><para>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;&amp;&amp;...)</para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6d5930c7c0f8583b4000a60bd32aa00c">reg_digs_t</link> (const Ts &amp;... args) noexcept</para>

<para>Constructor por argumentos tipo <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>: deduce el tipo  </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a5f1afe08bc99f4458f4406fbf8bc4388">reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;rarg) noexcept</para>

<para>CONSTRUCTOR COPIA DESDE EL TIPO BASE. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a667cc7f5b4658b2195c48e794f5c84a6">reg_digs_t</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;&amp;rarg) noexcept</para>

<para>CONSTRUCTOR MOVIMIENTO DESDE EL TIPO BASE. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aaba6b4d99022c55a9b8ca3ce2d62a50c">reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>Constructor copia desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando copy_arg_N&lt;N&gt;)  </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1ad86b53a69638c4c1dddbcc396bd8c341">reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>Constructor por movimiento desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando move_arg_N&lt;N&gt;)  </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a89b6fe3a57723acaf94778a41e840d49">reg_digs_t</link> (Ints_type ... dig_pow_i) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a3556d4ba2e14f426e919f1cfcde675fe">operator=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>Sobrecarga del operador copia  </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ab18c370a730eae337ebe1e42e554bfb3">operator=</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1add6d93e2ffcc34e57e4698a627d2fd48">operator=</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa424868f7b7f2da2b989b2eb96ed1ed1">operator=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;arg) noexcept</para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ada84ccdb7769b08b7b91b1dae6452c09">operator=</link> (Int_Type arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a3ff2a749d367851189bc05a1687a0b22">operator Int_Type</link> () const noexcept</para>

<para>SE PODRÍA HACER PARA UINT128_T. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t_1a2a92a19fc857d727099a4e9f645f1437">data</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr auto &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a3a84f16889fba0459effd6c4a613425c">ref_data</link> () const</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1reg__digs__t_1ad731e4a8bcba9961766b265f32b28844">cpy_data</link> () const</para>
</listitem>
            <listitem><para>const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a3a14dde93eb3460fc5ce123e2ec22b90">operator[]</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ix) const</para>

<para>&lt;summary=&quot;Sobrecarga del const dig_t &amp; operator[](size_t) const&quot;&gt; </para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ac44c67c58bf102604dab32571fc9f3e1">operator[]</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ix)</para>

<para>&lt;summary=&quot;Sobrecarga del dig_t &amp; operator[](size_t)&quot;&gt; </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1abc257d67bb67ef69b1a2491e58a705e1">set_0</link> () noexcept</para>

<para>Funciones que ponen a constantes (constexpr) los objetos base_t  </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a6808c754c084ff40f4d106cf42c6f350">set_1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a635891fe476a0d485b6430eb003c66ff">set_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a9736402ea76979c6f3b550b4e7f8a2f0">set_dig</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a02db587c3f90aadabbde0f92731f622d">set_fill_dig</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a0d7f94d520c14a413858bb3fd2ebae9c">set_fill_1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a8449e0efdd8a69da67e519ee2716c200">set_fill_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a00ff39c7cca1ca76bfb5c0dd8021841b">set_interval_0</link> () noexcept</para>

<para>&quot;Funciones que ponen a constantes(constexpr) los objetos un subintervalo
o subrango de base_t cualquiera&quot;  </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1af61633115c32e8183d2f606ce5d815fd">set_interval_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a538c70fae56df59c2ddbe0868f24cdaf">set_interval_dig</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> dig) noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1aeeeab7c383624a617b1ea9a9b83bf43d">is_0</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a2654ba7f2592f7b91f2dad311f33e683">is_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a6142af29fa32e0fa1e0fcccf7f1493e5">is_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a4b713404cbac91d3d972d1b8595bdb40">is_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a15cc6e417db19bb0483b3d81b31bf20d">is_Bp1</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires (n&lt;L)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a435cc68f0dd8a90375404140fc9c8ff8">is_B_pow_m1</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires (n&lt;L-1)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1aa9715a437357c3a2a1f79fc7477bb57a">is_B_pow</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a2cc4d03f17f00015a43125e0f5018ef2">is_any_B_pow</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a8f7a8ee6879194fd027b67e20f578474">is_filled_of_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1ae0ead5a6439ee2a2a9f56dc29353ef60">is_filled_of_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a3a7c58a84c5be2458373bc6083a4e3e9">is_filled_of</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ibegin, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; L)&amp;&amp;(ibegin != iend))</para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt;(ibegin&lt; iend)?(iend-ibegin):(ibegin-iend)&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa50d8abff6aa4a71c41fcb31c0441eb2">subregister</link> () const noexcept</para>

<para>TAKE A SUBREGISTER OF A REGISTER OF DIGITS. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2">C_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c">C_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">operator!</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a">operator-</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a844edc62cc648266e8e9073666b00a87">operator&lt;&lt;</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>

<para>OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a9847e4f64cf1507ee623d67775eba2df">operator&lt;&lt;=</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1acda9e6eea4d49b7f6fbbf9c3bec9f7cd">operator&gt;&gt;=</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a91c247827ae9c2c539b5d7089a9fe884">operator&gt;&gt;</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c289fab138512b65681d3c6fa1df2cc">rem_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a5826bd193c62e736efdbe0fdd81cb653">m_rem_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a9f01e4cb3e143f6a26bd251919afe9d8">mer_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a717ff4a829077dbe06174feaa92a22d7">m_mer_B</link> (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a1b446da3b8751e1c8af8839e1a59b1c5">operator|=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a88399df8a3b2e9f6fa413f5ba8c4147a">operator|</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aebcb3bf7aaf1baa65bd97aeec1e777df">operator&amp;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a20034464834ae81a063a9c8fa4224f45">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr int32_t <link linkend="_struct_num_repr_1_1reg__digs__t_1a1223b4548d7868789fc7f4a525d436d0">index_of_MSDig</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a72a186fd0231cb5140dc75466e628688">operator==</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>

<para>COMPARACIONES ENTRE BASE_T Y DIG_T EN FORMA BASE_T @ DIG_T. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1ad76a2aa47907fd2f3ec19035c0a926a6">operator!=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a5ecc41aa76ee4b40c1f7480177d701f4">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a84b45a6bb497fbda0a83ac5b58c8a1a6">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1ae9a2c8fbb6a3aa1ed25aee8950b0b10f">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a871e547fbf592d7bf26f82fd019a3e65">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a2d1a40f341324f56e566b838fe888264">operator==</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a369c8486faffc16e8bc798dbce25b101">operator!=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1af6e5280e0fbfa4b07d1a6651cbafa515">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a37b9758878b51f5ed9ebbebc14b41c9c">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a869c348238795f848214949bad8445b0">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1aa68aa5a93f69fcb7a191fec77bb27332">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1reg__digs__t_1a0f39118683e41ccec4e43fc0c3a94f7f">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1reg__digs__t_1a1598611c9a2c97185a0c0719ed7309de">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ad9843a6a4dfe3805eb802fdd5694b9aa">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1aae46074f8eb1e11d4856e2efc720e3b4">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af999e32e51bcc5cb023447638cc63de9">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1aa6b20e53fc72fb5353a27a5db5205ea2">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1a1ba13ed518c031c71ccd2aa99292c4f5">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1aafcea2323aac8fcedfc0f0780e46df5f">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1a3d59521dadb20ede37c648c6ec863bda">ui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1aedf3f393788feaff612bd5c078fc4796">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1af6038687dce74b65eb797d535190f52d">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a869fb55d18546d9f677b47fd1dd1d8bd">sui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a80e523569503af77fdf36cada4de6700">sui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a51dd71f63e7ccf1c92adbe3876a5eb19">sui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1adaa8d7c0417ae7a7e76237ba2d368ede">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af47bb7bcb365e6060f836ec7d53c8565">sui_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ac1cf8584292927fea378bde2e3172fce">ssi_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af598442408cf2ed05923092e2ccb7cd2">ssi_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a5e0248eb0b0cef64dcbf5fb87823714e">ssi_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a80fbaa972abc3ee57f5e8561eb4e944d">ssi_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ae6d6e6d6877d2fe389cdbacbaf7a6f63">ssi_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1ac49dc9af3af62aea5a7dfde9114e6c18">regd_base_N_0</link> () noexcept</para>

<para>PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL  </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1adb436e23c7144ee0da3db08cac34c7ed">regd_base_N_1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa001d41637e1a10c1284b5239b37159c">regd_base_N_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1ad9a96eb8b49ed44884da34180b85fe4f">regd_base_N_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a2ef368bdca679fa51aee6d18644b6a12">regd_base_N_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1af10d7f31743e81babe1c9d542f30f013">regd_base_N_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1affe99648c3d9c6e3e4decac8d4e46ee1">regd_base_0</link> () noexcept</para>

<para>IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T&lt;L&gt; DONDE BASE_T == BASE_N_T&lt;L&gt; TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL  </para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a5b1efb8235b79459b15c6f2f84659452">regd_base_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a475a4bf204efd8f87c400575dc49114d">regd_base_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a69d2abd48bd92a58df7f51fc9e7578dd">regd_base_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a55521e5b02fa0a1d56745066e20eab91">regd_base_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a16e44b01fdd4e66c3390c34578f32e2c">regd_base_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ad04bdf9bcccd5c68c414b2cca9e9bc75">regd_0</link> () noexcept</para>

<para>IDEM QUE ANTES PERO CON LA CLASE DERIVADA, LA ACTUAL TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL  </para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a9d2524d7b34e2e1b7d98ec3a16ccac67">regd_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af02f9cc5afcc26fb14077a939c26ce85">regd_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a8f86da208d0c9e947caea1a283711414">regd_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af4fa7fec5b40b63434a86ee594adaed1">regd_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a1e76f417daec0f07cb28088baec9fb29">regd_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1aad87f0f5f3bf9825b962e7288d527b96">make_base_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp;larg)</para>

<para>Funcion miembro para generar un objeto tipo base_t y devolverlo desde un std::initializer_list&lt;dig_t&gt;  </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (((sizeof...(Ints_type)) &lt;= L)&amp;&amp;(N&gt;0))</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1afa8cbe8ef5dd2cc62aaff8beebb94124">normalize</link> (Ints_type ... digits_pow_i) noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;arg) noexcept</para>

<para>STATIC REG_DIGS_T CAT(REG_DIGS_T) </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+M &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeaaa5fc1d830756bffaf882156b86896">cat</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) noexcept</para>

<para>STATIC &lt;M&gt; REG_N_DIGS_T&lt;L+M&gt; CAT(REG_DIGS_T,REG_N_DIGS_T&lt;M&gt;) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a8e8c64cba0341a3ad057053b346e42bd">cat</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg) noexcept</para>

<para>STATIC REG_DIGS_T&lt;L+1&gt; CAT(REG_DIGS_T,DIG_T) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+L &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a1cdda4f3f9f0ef5c4668901fb0e40b33">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) noexcept</para>

<para>REG_N_DIGS_T&lt;1+L&gt; CAT(DIG_T,REG_DIGS_T) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg) noexcept</para>

<para>STATIC REG_N_DIGS_T&lt;1&gt; CAT(DIG_T) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 2 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg) noexcept</para>

<para>STATIC REG_N_DIGS_T&lt;1+1&gt; CAT(DIG_T,DIG_T) </para>
</listitem>
            <listitem><para>template&lt;typename T0 , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...)&amp;&amp; (std::is_same_v&lt;T0,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa542abd7039bf3f0a9c62200a7b944d8">cat</link> (T0 dig0, Ts ... dig_pack) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1adb0296af7bc31546157ad06a67573a22">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> larg, T dig, Ts ... dig_pack) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1ae9ba2cc837d955061093bb0da463e2e6">cat</link> (T dig, Ts ... dig_pack, <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ... N_pack&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;((N_pack&gt;0)&amp;&amp;...))</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N+(...+(N_pack))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a217ae996ddbff03f35fb3e7c6b24c1dd">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N_pack &gt; ... rarg_pack) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt;<?linebreak?>requires ((suitable_base&lt;UINT_T,B&gt;())&amp;&amp;(L &gt; 0))<?linebreak?>struct NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</title></simplesect>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf"/><section>
    <title>base_N_t</title>
<indexterm><primary>base_N_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_N_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">::base_N_t</link> =  std::array&lt;<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01"/><section>
    <title>base_t</title>
<indexterm><primary>base_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">::base_t</link> =  <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt;L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e"/><section>
    <title>dig_t</title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> =  <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&lt;UINT_T,B&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0"/><section>
    <title>reg_N_digs_t</title>
<indexterm><primary>reg_N_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_N_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_N_digs_t =  <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt;UINT_T,B,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab04d648f3421732b3103e32a28f28d09"/><section>
    <title>res_base_N_op_t</title>
<indexterm><primary>res_base_N_op_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_N_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a50eddfd182c56f5bb0ae7232729df2ea">::res_base_N_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt;N&gt;,op,N&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a410c269c5a379228ee4f9c757cdaace8"/><section>
    <title>res_base_op_t</title>
<indexterm><primary>res_base_op_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_op_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1af8a7d0fac51131719ef364bd36d174ec">::res_base_op_t</link> =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link>,op,L&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3"/><section>
    <title>SIG_SINT_T</title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">::SIG_SINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21"/><section>
    <title>SIG_UINT_T</title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">::SIG_UINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
</section>
<section>
<title>Documentación del constructor y destructor</title>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73"/><section>
    <title>reg_digs_t()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
</para>

<para>Constructores de <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link></para>

<para>Constructor por defecto (rellena de <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t(0)</link> todo el array)  </para>
<programlisting linenumbering="unnumbered">00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{<link linkend="_struct_num_repr_1_1reg__digs__t_1affe99648c3d9c6e3e4decac8d4e46ee1">regd_base_0</link>()}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af158dcd2b4c5d1cd725810f7b32a6377"/><section>
    <title>reg_digs_t()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por lista de digitos utilizando la función make_base_t  </para>
</para>
<programlisting linenumbering="unnumbered">00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{<link linkend="_struct_num_repr_1_1reg__digs__t_1aad87f0f5f3bf9825b962e7288d527b96">make_base_t</link>(arg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6d5930c7c0f8583b4000a60bd32aa00c"/><section>
    <title>reg_digs_t()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;&amp;&amp;...)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const Ts &amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por argumentos tipo <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>: deduce el tipo  </para>
</para>
<programlisting linenumbering="unnumbered">00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{(<link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt;Ts...&gt;{})(args...)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5f1afe08bc99f4458f4406fbf8bc4388"/><section>
    <title>reg_digs_t()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA DESDE EL TIPO BASE. </para>
</para>
<programlisting linenumbering="unnumbered">00381 :&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{rarg}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a667cc7f5b4658b2195c48e794f5c84a6"/><section>
    <title>reg_digs_t()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;&amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR MOVIMIENTO DESDE EL TIPO BASE. </para>
</para>
<programlisting linenumbering="unnumbered">00384 :&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{std::move(rarg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aaba6b4d99022c55a9b8ca3ce2d62a50c"/><section>
    <title>reg_digs_t()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor copia desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando copy_arg_N&lt;N&gt;)  </para>
</para>
<programlisting linenumbering="unnumbered">00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{copy_arg_N&lt;N&gt;(arg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad86b53a69638c4c1dddbcc396bd8c341"/><section>
    <title>reg_digs_t()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por movimiento desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando move_arg_N&lt;N&gt;)  </para>
</para>
<programlisting linenumbering="unnumbered">00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{move_arg_N&lt;N&gt;(std::move(arg))}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a89b6fe3a57723acaf94778a41e840d49"/><section>
    <title>reg_digs_t()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (Ints_type ... dig_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot;Constructor copia desde una sucesión de objetos enteros variádica, normalizándolos&quot;&gt;  </para>
<programlisting linenumbering="unnumbered">00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link>(normalize&lt;Ints_type...&gt;(dig_pow_i...))&#32;{}
</programlisting></section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab3d4db33623c17c1f36712663487df1b"/><section>
    <title>back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const  &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::back ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;base_t::back());&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5fd5f903aae0b2017103d59e368c71f7"/><section>
    <title>back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::back ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;base_t::back());&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a56111bb4487539c5c3de69d049fff6ef"/><section>
    <title>base_this()</title>
<indexterm><primary>base_this</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_this</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::base_this ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
00063 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2f8a4ff3bd499089c6440c7992ee13cd"/><section>
    <title>begin()</title>
<indexterm><primary>begin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>En este bloque hacemos esta clase wrapper como si fuese una clase derivada de base_t Para esto replicamos y sobrecargamos cada una de las funciones por defecto de std::array  </para>
</para>
<programlisting linenumbering="unnumbered">00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::begin();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c"/><section>
    <title>C_B()</title>
<indexterm><primary>C_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{*<emphasis role="keyword">this</emphasis>}.mC_B());&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01113">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a61e3773ab1f1b47ae335e5c561ca5c6c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a74c82ed1a83eb365068b45d8d7249ea9"/><section>
    <title>c_base_this()</title>
<indexterm><primary>c_base_this</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>c_base_this</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::c_base_this ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
00049 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2"/><section>
    <title>C_Bm1()</title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{*<emphasis role="keyword">this</emphasis>}.mC_Bm1());&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01104">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a2fe3516a538c7e83b6827106fd5606c2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba"/><section>
    <title>cat()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_DIGS_T CAT(REG_DIGS_T) </para>
</para>

<para>STATIC FUNCTIONS : CONCATENATE REGISTERS AND DIGITS reg_digs_t&lt;1&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8">cat(dig_t)</link> <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt;1+1&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649">cat(dig_t,dig_t)</link> <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> cat(reg_digs_t) &lt;M&gt; reg_N_digs_t&lt;L+M&gt; cat(reg_digs_t,reg_N_digs_t&lt;M&gt;) reg_N_digs_t&lt;L+1&gt; cat(reg_digs_t,dig_t) reg_N_digs_t&lt;1+L&gt; cat(dig_t,reg_digs_t) reg_N_digs_t&lt;sizeof...(dig_pack)&gt; cat(dig_t ... dig_pack) VARIADIC PACK </para>
<programlisting linenumbering="unnumbered">00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{arg});&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aeaaa5fc1d830756bffaf882156b86896"/><section>
    <title>cat()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+M &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC &lt;M&gt; REG_N_DIGS_T&lt;L+M&gt; CAT(REG_DIGS_T,REG_N_DIGS_T&lt;M&gt;) </para>
</para>
<programlisting linenumbering="unnumbered">00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;L+M&gt;</link>&#32;ret;
00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;larg[ix];
00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{L}&#32;;&#32;ix&#32;&lt;&#32;M&#32;;&#32;++ix)
00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;rarg[ix];
00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8e8c64cba0341a3ad057053b346e42bd"/><section>
    <title>cat()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_DIGS_T&lt;L+1&gt; CAT(REG_DIGS_T,DIG_T) </para>
</para>
<programlisting linenumbering="unnumbered">00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;L+1&gt;&#32;ret;
00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;larg[ix];
00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[L]&#32;=&#32;rarg;
00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
00990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8"/><section>
    <title>cat()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_N_DIGS_T&lt;1&gt; CAT(DIG_T) </para>
</para>
<programlisting linenumbering="unnumbered">01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(reg_N_digs_t&lt;1&gt;{larg});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1cdda4f3f9f0ef5c4668901fb0e40b33"/><section>
    <title>cat()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+L &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>REG_N_DIGS_T&lt;1+L&gt; CAT(DIG_T,REG_DIGS_T) </para>
</para>
<programlisting linenumbering="unnumbered">00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;1+L&gt;&#32;ret;
00997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;larg;
00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L+1&#32;;&#32;++ix)
00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;rarg[ix-1];
01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649"/><section>
    <title>cat()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 2 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_N_DIGS_T&lt;1+1&gt; CAT(DIG_T,DIG_T) </para>
</para>
<programlisting linenumbering="unnumbered">01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;2&gt;&#32;ret;
01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;larg;
01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1]&#32;=&#32;rarg;
01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1adb0296af7bc31546157ad06a67573a22"/><section>
    <title>cat()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; larg, T dig, Ts ... dig_pack)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;L+1+(SIZEOF...(DIG_PACK))&gt; CAT(REG_DIGS_T,DIG_T,DIG_T ... DIG_PACK) VARIADIC </para>
<programlisting linenumbering="unnumbered">01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link>(larg,<link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link>(dig,dig_pack...));
01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03449">cat()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_adb0296af7bc31546157ad06a67573a22_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a217ae996ddbff03f35fb3e7c6b24c1dd"/><section>
    <title>cat()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ... N_pack&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;((N_pack&gt;0)&amp;&amp;...))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N+(...+(N_pack))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N_pack &gt; ... rarg_pack)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;SIZE_T N,SIZE_T ... N_PACK&gt; CAT(REG_N_DIGS_T&lt;N&gt; LARG,
                REG_N_DIGS_T&lt;N_PACK&gt; ... RARG_PACK
        ) VARIADIC PACK </para>
<programlisting linenumbering="unnumbered">01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link>(larg,rarg_pack...);
01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03449">cat()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a217ae996ddbff03f35fb3e7c6b24c1dd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae9ba2cc837d955061093bb0da463e2e6"/><section>
    <title>cat()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (T dig, Ts ... dig_pack, <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;L+1+(SIZEOF...(DIG_PACK))&gt; CAT(DIG_T,DIG_T ... DIG_PACK,REG_DIGS_T) VARIADIC </para>
<programlisting linenumbering="unnumbered">01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link>(dig,dig_pack...),rarg);
01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03449">cat()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ae9ba2cc837d955061093bb0da463e2e6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa542abd7039bf3f0a9c62200a7b944d8"/><section>
    <title>cat()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename T0 , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...)&amp;&amp; (std::is_same_v&lt;T0,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (T0 dig0, Ts ... dig_pack)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;SIZEOF...(DIG_PACK)&gt; CAT(DIG_T,DIG_T ... DIG_PACK) VARIADIC </para>
<programlisting linenumbering="unnumbered">01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>,dig_pack...);
01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03449">cat()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aa542abd7039bf3f0a9c62200a7b944d8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa912c8d96b92e95e0d751f2a4500c436"/><section>
    <title>cbegin()</title>
<indexterm><primary>cbegin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cbegin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::cbegin();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2cc438add79ca50b7ec3a0dcb3b4c6df"/><section>
    <title>cend()</title>
<indexterm><primary>cend</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cend</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::cend();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a07c100547e627d6d9935482705ab9010"/><section>
    <title>cp_base_cthis()</title>
<indexterm><primary>cp_base_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cp_base_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cp_base_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{*(<link linkend="_struct_num_repr_1_1reg__digs__t_1abbe8f7f42d69953008355e864df79d39">cr_base_cthis</link>())});
00077 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0e97e4277a18747a5caa503ca65ff7ec"/><section>
    <title>cp_cthis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cp_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cp_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cp_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>#define cpcthis <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> cp_cthis{*this} </para>
</para>
<programlisting linenumbering="unnumbered">00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{*<emphasis role="keyword">this</emphasis>});
00074 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5dd42ab49b278f1008c06d3a9aacba7d"/><section>
    <title>cp_cthis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cp_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cp_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cp_cthis (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> k) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&#32;cthis{&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a07c100547e627d6d9935482705ab9010">cp_base_cthis</link>()&#32;};
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(cthis[k]);
00081 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad731e4a8bcba9961766b265f32b28844"/><section>
    <title>cpy_data()</title>
<indexterm><primary>cpy_data</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cpy_data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cpy_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cpy_this{*(this-&gt;data())};
00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpy_this;
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1abbe8f7f42d69953008355e864df79d39"/><section>
    <title>cr_base_cthis()</title>
<indexterm><primary>cr_base_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cr_base_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cr_base_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*(<link linkend="_struct_num_repr_1_1reg__digs__t_1a74c82ed1a83eb365068b45d8d7249ea9">c_base_this</link>()));
00052 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0"/><section>
    <title>cr_cthis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cr_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cr_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cr_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>#define crrefcthis const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; cr_cthis{*this} </para>
</para>

<para>cthis significa this_content y es referencia u objeto copia cr_cthis == const actual_type &amp; cr_cthis{*this}; r_cthis == actual_type &amp; r_cthis{*this}; cp_cthis == actual_type cp_cthis{*this}; </para>
<programlisting linenumbering="unnumbered">00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00046 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3daed924c4d82360a716dc3dad94d4f5"/><section>
    <title>cr_cthis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cr_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cr_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cr_cthis (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> k) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&amp;&#32;cthis{&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1abbe8f7f42d69953008355e864df79d39">cr_base_cthis</link>()&#32;};
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis[k]);
00056 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1abfbe9a50e4c844fa73ee64e3de27d4c1"/><section>
    <title>crbegin()</title>
<indexterm><primary>crbegin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>crbegin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::crbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::crbegin();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab2f586a22c208f2db8981f236be1f8a5"/><section>
    <title>crend()</title>
<indexterm><primary>crend</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>crend</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::crend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::crend();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2a92a19fc857d727099a4e9f645f1437"/><section>
    <title>data()</title>
<indexterm><primary>data</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot; sobrecarga de las funciones miembro : &quot;&gt; constexpr const dig_t* <link linkend="_struct_num_repr_1_1reg__digs__t_1a2a92a19fc857d727099a4e9f645f1437">data() const </link>noexcept;  <formalpara><title>Devuelve</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>*<emphasis role="keyword">&gt;</emphasis>(this-&gt;base_t::data()));
00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805"/><section>
    <title>dig_0()</title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37"/><section>
    <title>dig_1()</title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9"/><section>
    <title>dig_Bm1()</title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_Bm1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aae46074f8eb1e11d4856e2efc720e3b4"/><section>
    <title>dig_Bm2()</title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_Bm2();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad9843a6a4dfe3805eb802fdd5694b9aa"/><section>
    <title>dig_max()</title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af999e32e51bcc5cb023447638cc63de9"/><section>
    <title>dig_submax()</title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_submax();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1344b97a93e4af1c28f04d2f8238ee09"/><section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>empty</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::empty();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445"/><section>
    <title>end()</title>
<indexterm><primary>end</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::end();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d"/><section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>fill</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::fill (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; value)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;base_t::fill(value);&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a022dc0ba35bb79d3a00d31f6603bcfbe"/><section>
    <title>front()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const  &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::front ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;base_t::front());&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3746b11d0b23dc5d2bbba1d9cea58a41"/><section>
    <title>front()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::front ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;base_t::front());&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1223b4548d7868789fc7f4a525d436d0"/><section>
    <title>index_of_MSDig()</title>
<indexterm><primary>index_of_MSDig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>index_of_MSDig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr int32_t <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::index_of_MSDig ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>NOS DEVUELVE EL ÍNDICE DEL DÍGITO NO 0 DE POTENCIA DE B MAS GRANDE NOS DEVUELVE 0 SI ES UN DÍGITO NO 0 NOS DEVUELVE -1 SI ES EL DÍGITO 0 CUALQUIER OTRO CASO NOS DARÁ MAYOR QUE 0 </para>
<programlisting linenumbering="unnumbered">01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{L-1}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
01262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ix;
01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aeeeab7c383624a617b1ea9a9b83bf43d"/><section>
    <title>is_0()</title>
<indexterm><primary>is_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;:&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>())&#32;{
00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(elem.is_not_0())
00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2654ba7f2592f7b91f2dad311f33e683"/><section>
    <title>is_1()</title>
<indexterm><primary>is_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_1())
00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&lt;L&#32;;&#32;++ix)&#32;{
00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2cc4d03f17f00015a43125e0f5018ef2"/><section>
    <title>is_any_B_pow()</title>
<indexterm><primary>is_any_B_pow</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_any_B_pow</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_any_B_pow ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;pred_not_0&#32;=&#32;[](<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;d){<emphasis role="keywordflow">return</emphasis>&#32;(d.is_not_0());};
00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it{std::find_if(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a2f8a4ff3bd499089c6440c7992ee13cd">begin</link>(),<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445">end</link>(),pred_not_0)};
00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445">end</link>())&#32;{
00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;card{std::count_if(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a2f8a4ff3bd499089c6440c7992ee13cd">begin</link>(),<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445">end</link>(),pred_not_0)};
00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(card&#32;!=&#32;1)
00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(it-&gt;is_0());
00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a4b713404cbac91d3d972d1b8595bdb40"/><section>
    <title>is_B()</title>
<indexterm><primary>is_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_0())
00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[1].is_not_1())
00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;2&#32;};&#32;ix&#32;&lt;&#32;L;&#32;++ix)&#32;{
00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa9715a437357c3a2a1f79fc7477bb57a"/><section>
    <title>is_B_pow()</title>
<indexterm><primary>is_B_pow</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires (n&lt;L-1)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(n&#32;==&#32;0)&#32;{
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_1())
00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(n&#32;==&#32;1)&#32;{
00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_0())
00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[1].is_not_1())
00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{2}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(n&#32;==&#32;2)&#32;{
00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_0()&#32;||&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[1].is_not_0())
00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[2].is_not_1())
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{3}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)
00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[n].is_not_1())
00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n+1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a435cc68f0dd8a90375404140fc9c8ff8"/><section>
    <title>is_B_pow_m1()</title>
<indexterm><primary>is_B_pow_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires (n&lt;L)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow_m1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(n&#32;==&#32;0)&#32;{
00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1aeeeab7c383624a617b1ea9a9b83bf43d">is_0</link>();
00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(n&#32;==&#32;1)&#32;{
00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a6142af29fa32e0fa1e0fcccf7f1493e5">is_Bm1</link>();
00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(n&#32;==&#32;2)&#32;{
00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[1].is_not_Bm1()&#32;||&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_Bm1())
00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{2}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)
00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_Bm1())
00859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6142af29fa32e0fa1e0fcccf7f1493e5"/><section>
    <title>is_Bm1()</title>
<indexterm><primary>is_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_Bm1())
00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&lt;L&#32;;&#32;++ix)&#32;{
00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a15cc6e417db19bb0483b3d81b31bf20d"/><section>
    <title>is_Bp1()</title>
<indexterm><primary>is_Bp1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bp1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[0].is_not_1())
00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[1].is_not_1())
00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;2&#32;};&#32;ix&#32;&lt;&#32;L;&#32;++ix)&#32;{
00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_0())
00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3a7c58a84c5be2458373bc6083a4e3e9"/><section>
    <title>is_filled_of()</title>
<indexterm><primary>is_filled_of</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix]&#32;!=&#32;d)
00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8f7a8ee6879194fd027b67e20f578474"/><section>
    <title>is_filled_of_1()</title>
<indexterm><primary>is_filled_of_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_1())
00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae0ead5a6439ee2a2a9f56dc29353ef60"/><section>
    <title>is_filled_of_Bm1()</title>
<indexterm><primary>is_filled_of_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>()[ix].is_not_Bm1())
00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a717ff4a829077dbe06174feaa92a22d7"/><section>
    <title>m_mer_B()</title>
<indexterm><primary>m_mer_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_mer_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_mer_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;&gt;&gt;=&#32;L-n;
01220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5826bd193c62e736efdbe0fdd81cb653"/><section>
    <title>m_rem_B()</title>
<indexterm><primary>m_rem_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_rem_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_rem_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;&lt;&lt;=&#32;L-n;
01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aad87f0f5f3bf9825b962e7288d527b96"/><section>
    <title>make_base_t()</title>
<indexterm><primary>make_base_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>make_base_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::make_base_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp; larg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Funcion miembro para generar un objeto tipo base_t y devolverlo desde un std::initializer_list&lt;dig_t&gt;  </para>
</para>

<para>&lt;function name=&quot;make_base_t&quot;&gt;&lt;/function&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>const std::initializer_list&lt;dig_t&gt;&amp; larg</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;returns=&quot;rarg : base_t&quot;&gt;</para>
<programlisting linenumbering="unnumbered">00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&#32;rarg;
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(larg.size()&#32;&gt;=&#32;L)&#32;{
00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;0&#32;};&#32;ix&#32;&lt;&#32;L;&#32;++ix)&#32;{
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rarg[ix]&#32;=&#32;larg[ix];
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;0&#32;};&#32;ix&#32;&lt;&#32;larg.size()&#32;;&#32;++ix)&#32;{
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rarg[ix]&#32;=&#32;larg[ix];
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;larg.size()&#32;};&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rarg[ix]&#32;=&#32;larg[ix];
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(rarg);
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a79ebf142083abdc8dcd44a354f159129"/><section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>max_size</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::max_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::max_size();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb"/><section>
    <title>mC_B()</title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis.mC_Bm1();
01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_Bm1())&#32;{
01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++cthis[ix];
01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix].set_0();
01123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01104">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link> y <link linkend="_l00693">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::set_0()</link>.</para>
<para>
Referenciado por <link linkend="_l01133">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::C_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a459dcc84f5a2ff05f229a2813eeca4eb_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a459dcc84f5a2ff05f229a2813eeca4eb_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a"/><section>
    <title>mC_Bm1()</title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>A partir de aquí no he hecho las sustituciones de const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; cthis{*this}; / <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; cthis{*this}; / <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> cthis{*this}; Por las correspondientes funciones <link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis()</link> / <link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis()</link> / <link linkend="_struct_num_repr_1_1reg__digs__t_1a0e97e4277a18747a5caa503ca65ff7ec">cp_cthis()</link> OPERADORES ARITMETICOS <link linkend="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c">C_B()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2">C_Bm1()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb">mC_B()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a">mC_Bm1()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">operator!()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a">operator-()</link> </para>
<programlisting linenumbering="unnumbered">01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix].mC_Bm1();
01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01104">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link>.</para>
<para>
Referenciado por <link linkend="_l01129">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::C_Bm1()</link>, <link linkend="_l01113">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_B()</link> y <link linkend="_l01104">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aba51984e457f7e0cd28fa38c3454b38a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aba51984e457f7e0cd28fa38c3454b38a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9f01e4cb3e143f6a26bd251919afe9d8"/><section>
    <title>mer_B()</title>
<indexterm><primary>mer_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mer_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::mer_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&gt;&gt;=&#32;L-n;
01213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1afa8cbe8ef5dd2cc62aaff8beebb94124"/><section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>normalize</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; <?linebreak?>requires (((sizeof...(Ints_type)) &lt;= L)&amp;&amp;(N&gt;0))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::normalize (Ints_type ... digits_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot;Función de normalización a dig_t (dígitos base B) que construye un objeto de tipo &quot;&gt;  &lt;summary=&quot;base_t desde una sucesión variádica de enteros cualquiera&quot;&gt;  &lt;function name=&quot;normalize&quot;&gt;&lt;/function&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Ints_type ... digits_pow_i</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;returns=&quot;base_t&quot;&gt;</para>

<para>&lt; CREA UN STD_ARRAY DEL TIPO INT PASADO POR ARGUMENTOS DE TAMANO EL PACK DE ARGUMENTOS PASADO (MENOR O IGUAL QUE L)</para>

<para>&lt; DEVUELVE EL TIPO INTERNO DE ELEMENTO DEL ARRAY ANTERIOR [UN TIPO ENTERO]</para>

<para>&lt; DEVUELVE EL TAMANO DEL ARRAY ANTERIOR (TAMAÑO &lt;= L)</para>

<para>&lt; ELIGE ENTRE CUATRO TIPOS DE ENTEROS SEGUN TENGAN SIGNO O NO Y SU TAMANO SEA MAYOR O MENOR QUE EL PROPIO DE LA BASE UINT_T TIPO PROPIO ES : UINT_T TIPO PASADO COMO ARGUMENTO ES : UNIQUE_TYPE LOS TIPOS PASADOS EN LOS ARGUMENTOS HAN DE SER IGUALES ENTRE SI PARA EL INTERROGANTE CONDICIONAL UTILIZAMOS UNSIGNED_INTEGRAL_C PRIMERA PREGUNTA O MAS EXTERIOR IS_UNISGNED_SZ_GT_V&lt;T,S&gt; PREGUNTAS SEGUNDAS O MAS INTERIORES PARA ELEGIR EL TIPO APROPIADO EN CADA CASO USAMOS SIG_UINT_FOR_UINT_T&lt;UINT_T&gt; SIG_UINT_FOR_UINT_T&lt;UNIQUE_TYPE&gt; SIG_UINT_FOR_UINT_T&lt;UINT_T&gt; SIG_UINT_FOR_SINT_T&lt;UNIQUE_TYPE&gt;</para>

<para></para>
<programlisting linenumbering="unnumbered">00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>pack_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt;Ints_type...&gt;;
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unique_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;pack_type::elem_type;
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pack_sz{pack_type::pack_size()};
00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits">NumRepr::type_traits</link>;
00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SUInt_type&#32;=
00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional_t
00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;
00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsigned_integral_c&lt;unique_type&gt;,
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional_t&lt;
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_unsigned_sz_gt_v&lt;UINT_T,unique_type&gt;,
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">sig_UInt_for_UInt_t&lt;UINT_T&gt;</link>,
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">sig_UInt_for_UInt_t&lt;unique_type&gt;</link>
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;,
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional_t&lt;
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_unsigned_sz_gt_v&lt;UINT_T,sig_UInt_for_SInt_t&lt;unique_type&gt;&gt;,
00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">sig_UInt_for_UInt_t&lt;UINT_T&gt;</link>,
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1type__traits_1a78161f55798c2f15126db200161b7cda">sig_UInt_for_SInt_t&lt;unique_type&gt;</link>
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;;
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;SUInt_type,pack_sz&gt;&#32;ret_array{digits_pow_i...};
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;pack_sz&gt;</link>&#32;ret;
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&#32;&lt;=&#32;pack_sz)&#32;{
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;0&#32;};&#32;ix&#32;&lt;&#32;pack_sz;&#32;++ix)&#32;{
00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>(ret_array[ix]);
00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;0&#32;};&#32;ix&#32;&lt;&#32;pack_sz;&#32;++ix)&#32;{
00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>(ret_array[ix]);
00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{&#32;pack_sz&#32;};&#32;ix&#32;&lt;&#32;L;&#32;++ix)&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>(0);
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3ff2a749d367851189bc05a1687a0b22"/><section>
    <title>operator Int_Type()</title>
<indexterm><primary>operator Int_Type</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator Int_Type</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link> Int_Type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SE PODRÍA HACER PARA UINT128_T. </para>
</para>

<para>Algunas Conversiones </para>
<programlisting linenumbering="unnumbered">00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">type_traits::maxbase</link>;
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&#32;retInt{0};
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&#32;BasePowIx{1};
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k)&#32;{
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retInt&#32;+=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>(k)*BasePowIx;
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B;
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;&#32;&#32;&#32;&#32;(k+1&#32;&lt;&#32;L)
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(maxbase&lt;Int_Type&gt;()&#32;&lt;&#32;(retInt+((<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>(k+1)*BasePowIx)))
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;))
00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retInt;&#32;}
00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retInt;
00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00378">NumRepr::type_traits::maxbase()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a3ff2a749d367851189bc05a1687a0b22_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac"/><section>
    <title>operator!()</title>
<indexterm><primary>operator!</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2">C_Bm1</link>();&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l04466">C_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a05a97a435bf59c5442be92c071176aac_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad76a2aa47907fd2f3ec19035c0a926a6"/><section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">::operator!</link>= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[0]&#32;!=&#32;rarg)
01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01295 
01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a369c8486faffc16e8bc798dbce25b101"/><section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">::operator!</link>= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01377 
01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(L,M)};
01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(L,M)};
01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;L_gt_M{L&gt;M};
01381 
01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L!=M)&#32;{
01383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L_gt_M)&#32;{
01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;P&#32;;&#32;++ix)
01395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix]&#32;!=&#32;rarg[ix])
01396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a20034464834ae81a063a9c8fa4224f45"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp; (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&amp;=&#32;rarg;
01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aebcb3bf7aaf1baa65bd97aeec1e777df"/><section>
    <title>operator&amp;=()</title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp;= (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
01243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix]&#32;&amp;=&#32;rarg[ix];
01244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a"/><section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c">C_B</link>();&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l04472">C_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_addfe409a19fc9017ac89b2516f4a6a8a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a84b45a6bb497fbda0a83ac5b58c8a1a6"/><section>
    <title>operator&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[0]&#32;&gt;=&#32;rarg)
01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a37b9758878b51f5ed9ebbebc14b41c9c"/><section>
    <title>operator&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(L,M)};
01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(L,M)};
01433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;L_gt_M{L&gt;M};
01434 
01435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L&#32;!=&#32;M)&#32;{
01436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L_gt_M)&#32;{
01438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01447 
01448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{L}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)
01449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix]&#32;&lt;&#32;rarg[ix])
01450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a844edc62cc648266e8e9073666b00a87"/><section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt; (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. </para>
</para>

<para>MULTIPLY BY THE BASE B (10) &lt;&lt; &lt;&lt;= DIVIDE BY THE BASE B (10) &gt;&gt; &gt;&gt;= REMAINDER BY THE BASE B (10) REM_B_N M_REM_B_N MULTIPLICATIVE CARRY BY THE BASE B (10) MER_B_N M_MER_B_N </para>
<programlisting linenumbering="unnumbered">01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{L-1-n}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis[ix+n]&#32;&#32;&#32;&#32;=&#32;cpthis[ix];
01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
01158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis[ix]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>();
01159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(cpthis);
01161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9847e4f64cf1507ee623d67775eba2df"/><section>
    <title>operator&lt;&lt;=()</title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt;= (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{L-1-n}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
01167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix+n]&#32;&#32;&#32;&#32;&#32;=&#32;cthis[ix];
01168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix]&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>();
01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a871e547fbf592d7bf26f82fd019a3e65"/><section>
    <title>operator&lt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[0]&#32;&gt;&#32;rarg)
01338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa68aa5a93f69fcb7a191fec77bb27332"/><section>
    <title>operator&lt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(cthis&#32;&gt;&#32;rarg));&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1598611c9a2c97185a0c0719ed7309de"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&gt;&#32;arg)
01487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::greater;
01488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&lt;&#32;arg)
01489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::less;
01490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::equivalent;
01492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0f39118683e41ccec4e43fc0c3a94f7f"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<programlisting linenumbering="unnumbered">01471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;==&#32;arg)
01474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::equal;
01475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&lt;&#32;arg)
01476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::less;
01477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::greater;
01479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa424868f7b7f2da2b989b2eb96ed1ed1"/><section>
    <title>operator=()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</para>
<programlisting linenumbering="unnumbered">00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;(<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>(0)))!=(&amp;arg))&#32;{
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1abc257d67bb67ef69b1a2491e58a705e1">set_0</link>();
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>(0)&#32;=&#32;arg;
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3556d4ba2e14f426e919f1cfcde675fe"/><section>
    <title>operator=()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sobrecarga del operador copia  </para>
</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA CONST <emphasis>NO</emphasis> COPIABLE DESDE REG_N_DIGS_T EN LA IZQUIERDA </para>
<programlisting linenumbering="unnumbered">00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>!=&#32;&amp;arg)
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg_N&lt;N&gt;(arg);
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ada84ccdb7769b08b7b91b1dae6452c09"/><section>
    <title>operator=()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN REG_DIGS_T </para>
<programlisting linenumbering="unnumbered">00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">type_traits::maxbase</link>;
00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_basic__types_8hpp_1ac20ff49f0b5abe18cd5058327ff94431">sint128_t</link>&#32;B_128t_v{<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_basic__types_8hpp_1ac20ff49f0b5abe18cd5058327ff94431">sint128_t</link><emphasis role="keyword">&gt;</emphasis>(B)};
00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;puede_multiplicarse{
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(maxbase&lt;sint128_t&gt;()/B_128t_v)&#32;&gt;&#32;0
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;(this-&gt;m_dc))&#32;!=&#32;(&amp;arg))&#32;{
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1ac20ff49f0b5abe18cd5058327ff94431">sint128_t</link>&#32;creg_g{<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_basic__types_8hpp_1ac20ff49f0b5abe18cd5058327ff94431">sint128_t</link><emphasis role="keyword">&gt;</emphasis>(arg)};
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1ac20ff49f0b5abe18cd5058327ff94431">sint128_t</link>&#32;BasePowIx{B_128t_v};
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{1u}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k)&#32;{
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(puede_multiplicarse)
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B_128t_v;
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(creg_g&#32;&lt;&#32;0)&#32;{
00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;+=&#32;BasePowIx;
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;k{0u}&#32;;&#32;k&#32;&lt;&#32;L&#32;;&#32;++k){
00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>(k)&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>(creg_g%B_128t_v);
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;/=&#32;B_128t_v;
00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>());
00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00378">NumRepr::type_traits::maxbase()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ada84ccdb7769b08b7b91b1dae6452c09_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1add6d93e2ffcc34e57e4698a627d2fd48"/><section>
    <title>operator=()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR MOVIMIENTO DESDE REGS_N_DIGS_T EN LA QUE NO SE PUEDE COPIAR </para>
<programlisting linenumbering="unnumbered">00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>!=(&amp;arg))
00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_arg_N&lt;N&gt;(std::move(arg));
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab18c370a730eae337ebe1e42e554bfb3"/><section>
    <title>operator=()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR COPIA REFERENCIA DESDE REG_N_DIGS_T EN LA IZQUIERDA </para>
<programlisting linenumbering="unnumbered">00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg_N&lt;N&gt;(arg);
00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a72a186fd0231cb5140dc75466e628688"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>COMPARACIONES ENTRE BASE_T Y DIG_T EN FORMA BASE_T @ DIG_T. </para>
</para>

<para>SOBRECARGA DE LOS OPERADORES DE COMPARACION Y ORDEN </para>
<programlisting linenumbering="unnumbered">01276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[0]&#32;!=&#32;rarg)
01279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
01281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2d1a40f341324f56e566b838fe888264"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>COMPARACIONES ENTRE REG_DIGS_T Y REG_N_DIGS_T HETEROGENEOS EN GENERAL EN FORMA REG_DIGS_T @ REG_N_DIGS_T&lt;M&gt; </para>
<programlisting linenumbering="unnumbered">01348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01350 
01351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(L,M)};
01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(L,M)};
01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;L_gt_M{L&gt;M};
01354 
01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L!=M)&#32;{
01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L_gt_M)&#32;{
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;P&#32;;&#32;++ix)
01368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix]&#32;!=&#32;rarg[ix])
01369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5ecc41aa76ee4b40c1f7480177d701f4"/><section>
    <title>operator&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[0]&#32;&gt;&#32;rarg)
01305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af6e5280e0fbfa4b07d1a6651cbafa515"/><section>
    <title>operator&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;P{std::min(L,M)};
01405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Q{std::max(L,M)};
01406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;L_gt_M{L&gt;M};
01407 
01408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L&#32;!=&#32;M)&#32;{
01409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{P}&#32;;&#32;ix&#32;&lt;&#32;Q&#32;;&#32;++ix)&#32;{
01410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L&gt;M)&#32;{
01411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rarg[ix].is_not_0())
01416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01420 
01421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{L}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)
01422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix]&#32;&gt;&#32;rarg[ix])
01423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae9a2c8fbb6a3aa1ed25aee8950b0b10f"/><section>
    <title>operator&gt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
01324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[ix].is_not_0())
01325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis[0]&#32;&gt;=&#32;rarg)
01327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a869c348238795f848214949bad8445b0"/><section>
    <title>operator&gt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!(cthis&#32;&lt;&#32;rarg));&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a91c247827ae9c2c539b5d7089a9fe884"/><section>
    <title>operator&gt;&gt;()</title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt; (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&gt;&gt;=&#32;n;
01191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1acda9e6eea4d49b7f6fbbf9c3bec9f7cd"/><section>
    <title>operator&gt;&gt;=()</title>
<indexterm><primary>operator&gt;&gt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt;= (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L-n&#32;;&#32;++ix)&#32;{
01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;cthis[ix+n];
01180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{L-n}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
01182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>();
01183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ac44c67c58bf102604dab32571fc9f3e1"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ix)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>&lt;summary=&quot;Sobrecarga del dig_t &amp; operator[](size_t)&quot;&gt; </para>
</para>
<programlisting linenumbering="unnumbered">00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().base_t::operator[](ix));
00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3a14dde93eb3460fc5ce123e2ec22b90"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ix) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>&lt;summary=&quot;Sobrecarga del const dig_t &amp; operator[](size_t) const&quot;&gt; </para>
</para>
<programlisting linenumbering="unnumbered">00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1reg__digs__t_1ae12bc39959543a229d8beeb93928b6d0">cr_cthis</link>().base_t::operator[](ix));
00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a88399df8a3b2e9f6fa413f5ba8c4147a"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>| (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;|=&#32;rarg;
01236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1b446da3b8751e1c8af8839e1a59b1c5"/><section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>|= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
01227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis[ix]&#32;|=&#32;rarg[ix];
01228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a58d33a0c301cc7852f81b1920b5503ee"/><section>
    <title>r_base_cthis()</title>
<indexterm><primary>r_base_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>r_base_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::r_base_cthis ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<link linkend="_struct_num_repr_1_1reg__digs__t_1a56111bb4487539c5c3de69d049fff6ef">base_this</link>());
00066 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9"/><section>
    <title>r_cthis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>r_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>r_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::r_cthis ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>#define rrefcthis <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; r_cthis{*this} </para>
</para>
<programlisting linenumbering="unnumbered">00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00060 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a96c742c51089cee31c4672f27ded1939"/><section>
    <title>r_cthis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>r_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>r_cthis</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::r_cthis (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> k)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;cthis{&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a58d33a0c301cc7852f81b1920b5503ee">r_base_cthis</link>()&#32;};
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis[k]);
00070 }
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae0932422c4f294cd994b0f457af37599"/><section>
    <title>rbegin()</title>
<indexterm><primary>rbegin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rbegin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::rbegin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::rbegin();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3a84f16889fba0459effd6c4a613425c"/><section>
    <title>ref_data()</title>
<indexterm><primary>ref_data</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ref_data</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr auto &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ref_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*(this-&gt;data()));
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad04bdf9bcccd5c68c414b2cca9e9bc75"/><section>
    <title>regd_0()</title>
<indexterm><primary>regd_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>IDEM QUE ANTES PERO CON LA CLASE DERIVADA, LA ACTUAL TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL  </para>
</para>
<programlisting linenumbering="unnumbered">00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{regd_base_N_0&lt;L&gt;()};
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9d2524d7b34e2e1b7d98ec3a16ccac67"/><section>
    <title>regd_1()</title>
<indexterm><primary>regd_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{regd_base_N_1&lt;L&gt;()};
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8f86da208d0c9e947caea1a283711414"/><section>
    <title>regd_B()</title>
<indexterm><primary>regd_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{regd_base_N_B&lt;L&gt;()};
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1affe99648c3d9c6e3e4decac8d4e46ee1"/><section>
    <title>regd_base_0()</title>
<indexterm><primary>regd_base_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T&lt;L&gt; DONDE BASE_T == BASE_N_T&lt;L&gt; TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL  </para>
</para>
<programlisting linenumbering="unnumbered">00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_0&lt;L&gt;()};
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5b1efb8235b79459b15c6f2f84659452"/><section>
    <title>regd_base_1()</title>
<indexterm><primary>regd_base_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_1&lt;L&gt;()};
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a69d2abd48bd92a58df7f51fc9e7578dd"/><section>
    <title>regd_base_B()</title>
<indexterm><primary>regd_base_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_B&lt;L&gt;()};
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a475a4bf204efd8f87c400575dc49114d"/><section>
    <title>regd_base_Bm1()</title>
<indexterm><primary>regd_base_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_Bm1&lt;L&gt;()};
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ac49dc9af3af62aea5a7dfde9114e6c18"/><section>
    <title>regd_base_N_0()</title>
<indexterm><primary>regd_base_N_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL  </para>
</para>
<programlisting linenumbering="unnumbered">00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret;
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;dig&#32;:&#32;ret)&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dig&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>();
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1adb436e23c7144ee0da3db08cac34c7ed"/><section>
    <title>regd_base_N_1()</title>
<indexterm><primary>regd_base_N_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37">dig_1</link>();
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad9a96eb8b49ed44884da34180b85fe4f"/><section>
    <title>regd_base_N_B()</title>
<indexterm><primary>regd_base_N_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37">dig_1</link>();
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa001d41637e1a10c1284b5239b37159c"/><section>
    <title>regd_base_N_Bm1()</title>
<indexterm><primary>regd_base_N_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9">dig_Bm1</link>();
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2ef368bdca679fa51aee6d18644b6a12"/><section>
    <title>regd_base_N_pow_n_B()</title>
<indexterm><primary>regd_base_N_pow_n_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{regd_base_N_0&lt;N&gt;()};
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[n]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37">dig_1</link>();
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af10d7f31743e81babe1c9d542f30f013"/><section>
    <title>regd_base_N_pow_n_B_m1()</title>
<indexterm><primary>regd_base_N_pow_n_B_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t&lt;N&gt;</link>&#32;ret{};
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9">dig_Bm1</link>();
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)&#32;{
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>();
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a55521e5b02fa0a1d56745066e20eab91"/><section>
    <title>regd_base_pow_n_B()</title>
<indexterm><primary>regd_base_pow_n_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_pow_n_B&lt;L&gt;()};
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a16e44b01fdd4e66c3390c34578f32e2c"/><section>
    <title>regd_base_pow_n_B_m1()</title>
<indexterm><primary>regd_base_pow_n_B_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>{regd_base_N_pow_n_B_m1&lt;L&gt;()};
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af02f9cc5afcc26fb14077a939c26ce85"/><section>
    <title>regd_Bm1()</title>
<indexterm><primary>regd_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{regd_base_N_Bm1&lt;L&gt;()};
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af4fa7fec5b40b63434a86ee594adaed1"/><section>
    <title>regd_pow_n_B()</title>
<indexterm><primary>regd_pow_n_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{regd_base_N_pow_n_B&lt;L&gt;()};
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1e76f417daec0f07cb28088baec9fb29"/><section>
    <title>regd_pow_n_B_m1()</title>
<indexterm><primary>regd_pow_n_B_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>{regd_base_N_pow_n_B_m1&lt;L&gt;()};
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a4c289fab138512b65681d3c6fa1df2cc"/><section>
    <title>rem_B()</title>
<indexterm><primary>rem_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rem_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::rem_B (<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&lt;&lt;=&#32;L-n;
01198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6a98c20beaf0085e9b75ed6a73b6fac5"/><section>
    <title>rend()</title>
<indexterm><primary>rend</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rend</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::rend ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::rend();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1abc257d67bb67ef69b1a2491e58a705e1"/><section>
    <title>set_0()</title>
<indexterm><primary>set_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Funciones que ponen a constantes (constexpr) los objetos base_t  </para>
</para>

<para>
                <formalpara>
                    <title>
Parámetros del template</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>size_t</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;nontypeparam name=&quot;N&quot;&gt;&lt;/nontypeparam&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>this</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Devuelve</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l01113">NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;::mC_B()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_abc257d67bb67ef69b1a2491e58a705e1_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6808c754c084ff40f4d106cf42c6f350"/><section>
    <title>set_1()</title>
<indexterm><primary>set_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>());
00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>()[0].<link linkend="_struct_num_repr_1_1reg__digs__t_1a6808c754c084ff40f4d106cf42c6f350">set_1</link>();&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a635891fe476a0d485b6430eb003c66ff"/><section>
    <title>set_Bm1()</title>
<indexterm><primary>set_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link>());
00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>()[0].<link linkend="_struct_num_repr_1_1reg__digs__t_1a635891fe476a0d485b6430eb003c66ff">set_Bm1</link>();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9736402ea76979c6f3b550b4e7f8a2f0"/><section>
    <title>set_dig()</title>
<indexterm><primary>set_dig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_dig (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(d);
00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>()[0]&#32;=&#32;d;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0d7f94d520c14a413858bb3fd2ebae9c"/><section>
    <title>set_fill_1()</title>
<indexterm><primary>set_fill_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_fill_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_fill_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37">dig_1</link>());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8449e0efdd8a69da67e519ee2716c200"/><section>
    <title>set_fill_Bm1()</title>
<indexterm><primary>set_fill_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_fill_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_fill_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(<link linkend="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9">dig_Bm1</link>());&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a02db587c3f90aadabbde0f92731f622d"/><section>
    <title>set_fill_dig()</title>
<indexterm><primary>set_fill_dig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_fill_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_fill_dig (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>().<link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link>(d);&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a00ff39c7cca1ca76bfb5c0dd8021841b"/><section>
    <title>set_interval_0()</title>
<indexterm><primary>set_interval_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&quot;Funciones que ponen a constantes(constexpr) los objetos un subintervalo
o subrango de base_t cualquiera&quot;  </para>
</para>

<para>
                <formalpara>
                    <title>
Parámetros del template</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>size_t</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;nontypeparam name=&quot;N_i&quot;&gt;&lt;/nontypeparam&gt; &lt;nontypeparam name=&quot;N_pf&quot;&gt;&lt;/nontypeparam&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>this</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Devuelve</title>

<para></para>
</formalpara>
OPERACION DE PONER A VALOR DIG_0 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T&lt;N&gt; </para>
<programlisting linenumbering="unnumbered">00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{N_i}&#32;;&#32;ix&#32;&lt;&#32;N_pf&#32;;&#32;++ix)
00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>()[ix].<link linkend="_struct_num_repr_1_1reg__digs__t_1abc257d67bb67ef69b1a2491e58a705e1">set_0</link>();
00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af61633115c32e8183d2f606ce5d815fd"/><section>
    <title>set_interval_Bm1()</title>
<indexterm><primary>set_interval_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION DE PONER A VALOR DIG_Bm1 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T&lt;N&gt; </para>
<programlisting linenumbering="unnumbered">00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{N_i}&#32;;&#32;ix&#32;&lt;&#32;N_pf&#32;;&#32;++ix)
00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a3609de642995952b775d1816ebbe18e9">r_cthis</link>()[ix].<link linkend="_struct_num_repr_1_1reg__digs__t_1a635891fe476a0d485b6430eb003c66ff">set_Bm1</link>();
00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a538c70fae56df59c2ddbe0868f24cdaf"/><section>
    <title>set_interval_dig()</title>
<indexterm><primary>set_interval_dig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_dig</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_i, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_dig (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> dig)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION DE PONER A VALOR DIG DEL ARRAY DESDE [N_0 , N_1) EN BASE_T summary=&quot;Funciones comparativas con constantes tipo constexpr&quot;&gt; param name=&quot;this&quot;&gt;</para>

<para>returns=&quot;bool&quot;&gt;</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a7c0ccc82f763ae0b3bf9fd78f218c206"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_t::size();&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ac1cf8584292927fea378bde2e3172fce"/><section>
    <title>ssi_0()</title>
<indexterm><primary>ssi_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ssi_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af598442408cf2ed05923092e2ccb7cd2"/><section>
    <title>ssi_1()</title>
<indexterm><primary>ssi_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ssi_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a80fbaa972abc3ee57f5e8561eb4e944d"/><section>
    <title>ssi_B()</title>
<indexterm><primary>ssi_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ssi_B();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5e0248eb0b0cef64dcbf5fb87823714e"/><section>
    <title>ssi_Bm1()</title>
<indexterm><primary>ssi_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ssi_B()-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae6d6e6d6877d2fe389cdbacbaf7a6f63"/><section>
    <title>ssi_Bp1()</title>
<indexterm><primary>ssi_Bp1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ssi_B()+1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa50d8abff6aa4a71c41fcb31c0441eb2"/><section>
    <title>subregister()</title>
<indexterm><primary>subregister</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>subregister</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> ibegin, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; L)&amp;&amp;(ibegin != iend))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt;(ibegin&lt; iend)?(iend-ibegin):(ibegin-iend)&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::subregister ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>TAKE A SUBREGISTER OF A REGISTER OF DIGITS. </para>
</para>
<programlisting linenumbering="unnumbered">01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(ibegin&#32;&lt;&#32;iend)&#32;{
01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt;iend-ibegin&gt;&#32;ret;
01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;ix{ibegin}&#32;;&#32;ix&#32;&lt;&#32;iend&#32;;&#32;++ix)&#32;{
01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[ix];
01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt;iend-ibegin&gt;&#32;ret;
01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(int32_t&#32;ix{iend}&#32;;&#32;ix&#32;&gt;&#32;ibegin-1&#32;;&#32;--ix)&#32;{
01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[L-1-ix];
01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(ret);
01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a869fb55d18546d9f677b47fd1dd1d8bd"/><section>
    <title>sui_0()</title>
<indexterm><primary>sui_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a80e523569503af77fdf36cada4de6700"/><section>
    <title>sui_1()</title>
<indexterm><primary>sui_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1adaa8d7c0417ae7a7e76237ba2d368ede"/><section>
    <title>sui_B()</title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a51dd71f63e7ccf1c92adbe3876a5eb19"/><section>
    <title>sui_Bm1()</title>
<indexterm><primary>sui_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af47bb7bcb365e6060f836ec7d53c8565"/><section>
    <title>sui_Bp1()</title>
<indexterm><primary>sui_Bp1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bp1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()+1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa0d612930f23d7545926c12c6149759b"/><section>
    <title>swap()</title>
<indexterm><primary>swap</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::swap (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;base_t::swap(*<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a795f3202b17cb6bc3d4b771d8c6c9eaf">other</link>.data());&#32;}
</programlisting><para>
Hace referencia a <link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a795f3202b17cb6bc3d4b771d8c6c9eaf">NumRepr::other</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa6b20e53fc72fb5353a27a5db5205ea2"/><section>
    <title>ui_0()</title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1ba13ed518c031c71ccd2aa99292c4f5"/><section>
    <title>ui_1()</title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3d59521dadb20ede37c648c6ec863bda"/><section>
    <title>ui_B()</title>
<indexterm><primary>ui_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;B;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aafcea2323aac8fcedfc0f0780e46df5f"/><section>
    <title>ui_Bm1()</title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;B-1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af6038687dce74b65eb797d535190f52d"/><section>
    <title>ui_max()</title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aedf3f393788feaff612bd5c078fc4796"/><section>
    <title>ui_submax()</title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B, <link linkend="_basic__types_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_submax();}
</programlisting></section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_reg__digs__t_8hpp">reg_digs_t.hpp</link></section>
</section>
