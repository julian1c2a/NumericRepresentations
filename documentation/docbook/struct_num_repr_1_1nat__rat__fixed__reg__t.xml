<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</title>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;nat_rat_fixed_reg_t.hpp&gt;</computeroutput>
</para>
Diagrama de colaboración para NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt; UINT_T, B &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link> = std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt; UINT_T, B &gt;, NE+NF &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; LE, LF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a022253ded9523d2145125697729f0bc2">pfx_rat_reg_NExNF_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; UINT_T, B, NE, NF &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39">SIG_SINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt; UINT_T, B, NE+NF &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt; UINT_T, B, LE+LF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link> = typename std::array&lt; UINT_T, NE+NF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf7444ca6fd95c7e1e8e1b0180b269a0">reg_suints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link>, NE+NF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af0e57e72ead75b530b5efe77928ecdc6">reg_ssints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39">SIG_SINT_T</link>, NE+NF &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a83498b558e3a2707ff1767b5bdf087b4">pfx_rat_reg_digs_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&gt;&amp;&amp;...)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae679f5015862a68f635d46d8c4a70892">pfx_rat_reg_digs_t</link> (const Ts &amp;... args) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1acf99b1745ac9ee699102236d1a2a79dc">copy_arg_N</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp;arg)</para>

<para>BEGIN : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</para><para>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ace15a99d6b8f4b429bf385e32d9c58d8">move_arg_N</link> (<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t</link>&lt; NE, NF &gt; &amp;&amp;arg)</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae344ba117479d673748d2e4b54a11e20">pfx_rat_reg_digs_t</link> (const base_NExNF_t&lt; NE, NF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7afac12b75bf172621e52a8cb1aee74c">pfx_rat_reg_digs_t</link> (const base_NExNF_t&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af205ef58ee00a8d89a5504f3638d2f06">pfx_rat_reg_digs_t</link> (Ints_type ... dig_pow_i) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a57512a8692247ed4c3bfca17504d04bb">pfx_rat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2447e6e4c5bc27036cb5c0c717c57516">pfx_rat_reg_digs_t</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a40c5401cc7a854a6c9ee7e303b8b605e">operator=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a01ec3009f1dad14b6a40cd4cffc266d1">operator=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a87a935fc4c1bba1d16ef8fc855ab837d">operator=</link> (const <link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2351264c10e7ecf3ace8a2f8b9bf21f8">nat_reg_N_digs_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE MODIFICAR EL ARGUMENTO. </para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae1b1bbc00ba4e1b7cda6d655d0c69713">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4655dff96fd715063231961682140a8">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7a8a8164894278d64b0ec3c2534d2837">operator=</link> (Int_Type arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a8c7d7fb0e6776dd78e993e5fc8fbf8e4">concat</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a72cce26eea1af99400f760bb683df57f">concat</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a12229e5a534c8c6f2e4075031ae7ef6c">concat_inv</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad13f4ece8bd16d01902c852ada645087">concat_inv</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5b16b680b8c906452330a8201e3f9966">concat</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ea2b34d7a64b91d20a547769fe4c4d5">concat</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f346d0bbdf300ba36b0b9622a0c2004">concat_inv</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9350d24557721d0a2d25a87b3d993183">concat_inv</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa93bfacedfc35b410d1eb6f1e74ffe55">subreg_digs</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a206489e66bc07dd845d00c4a6ccb0bdc">rev_subreg_digs</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6fa675710cb0e3a25d2b46b601516149">subreg_digs_pe</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a3a821c17ddc821a00db5e00b02ea7f77">rev_subreg_digs_pe</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a826d5ada30ddfb3bd85e38a3b9231ed9">subreg_digs_pf</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad5adcbe25e088551ac817004a9320300">rev_subreg_digs_pf</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a787b682d968d66643631b4e17b191b5a">IntPart</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1dfad6f1cf535bde170572bc3c023c6d">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d2ee3c6afa41d4d8df88b979612eac8">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a858568dd397e27a65b678be845d2f11d">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9ac296171e867711b5eeef9373c97080">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a674d8af40df8b5fc48eecd0e58c6b844">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af2ce70fc1edd09e642f0d340f752167a">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a81d967416f67b9a4c30fbca73b4d2a6c">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4dcd2478d4d0f6930a3bafc5159d7e76">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0f8ef4c04d7b0956fb973192e04259c9">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7251f075014fe1f5c38694f6b8675b1c">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a04f43c91d88792c1c6d7369406660a">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a088384a64c5d34b0286cf4074929585f">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4ec8b7755e10bf9fd0d152a6f73be39">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66a7379ac00e3519f5c116819ffb34ea">get</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aeb5f53ec7f2fce4b7729ec3a1226c457">put</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a69468bfb93c10666ca820da3d1124f33">put</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a02410bb4d27f15f78c3b3e6bed790547">operator[]</link> (std::int32_t idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66bc74a435ff3ee2f48a779b285b4045">operator[]</link> (std::int32_t idx) noexcept</para>
</listitem>
            <listitem><para>constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6a0f8118f2de9491462901891f51bfea">operator()</link> (std::int32_t idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1ad5dbda3b2a1663086f48ccddb0c07d">operator++</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adacc48c5076affbe4719232ba16af6cd">operator++</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae87bcfde3ae0324b373aef151db47020">operator--</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ac59dbac090677509ad2290c8af28c5db">operator--</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a82fea75187699b7f253e7a0b76f84816">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a43181180eabb8e8ea937db4ba2d7718d">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a27966e1e6701d534293e7f258e53457b">C_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf28ede7d87f952b85ee2e6f13bddd99">C_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45">operator!</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a46c6455a1ef12adaad5d814985d9ee2c">operator-</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af9fbb6e036ca9bd58675e476d43e05a9">operator+=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a863b4585d8f4ae407912c98c9273b6d3">operator-=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae46f34abf55253a3dc0f6774678f57bc">mult</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a747abd2210ae2c492b36f277931a8cb6">add</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>

<para>&apos;@&apos; = &apos;+&apos; </para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6551f10097dd07df063b87fc1a007fd8">subst</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad900c018f6bac8a884c30349154dea10">operator+</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a742df4d0f55dc71053ee0cd6722c227e">operator-</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abbd54ac852f5cde9a0ec8ebe34f4ffc9">operator*</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad44b35a08b59ad0418071711eeed448b">operator&lt;&lt;</link> (std::size_t n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a197245d11816587e8bbcc82e53a94b45">operator&lt;&lt;=</link> (std::size_t n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2059c242611fae3bb6b65e7313bb7ff5">operator&gt;&gt;</link> (std::size_t n) const noexcept</para>

<para>DIVIDE BY THE BASE B (/10_B) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a04e688baa386601c21f3ad4348205ed8">operator&gt;&gt;=</link> (std::size_t n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5beb2c8c44ad830017acdac79a4e84ad">rem_B</link> (std::size_t n) const noexcept</para>

<para>END : OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;=. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a073f393cf63e0e2ee6c651748c35aa05">m_rem_B</link> (std::size_t n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a90bb25d38ca338df232d9dc14a4134a4">operator|=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>

<para>BEGIN : OPERATORS | &amp; |= &amp;=. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a85a5e8fd4c769947c919010307e3aa93">operator|</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa2cd3382829147490da1a24415b06c77">operator&amp;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a44e11dd006b54a63e2fbf7242cf9f273">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab3cac3beb283fe928dbda805c62a0230">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) const noexcept</para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</listitem>
            <listitem><para>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a11dc06d186a7598661dcf1b8b98736a4">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a589433f890f78faca137757fc3fb8459">operator*</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a00a90e2240080937a5bf0fbf6f6cfde1">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aff1f98a5fef7912f98b23032061c4d2a">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0240da6219232b6431dc4355cbbfe7ac">operator*</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a268bcec2ba1b58bfca7f3c499bcb4bdd">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2afb2e3153171736b62c2eb7a831f22c">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7921aacc123039a503c43bb0590a3816">operator*=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a886ba43fc3221dd828cc5305f641bb6e">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a06c385a088293d118abf24e1145b2d61">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adba3e7b2345403dcf9558285e13f18a4">operator*=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aee17574658ad0e66f3ee133d9f554833">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a18ae64dc889b84eea4ca989e9563651a">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a67e6e0e59887f528524c4b54e6ba5a2a">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab9e34bb3a8d955badd3498d51d5e62f4">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adbeecd9a334cb9c990bca8c7878e19ea">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abf72096e6dd350d74f05124d4bf07e3a">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a94e5d24230e61c14c2590893f435ef06">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab5167455e73179baf8deaccf40901063">sui_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ca499b70aaa1d53917b468c09ad6968">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a470670e3e267bb42318f77ed70a7f42d">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4d1b2577021f8594d6efa471234869e0">regd_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad70d405111f74e96957daf7e860f0abd">regd_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1afc75739252c5a40b233bd12eace8dd16">regd_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0fd73bc1e0e7ef8d7e5cfeb2830da7a5">regd_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a010c5902fd8210da63a98c1179be37a7">regd_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274">regi_0</link> () noexcept</para>

<para>ARRAYS DE ENTEROS QUE SON DE AYUDA. </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a2b45b2f3d26220d33285794c8128a6">regi_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9c1583db7aec52231103595dc69a2a32">regi_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6d97e8aa88ec3d0b9f81c66de861b915">regi_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a993ab098e0e7070f2514b0ebd9b9162e">regi_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a86f11292fe859c0c3ef9a580d1b96052">regi_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type))&lt;=L)</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1d2effcd65514535a97572a28c992519">normalize</link> (Ints_type ... digits_pow_i) noexcept</para>

<para>END : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d591c66320eb144688d13f2f017db83">cuenta_0s_desde_IZDA</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab36669ef39e97b9de7b2b1afb11551a7">cuenta_0s_desde_DRCHA</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp;arg) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt;<?linebreak?>requires (<link linkend="_namespace_num_repr_1_1type__traits_1ae7b0da6237614a2d93ed8d40ee5596a5">type_traits::suitable_base</link>&lt;UINT_T,B&gt;() &amp;&amp; (LE&gt;0))<?linebreak?>struct NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</title></simplesect>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074"/><section>
    <title>base_NEXNF_t</title>
<indexterm><primary>base_NEXNF_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>base_NEXNF_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::base_NEXNF_t =  std::array&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt;UINT_T,B&gt;,NE+NF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a"/><section>
    <title>base_t</title>
<indexterm><primary>base_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>base_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">::base_t</link> =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt;LE,LF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644"/><section>
    <title>dig_t</title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt;UINT_T,B&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3"/><section>
    <title>nat_reg_digs_t</title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::nat_reg_digs_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt;UINT_T,B,LE+LF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe"/><section>
    <title>nat_reg_NExNF_digs_t</title>
<indexterm><primary>nat_reg_NExNF_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>nat_reg_NExNF_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::nat_reg_NExNF_digs_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt;UINT_T,B,NE+NF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a022253ded9523d2145125697729f0bc2"/><section>
    <title>pfx_rat_reg_NExNF_digs_t</title>
<indexterm><primary>pfx_rat_reg_NExNF_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_NExNF_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_NExNF_digs_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt;UINT_T,B,NE,NF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e"/><section>
    <title>reg_ints_t</title>
<indexterm><primary>reg_ints_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>reg_ints_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">::reg_ints_t</link> =  typename std::array&lt;UINT_T,NE+NF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af0e57e72ead75b530b5efe77928ecdc6"/><section>
    <title>reg_ssints_t</title>
<indexterm><primary>reg_ssints_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>reg_ssints_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a603eebc5e425ffafe94d8b1f55ef31a8">::reg_ssints_t</link> =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39">SIG_SINT_T</link>,NE+NF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf7444ca6fd95c7e1e8e1b0180b269a0"/><section>
    <title>reg_suints_t</title>
<indexterm><primary>reg_suints_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>reg_suints_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a4a8728f420e00f6756a236651239f0b1">::reg_suints_t</link> =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link>,NE+NF&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39"/><section>
    <title>SIG_SINT_T</title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">::SIG_SINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a9b443da6cd532ae6d0d5482d8f610737">type_traits::sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609"/><section>
    <title>SIG_UINT_T</title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">::SIG_UINT_T</link> =  typename <link linkend="_namespace_num_repr_1_1type__traits_1aceacfae33a2bdedd9b890f2766f9b5a9">type_traits::sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para></section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a747abd2210ae2c492b36f277931a8cb6"/><section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::add (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&apos;@&apos; = &apos;+&apos; </para>
</para>
<programlisting linenumbering="unnumbered">01455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;pfx_rat_reg_digs_t,2&gt;&#32;result{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>(),cthis};
01458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>()};
01459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&#32;&#32;&#32;temp_result&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;result[0].m_dc[ix].add(arg);
01461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&#32;temp_result_2&#32;=&#32;temp_result[0].m_dc[ix].add(carry);
01462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0].m_dc[ix]&#32;=&#32;temp_result_2[0];
01463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1].m_dc[ix]&#32;&#32;=&#32;temp_result_2[1];
01464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;result[1].m_dc[0];
01465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1].m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
01470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a747abd2210ae2c492b36f277931a8cb6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf28ede7d87f952b85ee2e6f13bddd99"/><section>
    <title>C_B()</title>
<indexterm><primary>C_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.mC_B();
01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_adf28ede7d87f952b85ee2e6f13bddd99_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a27966e1e6701d534293e7f258e53457b"/><section>
    <title>C_Bm1()</title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.mC_Bm1();
01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a27966e1e6701d534293e7f258e53457b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a72cce26eea1af99400f760bb683df57f"/><section>
    <title>concat()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONCAT : CONCATENACION pfx_rat_reg_digs_t&lt;23,7&gt; var1{ <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(4)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(7)</link> }; dig_t&lt;23&gt; var2{22}; var1.concat(var2) == nat#1:2:3:4:5:6:7:20#B23 </para>
<programlisting linenumbering="unnumbered">00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;LE+LF+1&gt;&#32;ret{};
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;arg;
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;LE+LF+1&#32;;&#32;++ix)&#32;{
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix-1];
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a72cce26eea1af99400f760bb683df57f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a8c7d7fb0e6776dd78e993e5fc8fbf8e4"/><section>
    <title>concat()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>FORMACION DE UN REG_M_DIGS_T&lt;M&gt; DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T&lt;N&gt; EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION A SU VEZ PUEDEN SER POR COPIA Y POR MOVIMIENTO CONCAT : CONCATENACION pfx_rat_reg_digs_t&lt;23,7&gt; var1{ <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(4)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(7)</link> } pfx_rat_reg_digs_t&lt;23,3&gt; var2{ <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(22)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(21)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(20)</link> } var1.concat(var2) == nat#1:2:3:4:5:6:7:22:21:20#B23 </para>
<programlisting linenumbering="unnumbered">00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nat_reg_NExNF_digs_t&lt;LE+NE,LF+NF&gt;&#32;ret{};
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;NE+NF&#32;;&#32;++ix)&#32;{
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;arg[ix];
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{NE+NF}&#32;;&#32;ix&#32;&lt;&#32;LE+LF+NE+NF&#32;;&#32;++ix)&#32;{
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix-NE-NF];
00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a8c7d7fb0e6776dd78e993e5fc8fbf8e4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ea2b34d7a64b91d20a547769fe4c4d5"/><section>
    <title>concat()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;LE+LF+1&gt;&#32;ret{};
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;std::move(arg);
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;LE+LF+1&#32;;&#32;++ix)&#32;{
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix-1];
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a4ea2b34d7a64b91d20a547769fe4c4d5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5b16b680b8c906452330a8201e3f9966"/><section>
    <title>concat()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nat_reg_NExNF_digs_t&lt;LE+NE,LF+NF&gt;&#32;ret{};
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;NE+NF&#32;;&#32;++ix)&#32;{
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;std::move(arg[ix]);
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{NE+NF}&#32;;&#32;ix&#32;&lt;&#32;LE+LF+NE+NF&#32;;&#32;++ix)&#32;{
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix-NE-NF];
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a5b16b680b8c906452330a8201e3f9966_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad13f4ece8bd16d01902c852ada645087"/><section>
    <title>concat_inv()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;LE+LF+1&gt;&#32;ret{};
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix];
00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LE+LF]&#32;=&#32;arg;
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad13f4ece8bd16d01902c852ada645087_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a12229e5a534c8c6f2e4075031ae7ef6c"/><section>
    <title>concat_inv()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nat_reg_NExNF_digs_t&lt;LE+NE,LF+NF&gt;&#32;ret{};
00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix];
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{LE+LF}&#32;;&#32;ix&#32;&lt;&#32;NE+NF+LE+LF&#32;;&#32;++ix)&#32;{
00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;arg[ix-LE-LF];
00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a12229e5a534c8c6f2e4075031ae7ef6c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9350d24557721d0a2d25a87b3d993183"/><section>
    <title>concat_inv()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;LE+LF+1&gt;&#32;ret{};
00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix];
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LE+LF]&#32;=&#32;std::move(arg);
00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9350d24557721d0a2d25a87b3d993183_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f346d0bbdf300ba36b0b9622a0c2004"/><section>
    <title>concat_inv()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nat_reg_NExNF_digs_t&lt;LE+NE,LF+NF&gt;&#32;ret{};
00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;cthis[ix];
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{LE+LF}&#32;;&#32;ix&#32;&lt;&#32;NE+NF+LE+LF&#32;;&#32;++ix)&#32;{
00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;std::move(arg[ix-LE-LF]);
00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9f346d0bbdf300ba36b0b9622a0c2004_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1acf99b1745ac9ee699102236d1a2a79dc"/><section>
    <title>copy_arg_N()</title>
<indexterm><primary>copy_arg_N</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>copy_arg_N</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::copy_arg_N (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>BEGIN : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</para>

<para>FUNCION DELEGADA PARA COPIA DE UN ARRAY DE DISTINTO TAMANO O TAMANO CUALQUIERA &quot;N&quot; INTERNO </para>
<programlisting linenumbering="unnumbered">00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int64_t&#32;cLE{LE};
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int64_t&#32;cLF{LF};
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int64_t&#32;cNE{NE};
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int64_t&#32;cNF{NF};
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&lt;LE)&#32;{
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{NE}&#32;;&#32;ix&#32;&lt;&#32;LE&#32;;&#32;++ix)
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[LF+ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LF-NE&#32;;&#32;++ix)
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[LF+ix]=arg[NF+ix];
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{NE}&#32;;&#32;ix&#32;&lt;&#32;LE&#32;;&#32;++ix)
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[LF+ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;NF-LF&#32;;&#32;++ix)
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[cLF+ix]=arg[cNF+ix];
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{LF}&#32;;&#32;ix&#32;&lt;&#32;LE&#32;;&#32;++ix)
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[NF+ix]=arg[ix];
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00199 
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_acf99b1745ac9ee699102236d1a2a79dc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab36669ef39e97b9de7b2b1afb11551a7"/><section>
    <title>cuenta_0s_desde_DRCHA()</title>
<indexterm><primary>cuenta_0s_desde_DRCHA</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>cuenta_0s_desde_DRCHA</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::cuenta_0s_desde_DRCHA (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;ret{0};
01913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg[ix]==0)&#32;{
01915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++ret;
01916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;LE+LF;
01922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d591c66320eb144688d13f2f017db83"/><section>
    <title>cuenta_0s_desde_IZDA()</title>
<indexterm><primary>cuenta_0s_desde_IZDA</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>cuenta_0s_desde_IZDA</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::cuenta_0s_desde_IZDA (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;ret{0};
01898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;ix{LE+LF-1}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
01899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg[ix]==0)&#32;{
01900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++ret;
01901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;LE+LF;
01907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e"/><section>
    <title>dig_0()</title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00036 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_0();}
</programlisting><para>
Referenciado por <link linkend="_l01454">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::add()</link>, <link linkend="_l00174">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::copy_arg_N()</link>, <link linkend="_l01709">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::m_rem_B()</link>, <link linkend="_l01208">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mC_B()</link>, <link linkend="_l00209">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::move_arg_N()</link>, <link linkend="_l01372">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mult()</link>, <link linkend="_l00243">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::normalize()</link>, <link linkend="_l01136">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator++()</link>, <link linkend="_l01276">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator+=()</link>, <link linkend="_l01166">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator--()</link>, <link linkend="_l01317">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator-=()</link>, <link linkend="_l01631">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&lt;&lt;()</link>, <link linkend="_l01646">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&lt;&lt;=()</link>, <link linkend="_l00386">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator=()</link>, <link linkend="_l01663">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&gt;&gt;()</link>, <link linkend="_l01678">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&gt;&gt;=()</link>, <link linkend="_l01107">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator[]()</link>, <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>, <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>, <link linkend="_l00093">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_0()</link> y <link linkend="_l01475">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::subst()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a235bc4a9ae726bbf7c7d5933d9a62b2e_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59"/><section>
    <title>dig_1()</title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00037 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_1();}
</programlisting><para>
Referenciado por <link linkend="_l01208">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mC_B()</link>, <link linkend="_l01136">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator++()</link>, <link linkend="_l01276">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator+=()</link>, <link linkend="_l01317">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator-=()</link>, <link linkend="_l00057">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_1()</link>, <link linkend="_l00067">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_B()</link>, <link linkend="_l00075">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B()</link>, <link linkend="_l00101">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_1()</link>, <link linkend="_l00113">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_B()</link> y <link linkend="_l00121">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_pow_n_B()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a960faa8c0828a9a6680526e7a9bfbc59_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029"/><section>
    <title>dig_Bm1()</title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00038 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_max();}
</programlisting><para>
Referenciado por <link linkend="_l01208">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mC_B()</link>, <link linkend="_l01136">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator++()</link>, <link linkend="_l01276">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator+=()</link>, <link linkend="_l01317">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator-=()</link>, <link linkend="_l00062">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_Bm1()</link>, <link linkend="_l00107">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_Bm1()</link> y <link linkend="_l01475">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::subst()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a487d6b76d2e1cb0c18afaf54288e6029_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a18ae64dc889b84eea4ca989e9563651a"/><section>
    <title>dig_Bm2()</title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00040 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_submax();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aee17574658ad0e66f3ee133d9f554833"/><section>
    <title>dig_max()</title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00039 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a67e6e0e59887f528524c4b54e6ba5a2a"/><section>
    <title>dig_submax()</title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00041 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::dig_submax();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66a7379ac00e3519f5c116819ffb34ea"/><section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t A{}; I en [LE-1,-LF] A.get&lt;LE-1&gt;() [devuelve el digito de peso B^(LE-1)] .......... A.get&lt;2&gt;() [devuelve el digito de peso B^2] A.get&lt;1&gt;() [devuelve el digito de peso B^1] A.get&lt;0&gt;() [devuelve el digito de peso (B^0)==1] A.get&lt;-1&gt;() [devuelve el digito de peso B^-1] A.get&lt;-2&gt;() [devuelve el digito de peso B^-2] ........... A.get&lt;-LF&gt;() [devuelve el digito de peso B^-LF] MSB == MSB_E == LE-1 LSB_E == LF MSB_F == LF-1 LSB_F == 0 == LSB </para>
<programlisting linenumbering="unnumbered">01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[I+LF]);
01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a787b682d968d66643631b4e17b191b5a"/><section>
    <title>IntPart()</title>
<indexterm><primary>IntPart</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>IntPart</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::IntPart ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;retInt{0};
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;BasePowIx{1};
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LF}&#32;;&#32;k&#32;&lt;&#32;LE+LF&#32;;&#32;++k)&#32;{
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retInt&#32;+=&#32;m_dc[k]*BasePowIx;
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B;
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(retInt);
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a073f393cf63e0e2ee6c651748c35aa05"/><section>
    <title>m_rem_B()</title>
<indexterm><primary>m_rem_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>m_rem_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::m_rem_B (std::size_t n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;LE+LF)&#32;{
01712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a073f393cf63e0e2ee6c651748c35aa05_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a43181180eabb8e8ea937db4ba2d7718d"/><section>
    <title>mC_B()</title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis.mC_Bm1();
01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()};
01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((m_dc[ix]==<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>())&amp;&amp;(carry&#32;!=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()))&#32;{
01216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry&#32;==&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()){
01220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_dc[ix];
01221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>, <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a43181180eabb8e8ea937db4ba2d7718d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a82fea75187699b7f253e7a0b76f84816"/><section>
    <title>mC_Bm1()</title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
01201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;=&#32;!m_dc[ix];
01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cthis;
01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a82fea75187699b7f253e7a0b76f84816_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ace15a99d6b8f4b429bf385e32d9c58d8"/><section>
    <title>move_arg_N()</title>
<indexterm><primary>move_arg_N</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>move_arg_N</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::move_arg_N (<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a863e7ee55c02da13512180e546d6fd29">base_N_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>FUNCION DELEGADA PARA MOVER DE UN ARRAY DE DISTINTO TAMANO O TAMANO CUALQUIERA &quot;N&quot; INTERNO </para>
<programlisting linenumbering="unnumbered">00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(N&lt;L)&#32;{
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{N}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;N&#32;;&#32;++ix)
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=std::move(arg[ix]);
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=std::move(arg[ix]);
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ace15a99d6b8f4b429bf385e32d9c58d8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae46f34abf55253a3dc0f6774678f57bc"/><section>
    <title>mult()</title>
<indexterm><primary>mult</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>mult</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::mult (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACIONES &apos;@&apos;(REG_DIGS_T,DIG_T)-&gt;STD::ARRAY&lt;REG_DIGS_T,2&gt; &apos;@&apos; = MULT </para>
<programlisting linenumbering="unnumbered">01373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;pfx_rat_reg_digs_t,2&gt;&#32;ret{};
01376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.is_0())&#32;{
01377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;ret[0].m_dc)
01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;ret[1].m_dc)
01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.is_1())&#32;{
01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]&#32;=&#32;cpthis;
01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;ret[1].m_dc)
01386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>()};
01391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;res&#32;=&#32;m_dc[ix].mult(arg);
01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;uds&#32;=&#32;res[0].add(carry);
01394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0].m_dc[ix]&#32;=&#32;m_dc[ix]&#32;=&#32;uds[0]&#32;+&#32;carry;
01395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;res[1]&#32;+&#32;uds[1];
01396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[1].m_dc[0]=carry;
01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ae46f34abf55253a3dc0f6774678f57bc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1d2effcd65514535a97572a28c992519"/><section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>normalize</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type))&lt;=L)</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::normalize (Ints_type ... digits_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>END : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</para>

<para>FUNCION DE NORMALIZACION A LA BASE B DE UN ARGUMENTOS EN UN PACK DE ENTEROS CUALQUIERA INTERNA </para>
<programlisting linenumbering="unnumbered">00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>pack_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;utility::pack2array&lt;Ints_type...&gt;;
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unique_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;pack_type::elem_type;
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;pack_sz{pack_type::pack_size()};
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(&#32;type_traits::unsigned_integral_c&lt;unique_type&gt;&#32;)&#32;{
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(type_traits::is_unsigned_sz_gt_v&lt;UINT_T,unique_type&gt;)&#32;{
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SUInt_type&#32;=&#32;type_traits::sig_UInt_for_UInt_t&lt;UINT_T&gt;;
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;SUInt_type,L&gt;&#32;ret_array{digits_pow_i...};
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&#32;ret{};
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;pack_sz&#32;;&#32;++ix)&#32;{
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(ret_array[ix]);
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{pack_sz}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(0);
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SUInt_type&#32;=&#32;type_traits::sig_UInt_for_UInt_t&lt;unique_type&gt;;
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;SUInt_type,L&gt;&#32;ret_array{digits_pow_i...};
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&#32;ret{};
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;pack_sz&#32;;&#32;++ix)&#32;{
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(ret_array[ix]);
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{pack_sz}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(0);
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>temp_SUInt_type&#32;=&#32;type_traits::sig_UInt_for_SInt_t&lt;unique_type&gt;;
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(type_traits::is_unsigned_sz_gt_v&lt;UINT_T,temp_SUInt_type&gt;)
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SUInt_type&#32;=&#32;type_traits::sig_UInt_for_UInt_t&lt;UINT_T&gt;;
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;SUInt_type,L&gt;&#32;ret_array{digits_pow_i...};
00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&#32;ret{};
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;pack_sz&#32;;&#32;++ix)&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret_array[ix]&#32;&lt;&#32;0)
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>((((ret_array[ix]/(-B))+1)*B)+ret_array[ix]);
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(ret_array[ix]);
00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{pack_sz}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SUInt_type&#32;=&#32;temp_SUInt_type;
00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;SUInt_type,L&gt;&#32;ret_array{digits_pow_i...};
00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a67b3e6f4b8a503e96dabc1bc39ea6fc7">base_t</link>&#32;ret{};
00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;pack_sz&#32;;&#32;++ix)&#32;{
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret_array[ix]&#32;&lt;&#32;0)
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>((((ret_array[ix]/(-B))+1)*B)+ret_array[ix]);
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(ret_array[ix]);
00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{pack_sz}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
<para>
Referenciado por <link linkend="_l00314">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1d2effcd65514535a97572a28c992519_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1d2effcd65514535a97572a28c992519_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45"/><section>
    <title>operator!()</title>
<indexterm><primary>operator!</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.mC_Bm1();
01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9f8d01bd90392598f683702bdff3ad45_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a858568dd397e27a65b678be845d2f11d"/><section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A != B =&gt; true or false </para>
<programlisting linenumbering="unnumbered">00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LE&lt;NE)&#32;{
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LE}&#32;;&#32;k&#32;&lt;&#32;NE&#32;;&#32;++k)&#32;{
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&lt;LE)&#32;{
00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NE}&#32;;&#32;k&#32;&lt;&#32;LE&#32;;&#32;++k)&#32;{
00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00732 
00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZE{std::min(LE,NE)};
00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZE&#32;;&#32;++k)&#32;{
00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+LF]!=arg.m_dc[k+NF])&#32;{
00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00739 
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZF{std::min(LF,NF)};
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZF&#32;;&#32;++k)&#32;{
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[LF-1-k]!=arg.m_dc[NF-1-k])&#32;{
00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00746 
00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LF&lt;NF)&#32;{
00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LF-1}&#32;;&#32;k&#32;&lt;&#32;NF&#32;;&#32;++k)&#32;{
00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NF-1}&#32;;&#32;k&#32;&lt;&#32;LF&#32;;&#32;++k)&#32;{
00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00761 
00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a858568dd397e27a65b678be845d2f11d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9ac296171e867711b5eeef9373c97080"/><section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)!=arg.m_dc);
00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a44e11dd006b54a63e2fbf7242cf9f273"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;&amp;=&#32;arg;
01758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a44e11dd006b54a63e2fbf7242cf9f273_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa2cd3382829147490da1a24415b06c77"/><section>
    <title>operator&amp;=()</title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;&amp;=&#32;arg.m_dc[ix];
01749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6a0f8118f2de9491462901891f51bfea"/><section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>() (std::int32_t idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx]());
01123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0240da6219232b6431dc4355cbbfe7ac"/><section>
    <title>operator*()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
02068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;narg(arg);
02069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;*=&#32;narg;
02070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
02071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a0240da6219232b6431dc4355cbbfe7ac_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a589433f890f78faca137757fc3fb8459"/><section>
    <title>operator*()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>BEGIN : DECLARACIONES E INICIALIZACIONES</para>

<para>END : DECLARACIONES E INICIALIZACIONES</para>

<para>BEGIN : OBTENEMOS TODOS LOS SUMANDOS MULTIPLICANDO POR UN DIGITO FIJO COLOCADOS CONVENIENTEMENTE</para>

<para>COLOCADOS CONVENIENTEMENTE END : OBTENEMOS TODOS LOS SUMANDOS MULTIPLICANDO POR UN DIGITO FIJO</para>

<para>BEGIN : SUMAMOS TODOS LOS SUMANDOS</para>

<para>END : SUMAMOS TODOS LOS SUMANDOS BEGIN : PREPARAMOS EL PAR DE RETORNO</para>

<para>END : PREPARAMOS EL PAR DE RETORNO</para>
<programlisting linenumbering="unnumbered">01835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;actints{};
01839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actints[ix]&#32;=&#32;cthis(ix);
01841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;argints{};
01843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argints[ix]&#32;=&#32;arg(ix);
01845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t</link>&lt;2*(LE+LF)&gt;&#32;carryints{};
01847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;iy{0}&#32;;&#32;iy&#32;&lt;&#32;2*(LE+LF)&#32;;&#32;++iy)&#32;{
01848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carryints[iy]=0;
01849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a4a8728f420e00f6756a236651239f0b1">reg_suints_t</link>&lt;2*(LE+LF)&gt;,LE+LF&gt;&#32;retints{};
01851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;iy{0}&#32;;&#32;iy&#32;&lt;&#32;2*(LE+LF)&#32;;&#32;++iy)&#32;{
01853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix][iy]&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0;
01854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01857 
01860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;iy{0}&#32;;&#32;ix+iy&#32;&lt;&#32;2*(LE+LF)&#32;;&#32;++iy)&#32;{
01862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix][ix+iy]&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(actints[ix])&#32;&#32;&#32;&#32;*
emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(argints[iy])&#32;&#32;&#32;&#32;&#32;)+
emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(carryints[iy]);
01865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carryints[iy]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix][ix+iy]/B;
01866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix][ix+iy]&#32;&#32;&#32;%=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;B;
01867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01871 
01873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;pfx_rat_reg_digs_t,LE+LF&gt;&#32;rets{};
01874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;iz{0}&#32;;&#32;iz&#32;&lt;&#32;LE+LF&#32;;&#32;++iz)&#32;{
01875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rets.m_dc[iz]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>(retints[iz]);
01876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;iw{1}&#32;;&#32;iw&#32;&lt;&#32;LE+LF&#32;;&#32;++iw)&#32;{
01878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rets.m_dc[0]&#32;+=&#32;rets.m_dc[iw];
01879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;hace&#32;falta&#32;que&#32;la&#32;suma&#32;sea&#32;de&#32;tamano&#32;L+1</emphasis>
01880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;pfx_rat_reg_digs_t,2&gt;&#32;retpair{};
01884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;2*LF&#32;;&#32;++ix)&#32;{
01885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retpair[0].m_dc[ix]&#32;=&#32;rets[0].m_dc[ix];
01886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{2*LF}&#32;;&#32;ix&#32;&lt;&#32;2*(LE+LF)&#32;;&#32;++ix)&#32;{
01888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retpair[1].m_dc[ix-2*LF]&#32;=&#32;rets[0].m_dc[ix];
01889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retpair;
01892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a589433f890f78faca137757fc3fb8459_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abbd54ac852f5cde9a0ec8ebe34f4ffc9"/><section>
    <title>operator*()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
01524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;*=&#32;arg;
01525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_abbd54ac852f5cde9a0ec8ebe34f4ffc9_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7921aacc123039a503c43bb0590a3816"/><section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>*= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
02121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;narg(arg);
02122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;*=&#32;narg;
02123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
02124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a7921aacc123039a503c43bb0590a3816_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adba3e7b2345403dcf9558285e13f18a4"/><section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>*= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)*=arg.m_dc;
02144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a00a90e2240080937a5bf0fbf6f6cfde1"/><section>
    <title>operator+()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
02050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;narg(arg);
02051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;+=&#32;narg;
02052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
02053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a00a90e2240080937a5bf0fbf6f6cfde1_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab3cac3beb283fe928dbda805c62a0230"/><section>
    <title>operator+()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</para>

<para>CARRY INICIAL ES 0</para>

<para>INT_ARRAY TEMPORAL COPIA DE (*THIS) [SUMANDO 0]</para>

<para>INT_ARRAY TEMPORAL COPIA DE ARG [SUMANDO 1]</para>

<para>BUCLE FOR QUE SUMA RETINTS Y ARGINTS DESDE IDX=0 A IDX=L-1</para>

<para>GUARDAMOS EL CARRY FINAL Y RETORNAMOS LA SUMA</para>
<programlisting linenumbering="unnumbered">01772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
01775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;carry{0};
01777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;retints{};
01778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix]&#32;=&#32;ret(ix);
01780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;argints{};
01783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argints[ix]&#32;=&#32;arg(ix);
01785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix]&#32;+=&#32;(argints[ix]+carry);
01789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;retints[ix]/B;
01790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(retints[ix]);
01791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;retpair&#32;=&#32;std::make_pair(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(carry),ret);
01794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ab3cac3beb283fe928dbda805c62a0230_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad900c018f6bac8a884c30349154dea10"/><section>
    <title>operator+()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
01508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;+=&#32;arg;
01509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad900c018f6bac8a884c30349154dea10_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1ad5dbda3b2a1663086f48ccddb0c07d"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES 1</para>

<para>BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()};
01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((m_dc[ix]==<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>())&amp;&amp;(carry&#32;==&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()))&#32;{
01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((cthis.m_dc[ix]&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>())&amp;&amp;(carry&#32;==&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>())){
01148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry&#32;!=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>())&#32;{
01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_dc[ix];
01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cthis;
01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>, <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1ad5dbda3b2a1663086f48ccddb0c07d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adacc48c5076affbe4719232ba16af6cd"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++(*this);
01162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_adacc48c5076affbe4719232ba16af6cd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a268bcec2ba1b58bfca7f3c499bcb4bdd"/><section>
    <title>operator+=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
02103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;narg(arg);
02104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;+=&#32;narg;
02105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
02106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a268bcec2ba1b58bfca7f3c499bcb4bdd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a886ba43fc3221dd828cc5305f641bb6e"/><section>
    <title>operator+=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)+=arg.m_dc;
02130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af9fbb6e036ca9bd58675e476d43e05a9"/><section>
    <title>operator+=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES 1</para>

<para>CASOS CARRY==0[ULTIMA], CARRY==1[VECES SIGUIENTES], CARRY=ARG [1A VEZ] SI ARG == 0 ENTONCES SE DEVUELVE SIN MÁS SI ARG == 1 ENTONCES ++CTHIS SI ARG &gt; 1 ENTONCES 1a VEZ dig_BmArg 2a VEZ dig_Bm1 Y SIGUIENTES ULTIMA VEZ CARRY ==0</para>

<para>PRIMERA VEZ : ARG &gt; 1 usamos dig_BmArg</para>

<para>SEGUNDA VEZ Y SIGUIENTES BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">01277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{arg};
01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.is_0())&#32;{
01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.is_1())&#32;{
01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(++cthis);
01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;dig_BmArg{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>()-(arg-<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>())};
01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[0]==dig_BmArg)&#32;{
01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[0]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;&#32;&#32;&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix]==<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>()&amp;&amp;&#32;!(carry.is_0()))&#32;{
01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((m_dc[ix]&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>())&amp;&amp;(carry&#32;==&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>())){
01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(carry&#32;!=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>())&#32;{
01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_dc[ix];
01308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>, <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_af9fbb6e036ca9bd58675e476d43e05a9_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a46c6455a1ef12adaad5d814985d9ee2c"/><section>
    <title>operator-()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.mC_B();
01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a46c6455a1ef12adaad5d814985d9ee2c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aff1f98a5fef7912f98b23032061c4d2a"/><section>
    <title>operator-()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
02059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;narg(arg);
02060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;-=&#32;narg;
02061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
02062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_aff1f98a5fef7912f98b23032061c4d2a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a11dc06d186a7598661dcf1b8b98736a4"/><section>
    <title>operator-()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>INICIALIZAMOS EL CARRY/BORROW A 0</para>

<para>GUARDAMOS EL COMPLEMENTO A LA BASE MENOS 1 DEL MINUENDO</para>

<para>COMPLETAMOS EL COMPLEMENTO A LA BASE SUMANDO 1 [carry_CB vale en el inicio 1]</para>

<para>SE HA COMPLETADO EL COMPLEMENTO A LA BASE</para>

<para>SUMAMOS SUMANDO_0 + C_B(SUMANDO_1)</para>
<programlisting linenumbering="unnumbered">01799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
01802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;carry_CB{1};
01803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;carry_add{0};
01804 
01805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;retints{};
01806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix]&#32;=&#32;ret(ix);
01808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01809 
01810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;argints{};
01811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argints[ix]&#32;=&#32;(B-1)-arg(ix);
01814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix){
01818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argints[ix]&#32;=&#32;argints[ix]+carry_CB;
01819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry_CB&#32;=&#32;argints[ix]/B;
01820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01822 
01824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retints[ix]&#32;+=&#32;(argints[ix]+carry_add);
01826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry_add&#32;=&#32;retints[ix]/B;
01827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(retints[ix]);
01828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;pairret&#32;=&#32;std::make_pair(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(carry_add),ret);
01830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pairret;
01831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a11dc06d186a7598661dcf1b8b98736a4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a742df4d0f55dc71053ee0cd6722c227e"/><section>
    <title>operator-()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
01516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;-=&#32;arg;
01517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a742df4d0f55dc71053ee0cd6722c227e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae87bcfde3ae0324b373aef151db47020"/><section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES EL COMPLEMENTO A LA BASE DE 1</para>

<para>BUCLE FOR QUE SUMA CTHIS Y C_B(1) DESDE IDX=0 A IDX=LE+LF-1</para>
<programlisting linenumbering="unnumbered">01167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>()};
01172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;temp{cthis(ix)+B-1+carry()};
01174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(temp);
01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(temp/B);
01176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cthis;
01178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ae87bcfde3ae0324b373aef151db47020_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ac59dbac090677509ad2290c8af28c5db"/><section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis(*<emphasis role="keyword">this</emphasis>);
01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--(*this);
01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ac59dbac090677509ad2290c8af28c5db_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2afb2e3153171736b62c2eb7a831f22c"/><section>
    <title>operator-=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
02112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;narg(arg);
02113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;-=&#32;narg;
02114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
02115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2afb2e3153171736b62c2eb7a831f22c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a06c385a088293d118abf24e1145b2d61"/><section>
    <title>operator-=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">02135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
02136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)-=arg.m_dc;
02137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
02138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a863b4585d8f4ae407912c98c9273b6d3"/><section>
    <title>operator-=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES 1</para>

<para>CASOS CARRY==0[ULTIMA], CARRY==1[VECES SIGUIENTES], CARRY=ARG [1A VEZ] SI ARG == 0 ENTONCES SE DEVUELVE SIN MÁS SI ARG == 1 ENTONCES &#8211;CTHIS SI ARG &gt; 1 ENTONCES 1a VEZ dig_BmArg 2a VEZ dig_Bm1 Y SIGUIENTES ULTIMA VEZ CARRY ==0</para>

<para>PRIMERA VEZ : SUMAMOS EL COMPLEMENTO A LA BASE DE ARG</para>

<para>SEGUNDA VEZ Y SIGUIENTES BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<programlisting linenumbering="unnumbered">01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis(*<emphasis role="keyword">this</emphasis>);
01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{arg};
01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg==<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>())&#32;{
01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;==&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>())&#32;{
01331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(--cthis);
01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;dig_CBArg{arg.C_B()};
01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;dig_sig_Arg{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>()};
01335 
01337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[0]())+dig_CBArg()&gt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>()())&#32;{
01338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[0]&#32;+=&#32;dig_CBArg;
01343 
01346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;LE+LF-1&#32;;&#32;++ix)&#32;{
01347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()&#32;&amp;&amp;&#32;carry.is_0())&#32;{
01348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>();
01349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()&#32;&amp;&amp;&#32;!carry.is_0())&#32;{
01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[ix].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a3fdf457344d84bef1762417b5f5228d2">is_1</link>()&#32;&amp;&amp;&#32;carry.is_0())&#32;{
01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]=<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;+=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>();
01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;+=&#32;carry;
01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
01366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>, <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link>, <link linkend="_l03693">is_0()</link>, <link linkend="_l03698">is_1()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a863b4585d8f4ae407912c98c9273b6d3_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0f8ef4c04d7b0956fb973192e04259c9"/><section>
    <title>operator&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &lt; B =&gt; true or false </para>
<programlisting linenumbering="unnumbered">00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&lt;LE)&#32;{
00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NE}&#32;;&#32;k&#32;&lt;&#32;LE&#32;;&#32;++k)&#32;{
00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LE&lt;NE)&#32;{
00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LE}&#32;;&#32;k&#32;&lt;&#32;NE&#32;;&#32;++k)&#32;{
00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZE{std::min(LE,NE)};
00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZE&#32;;&#32;++k)&#32;{
00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+NF]&lt;arg.m_dc[k+LF])&#32;{
00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+NF]&gt;arg.m_dc[k+LF])&#32;{
00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZF{std::min(LF,NF)};
00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZF&#32;;&#32;++k)&#32;{
00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[NF-1-k]&lt;arg.m_dc[LF-1-k])&#32;{
00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[NF-1-k]&gt;arg.m_dc[LF-1-k])&#32;{
00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;LF-NF&#32;;&#32;++k)&#32;{
00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[NF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LF&lt;NF)&#32;{
00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;NF-LF&#32;;&#32;++k)&#32;{
00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[LF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a0f8ef4c04d7b0956fb973192e04259c9_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7251f075014fe1f5c38694f6b8675b1c"/><section>
    <title>operator&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)&lt;arg.m_dc);
00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad44b35a08b59ad0418071711eeed448b"/><section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt; (std::size_t n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>BEGIN : OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;= MULTIPLY BY THE BASE B (10) </para>
<programlisting linenumbering="unnumbered">01632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&lt;LE+LF)&#32;{
01634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
01635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;ix{n-1}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
01636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.m_dc[ix+n]&#32;=&#32;cpthis.m_dc[ix];
01637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>{});
01643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad44b35a08b59ad0418071711eeed448b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a197245d11816587e8bbcc82e53a94b45"/><section>
    <title>operator&lt;&lt;=()</title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;&lt;= (std::size_t n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;LE+LF)&#32;{
01650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;ix{n-1}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis.m_dc[ix+n]&#32;=&#32;cthis.m_dc[ix];
01652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis.m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;=&#32;(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>{});
01657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a197245d11816587e8bbcc82e53a94b45_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a674d8af40df8b5fc48eecd0e58c6b844"/><section>
    <title>operator&lt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &lt;= B =&gt; true or false </para>
<programlisting linenumbering="unnumbered">00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&lt;LE)&#32;{
00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NE}&#32;;&#32;k&#32;&lt;&#32;LE&#32;;&#32;++k)&#32;{
00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LE&lt;NE)&#32;{
00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LE}&#32;;&#32;k&#32;&lt;&#32;NE&#32;;&#32;++k)&#32;{
00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZE{std::min(LE,NE)};
00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZE&#32;;&#32;++k)&#32;{
00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+NF]&lt;arg.m_dc[k+LF])&#32;{
00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+NF]&gt;arg.m_dc[k+LF])&#32;{
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZF{std::min(LF,NF)};
00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZF&#32;;&#32;++k)&#32;{
00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[NF-1-k]&lt;arg.m_dc[LF-1-k])&#32;{
00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[NF-1-k]&gt;arg.m_dc[LF-1-k])&#32;{
00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;LF-NF&#32;;&#32;++k)&#32;{
00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[NF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LF&lt;NF)&#32;{
00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;NF-LF&#32;;&#32;++k)&#32;{
00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[LF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a674d8af40df8b5fc48eecd0e58c6b844_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af2ce70fc1edd09e642f0d340f752167a"/><section>
    <title>operator&lt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)&lt;=arg.m_dc);
00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a088384a64c5d34b0286cf4074929585f"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COMPARACION OPERADOR SPACESHIP C++20 Comparaciones con un array estandar de otra longitud La salida devuelta es greater,less,equivalent </para>
<programlisting linenumbering="unnumbered">01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&gt;&#32;arg)
01047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::greater;
01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&lt;&#32;arg)
01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::less;
01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::weak_ordering::equivalent;
01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a088384a64c5d34b0286cf4074929585f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4ec8b7755e10bf9fd0d152a6f73be39"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&gt;&#32;arg)
01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::greater;
01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cthis&#32;&lt;&#32;arg)
01063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::less;
01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strong_ordering::equal;
01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad4ec8b7755e10bf9fd0d152a6f73be39_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae1b1bbc00ba4e1b7cda6d655d0c69713"/><section>
    <title>operator=()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA DESDE BASE_N_T. </para>
</para>
<programlisting linenumbering="unnumbered">00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc)!=(&amp;arg))
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg&lt;NE+NF&gt;(arg);
00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4655dff96fd715063231961682140a8"/><section>
    <title>operator=()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) dig_t&lt;13&gt; a{3}; pfx_rat_reg_digs_t&lt;13,16&gt; A{}; A = a; A = nat#0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:3#B13 </para>
<programlisting linenumbering="unnumbered">00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;(this-&gt;m_dc[LF])!=(&amp;arg))&#32;{
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;dig&#32;:&#32;m_dc)
00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dig&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[LF]&#32;=&#32;arg;
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad4655dff96fd715063231961682140a8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a87a935fc4c1bba1d16ef8fc855ab837d"/><section>
    <title>operator=()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2351264c10e7ecf3ace8a2f8b9bf21f8">nat_reg_N_digs_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE MODIFICAR EL ARGUMENTO. </para>
</para>
<programlisting linenumbering="unnumbered">00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)&#32;{
00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg&lt;NE,NF&gt;(arg.m_dc);
00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7a8a8164894278d64b0ec3c2534d2837"/><section>
    <title>operator=()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) pfx_rat_reg_digs_t&lt;16,4&gt; var{}; var = 1324; 1324/%16 = 82|12 82/%16 = 5|2 =&gt; var == nat#5:2:12#B16 </para>
<programlisting linenumbering="unnumbered">00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Int_Type&#32;creg_g{arg};
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((&amp;(this-&gt;m_dc()))!=(&amp;arg))&#32;{
00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_basic__types_8hpp_1a8fe9f5218406354b79aac7a41bd4823f">uint128_t</link>&#32;BasePowIx{1};
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LF}&#32;;&#32;k&#32;&lt;&#32;LE+LF&#32;;&#32;++k)&#32;{
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasePowIx&#32;*=&#32;B;
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(creg_g&#32;&lt;&#32;0)&#32;{
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;+=&#32;BasePowIx;
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LF}&#32;;&#32;k&#32;&lt;&#32;LE+LF&#32;;&#32;++k){
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[k]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(creg_g);
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creg_g&#32;/=&#32;B;
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LF-1}&#32;;&#32;k&#32;&gt;=&#32;0&#32;;&#32;--k)
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[k]=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a7a8a8164894278d64b0ec3c2534d2837_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a01ec3009f1dad14b6a40cd4cffc266d1"/><section>
    <title>operator=()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR MOVIMIENTO reg_N_digs_t == std::array&lt;dig_t,N&gt;; pfx_rat_reg_digs_t&lt;21,5&gt; var{}; pfx_rat_reg_digs_t var2{}; var2 = std::move(var); var2 == antigua var; var actual no sabemos su valor; </para>
<programlisting linenumbering="unnumbered">00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)&#32;{
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_arg&lt;NE,NF&gt;(arg.m_dc);
00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a40c5401cc7a854a6c9ee7e303b8b605e"/><section>
    <title>operator=()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR COPIA EN LA QUE SE PUEDE COPIAR reg_N_digs_t == std::array&lt;dig_t,N&gt;; pfx_rat_reg_digs_t&lt;21,5&gt; var{}; pfx_rat_reg_digs_t var2{}; var2 = var; var2 == var </para>
<programlisting linenumbering="unnumbered">00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;arg)&#32;{
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_arg&lt;NE,NF&gt;(arg.m_dc);
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1dfad6f1cf535bde170572bc3c023c6d"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A == B =&gt; true or false </para>
<programlisting linenumbering="unnumbered">00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&gt;LE)&#32;{
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LE}&#32;;&#32;k&#32;&lt;&#32;NE&#32;;&#32;++k)&#32;{
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LE&gt;NE)&#32;{
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NE}&#32;;&#32;k&#32;&lt;&#32;LE&#32;;&#32;++k)&#32;{
00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZE{std::min(LE,NE)};
00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZE&#32;;&#32;++k)&#32;{
00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+LF]!=arg.m_dc[k+NF])
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZF{std::min(LF,NF)};
00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;ZF-1&#32;;&#32;++k)&#32;{
00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[LF-1-k]!=arg.m_dc[NF-1-k])
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&gt;LF)&#32;{
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LF}&#32;;&#32;k&#32;&lt;&#32;NF&#32;;&#32;++k)&#32;{
00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LF&gt;NF)&#32;{
00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NF}&#32;;&#32;k&#32;&lt;&#32;LF&#32;;&#32;++k)&#32;{
00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1dfad6f1cf535bde170572bc3c023c6d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d2ee3c6afa41d4d8df88b979612eac8"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)==arg.m_dc);
00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a04f43c91d88792c1c6d7369406660a"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &gt; B =&gt; true or false </para>
<programlisting linenumbering="unnumbered">00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&gt;LE)&#32;{
00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LE}&#32;;&#32;k&#32;&lt;&#32;NE&#32;;&#32;++k)&#32;{
00990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LE&gt;NE)&#32;{
00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NE}&#32;;&#32;k&#32;&lt;&#32;LE&#32;;&#32;++k)&#32;{
00997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZE{std::min(LE,NE)};
01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;k{ZE-1}&#32;;&#32;k&#32;&gt;&#32;-1&#32;;&#32;--k)&#32;{
01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+LF]&gt;arg.m_dc[k+NF])&#32;{
01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+LF]&lt;arg.m_dc[k+NF])&#32;{
01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZF{std::min(LF,NF)};
01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;k{ZF-1}&#32;;&#32;k&#32;&gt;&#32;-1&#32;;&#32;--k)&#32;{
01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[LF-1-k]&gt;arg.m_dc[NF-1-k])&#32;{
01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[LF-1-k]&lt;arg.m_dc[NF-1-k])&#32;{
01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LF&lt;NF)&#32;{
01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;NF-LF&#32;;&#32;++k)&#32;{
01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[NF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;LF-NF&#32;;&#32;++k)&#32;{
01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[LF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9a04f43c91d88792c1c6d7369406660a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a81d967416f67b9a4c30fbca73b4d2a6c"/><section>
    <title>operator&gt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &gt;= B =&gt; true or false </para>
<programlisting linenumbering="unnumbered">00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NE&gt;LE)&#32;{
00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{LE}&#32;;&#32;k&#32;&lt;&#32;NE&#32;;&#32;++k)&#32;{
00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[k+NF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LE&gt;NE)&#32;{
00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{NE}&#32;;&#32;k&#32;&lt;&#32;LE&#32;;&#32;++k)&#32;{
00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[k+LF].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZE{std::min(LE,NE)};
00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;k{ZE-1}&#32;;&#32;k&#32;&gt;&#32;-1&#32;;&#32;--k)&#32;{
00868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+LF]&gt;arg.m_dc[k+NF])&#32;{
00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[k+LF]&lt;arg.m_dc[k+NF])&#32;{
00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ZF{std::min(LF,NF)};
00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;k{ZF-1}&#32;;&#32;k&#32;&gt;&#32;-1&#32;;&#32;--k)&#32;{
00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[LF-1-k]&gt;arg.m_dc[NF-1-k])&#32;{
00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_dc[LF-1-k]&lt;arg.m_dc[NF-1-k])&#32;{
00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(LF&lt;NF)&#32;{
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;NF-LF&#32;;&#32;++k)&#32;{
00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg[NF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(NF&lt;LF)&#32;{
00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;k{0}&#32;;&#32;k&#32;&lt;&#32;LF-NF&#32;;&#32;++k)&#32;{
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(m_dc[LF-1-k].<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a540a0e700a266a624a295898de9ff8fc">is_0</link>()))&#32;{
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a81d967416f67b9a4c30fbca73b4d2a6c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4dcd2478d4d0f6930a3bafc5159d7e76"/><section>
    <title>operator&gt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*<emphasis role="keyword">this</emphasis>)&gt;=arg.m_dc);
00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2059c242611fae3bb6b65e7313bb7ff5"/><section>
    <title>operator&gt;&gt;()</title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt; (std::size_t n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>DIVIDE BY THE BASE B (/10_B) </para>
</para>
<programlisting linenumbering="unnumbered">01664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&lt;LE+LF)&#32;{
01666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
01667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
01668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.m_dc[ix]&#32;=&#32;cpthis.m_dc[ix+n];
01669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis.m_dc[ix+n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
01672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>{});
01675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2059c242611fae3bb6b65e7313bb7ff5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a04e688baa386601c21f3ad4348205ed8"/><section>
    <title>operator&gt;&gt;=()</title>
<indexterm><primary>operator&gt;&gt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;&gt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;&gt;= (std::size_t n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;LE+LF)&#32;{
01682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int64_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
01683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis.m_dc[ix]&#32;=&#32;cthis.m_dc[ix+n];
01684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis.m_dc[ix+n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;=&#32;(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>{});
01689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a04e688baa386601c21f3ad4348205ed8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a02410bb4d27f15f78c3b3e6bed790547"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (std::int32_t idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((idx&#32;&lt;&#32;LE)&amp;&amp;(std::abs(idx)&#32;&lt;&#32;LF+1))
01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx+LF]);
01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a02410bb4d27f15f78c3b3e6bed790547_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66bc74a435ff3ee2f48a779b285b4045"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>[] (std::int32_t idx)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((idx&#32;&lt;&#32;LE)&amp;&amp;(std::abs(idx)&#32;&lt;&#32;LF+1))
01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_dc[idx+LF]);
01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a66bc74a435ff3ee2f48a779b285b4045_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a85a5e8fd4c769947c919010307e3aa93"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>| (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{*<emphasis role="keyword">this</emphasis>};
01740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;|=&#32;arg;
01741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a85a5e8fd4c769947c919010307e3aa93_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a90bb25d38ca338df232d9dc14a4134a4"/><section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>|= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>BEGIN : OPERATORS | &amp; |= &amp;=. </para>
</para>

<para>REMAINDER BY THE BASE B (%10_B) END : &quot;OPERATORS&quot; REM_B^n AND M_REM_B^n </para>
<programlisting linenumbering="unnumbered">01729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[ix]&#32;|=&#32;arg.m_dc[ix];
01732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
01734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR POR DEFECTO pfx_rat_reg_digs_t&lt;10,3,2&gt; var(); var == nat#0:0:0:s:0:0#B10 </para>
<programlisting linenumbering="unnumbered">00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>()}&#32;{}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
<para>
Referenciado por <link linkend="_l01454">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::add()</link>, <link linkend="_l01237">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::C_B()</link>, <link linkend="_l01228">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::C_Bm1()</link>, <link linkend="_l00432">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::concat()</link>, <link linkend="_l00465">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::concat_inv()</link>, <link linkend="_l01208">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mC_B()</link>, <link linkend="_l01198">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mC_Bm1()</link>, <link linkend="_l01372">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::mult()</link>, <link linkend="_l01245">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator!()</link>, <link linkend="_l01754">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&amp;()</link>, <link linkend="_l01521">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator*()</link>, <link linkend="_l02118">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator*=()</link>, <link linkend="_l01505">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator+()</link>, <link linkend="_l01136">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator++()</link>, <link linkend="_l01276">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator+=()</link>, <link linkend="_l01253">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator-()</link>, <link linkend="_l01166">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator--()</link>, <link linkend="_l01317">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator-=()</link>, <link linkend="_l01631">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&lt;&lt;()</link>, <link linkend="_l01646">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&lt;&lt;=()</link>, <link linkend="_l01043">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&lt;=&gt;()</link>, <link linkend="_l01663">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&gt;&gt;()</link>, <link linkend="_l01678">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator&gt;&gt;=()</link>, <link linkend="_l01737">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::operator|()</link>, <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>, <link linkend="_l00057">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_1()</link>, <link linkend="_l00067">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_B()</link>, <link linkend="_l00062">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_Bm1()</link>, <link linkend="_l00075">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B()</link>, <link linkend="_l00082">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B_m1()</link>, <link linkend="_l01697">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::rem_B()</link>, <link linkend="_l00561">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs()</link>, <link linkend="_l00587">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs_pe()</link>, <link linkend="_l00613">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs_pf()</link>, <link linkend="_l00548">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::subreg_digs()</link>, <link linkend="_l00574">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::subreg_digs_pe()</link>, <link linkend="_l00600">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::subreg_digs_pf()</link> y <link linkend="_l01475">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::subst()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a05f3a766ce29786655fc99812d550fa6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a05f3a766ce29786655fc99812d550fa6_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7afac12b75bf172621e52a8cb1aee74c"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const base_NExNF_t&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS INTERNO </para>
<programlisting linenumbering="unnumbered">00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{move_arg_N&lt;N&gt;(arg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae344ba117479d673748d2e4b54a11e20"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const base_NExNF_t&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COPIA REFERENCIA DESDE UN ARRAY DE DIGITOS INTERNO </para>
<programlisting linenumbering="unnumbered">00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{copy_arg_N&lt;N&gt;(arg)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a57512a8692247ed4c3bfca17504d04bb"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COPIA pfx_rat_reg_digs_t&lt;10,3,2&gt; var{1,3,2,5,6}; pfx_rat_reg_digs_t&lt;10,3,2&gt; var2(var); </para>
<programlisting linenumbering="unnumbered">00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{copy_arg&lt;NE,NF&gt;(arg.m_dc)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a83498b558e3a2707ff1767b5bdf087b4"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR POR LISTA DE DIGITOS pfx_rat_reg_digs_t&lt;10,3,2&gt; var{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>}; var == nat#1:3:2:s:5:6#B10 </para>
<programlisting linenumbering="unnumbered">00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{arg}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae679f5015862a68f635d46d8c4a70892"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&gt;&amp;&amp;...)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const Ts &amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO pfx_rat_reg_digs_t&lt;10,3,2&gt; var(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>); var == nat#1:3:2:5:6#B10 </para>
<programlisting linenumbering="unnumbered">00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_dc{(utility::pack2array&lt;Ts...&gt;{})(args...)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af205ef58ee00a8d89a5504f3638d2f06"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (Ints_type ... dig_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO pfx_rat_reg_digs_t&lt;10,3,2&gt; var{1,3,2,5,6}; var == nat#1:3:2:s:5:6#B10 </para>
<programlisting linenumbering="unnumbered">00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1d2effcd65514535a97572a28c992519">normalize</link>&lt;Ints_type...&gt;(dig_pow_i...)}&#32;{}
</programlisting><para>
Hace referencia a <link linkend="_l00243">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::normalize()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_af205ef58ee00a8d89a5504f3638d2f06_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2447e6e4c5bc27036cb5c0c717c57516"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR MOVIMIENTO pfx_rat_reg_digs_t&lt;10,3,2&gt; var{1,3,2,5,6}; pfx_rat_reg_digs_t&lt;10,3,2&gt; var2(std::move(var)); var queda no sabemos su valor </para>
<programlisting linenumbering="unnumbered">00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc{move_arg&lt;NE,NF&gt;(arg.m_dc)}&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aeb5f53ec7f2fce4b7729ec3a1226c457"/><section>
    <title>put()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>put</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>put</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::put (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t A{}; A.put&lt;2&gt;(B-1-A.get&lt;2&gt;()) [pone un valor en un digito por su indice] </para>
<programlisting linenumbering="unnumbered">01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[I+LF]&#32;=&#32;arg;&#32;<emphasis role="keywordflow">return</emphasis>;
01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a69468bfb93c10666ca820da3d1124f33"/><section>
    <title>put()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>put</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>put</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::put (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_dc[I+LF]&#32;=&#32;std::move(arg);&#32;<emphasis role="keywordflow">return</emphasis>;
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03"/><section>
    <title>regd_0()</title>
<indexterm><primary>regd_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{};
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;dig&#32;:&#32;ret.m_dc)&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dig&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>();
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
<para>
Referenciado por <link linkend="_l00057">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_1()</link>, <link linkend="_l00067">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_B()</link>, <link linkend="_l00062">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_Bm1()</link>, <link linkend="_l00075">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B()</link> y <link linkend="_l01697">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::rem_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a300ccd4144f9f2cdb9979897e14ded03_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a300ccd4144f9f2cdb9979897e14ded03_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4d1b2577021f8594d6efa471234869e0"/><section>
    <title>regd_1()</title>
<indexterm><primary>regd_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link>()};
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[LF]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link> y <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a4d1b2577021f8594d6efa471234869e0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1afc75739252c5a40b233bd12eace8dd16"/><section>
    <title>regd_B()</title>
<indexterm><primary>regd_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link>()};
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[LF+1]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link> y <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_afc75739252c5a40b233bd12eace8dd16_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad70d405111f74e96957daf7e860f0abd"/><section>
    <title>regd_Bm1()</title>
<indexterm><primary>regd_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link>()};
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[LF]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>();
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link>, <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link> y <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad70d405111f74e96957daf7e860f0abd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0fd73bc1e0e7ef8d7e5cfeb2830da7a5"/><section>
    <title>regd_pow_n_B()</title>
<indexterm><primary>regd_pow_n_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link>()};
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[LF+n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>();
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link>, <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link> y <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a0fd73bc1e0e7ef8d7e5cfeb2830da7a5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a010c5902fd8210da63a98c1179be37a7"/><section>
    <title>regd_pow_n_B_m1()</title>
<indexterm><primary>regd_pow_n_B_m1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{};
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{-LF}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[LF+ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(B-1);
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;LE&#32;;&#32;++ix)&#32;{
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[LF+ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(0);
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a010c5902fd8210da63a98c1179be37a7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274"/><section>
    <title>regi_0()</title>
<indexterm><primary>regi_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>ARRAYS DE ENTEROS QUE SON DE AYUDA. </para>
</para>
<programlisting linenumbering="unnumbered{
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;ret{};
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;digint&#32;:&#32;ret)&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digint&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>()();
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>.</para>
<para>
Referenciado por <link linkend="_l00101">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_1()</link>, <link linkend="_l00113">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_B()</link>, <link linkend="_l00107">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_Bm1()</link> y <link linkend="_l00121">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_pow_n_B()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2b72b79cdc0bf99d420fa9ffc812b274_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2b72b79cdc0bf99d420fa9ffc812b274_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a2b45b2f3d26220d33285794c8128a6"/><section>
    <title>regi_1()</title>
<indexterm><primary>regi_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274">regi_0</link>()};
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LF]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()();
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link> y <link linkend="_l00093">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9a2b45b2f3d26220d33285794c8128a6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6d97e8aa88ec3d0b9f81c66de861b915"/><section>
    <title>regi_B()</title>
<indexterm><primary>regi_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274">regi_0</link>()};
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LF+1]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()();
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link> y <link linkend="_l00093">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a6d97e8aa88ec3d0b9f81c66de861b915_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9c1583db7aec52231103595dc69a2a32"/><section>
    <title>regi_Bm1()</title>
<indexterm><primary>regi_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274">regi_0</link>()};
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LF]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>()();
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link> y <link linkend="_l00093">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9c1583db7aec52231103595dc69a2a32_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a993ab098e0e7070f2514b0ebd9b9162e"/><section>
    <title>regi_pow_n_B()</title>
<indexterm><primary>regi_pow_n_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274">regi_0</link>()};
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LF+n]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link>()();
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00037">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_1()</link> y <link linkend="_l00093">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regi_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a993ab098e0e7070f2514b0ebd9b9162e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a86f11292fe859c0c3ef9a580d1b96052"/><section>
    <title>regi_pow_n_B_m1()</title>
<indexterm><primary>regi_pow_n_B_m1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2a56ba266aa59eee3cce6ca18348b6bb">reg_ints_t&lt;LE+LF&gt;</link>&#32;ret{};
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int32_t&#32;ix{-LF}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LF+ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(B-1)();
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::int32_t&#32;ix{n}&#32;;&#32;ix&#32;&lt;&#32;LE&#32;;&#32;++ix)&#32;{
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[LF+ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>(0)();
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5beb2c8c44ad830017acdac79a4e84ad"/><section>
    <title>rem_B()</title>
<indexterm><primary>rem_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rem_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rem_B (std::size_t n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>END : OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;=. </para>
</para>

<para>BEGIN : &quot;OPERATORS&quot; REM_B^n AND M_REM_B^n REMAINDER BY THE BASE B (%10_B) </para>
<programlisting linenumbering="unnumbered">01698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;ret{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link>()};
01700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;LE+LF)&#32;{
01701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;n&#32;;&#32;++ix)&#32;{
01702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.m_dc[ix]&#32;=&#32;m_dc[ix];
01703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link> y <link linkend="_l00050">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::regd_0()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a5beb2c8c44ad830017acdac79a4e84ad_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a206489e66bc07dd845d00c4a6ccb0bdc"/><section>
    <title>rev_subreg_digs()</title>
<indexterm><primary>rev_subreg_digs</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rev_subreg_digs</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;iend-ibegin&gt;&#32;ret{};
00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{iend}&#32;;&#32;ix&#32;&gt;&#32;ibegin-1&#32;;&#32;--ix)&#32;{
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[LE+LF-1-ix];
00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a206489e66bc07dd845d00c4a6ccb0bdc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a3a821c17ddc821a00db5e00b02ea7f77"/><section>
    <title>rev_subreg_digs_pe()</title>
<indexterm><primary>rev_subreg_digs_pe</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rev_subreg_digs_pe</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs_pe ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;iend-ibegin&gt;&#32;ret{};
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{iend}&#32;;&#32;ix&#32;&gt;&#32;ibegin-1&#32;;&#32;--ix)&#32;{
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[LE+LF-1-ix];
00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a3a821c17ddc821a00db5e00b02ea7f77_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad5adcbe25e088551ac817004a9320300"/><section>
    <title>rev_subreg_digs_pf()</title>
<indexterm><primary>rev_subreg_digs_pf</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rev_subreg_digs_pf</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs_pf ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;iend-ibegin&gt;&#32;ret{};
00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{iend}&#32;;&#32;ix&#32;&gt;&#32;ibegin-1&#32;;&#32;--ix)&#32;{
00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[LF-1-ix];
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad5adcbe25e088551ac817004a9320300_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa93bfacedfc35b410d1eb6f1e74ffe55"/><section>
    <title>subreg_digs()</title>
<indexterm><primary>subreg_digs</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subreg_digs</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subreg_digs ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;iend-ibegin&gt;&#32;ret{};
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{ibegin}&#32;;&#32;ix&#32;&lt;&#32;iend&#32;;&#32;++ix)&#32;{
00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[ix];
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_aa93bfacedfc35b410d1eb6f1e74ffe55_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6fa675710cb0e3a25d2b46b601516149"/><section>
    <title>subreg_digs_pe()</title>
<indexterm><primary>subreg_digs_pe</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subreg_digs_pe</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subreg_digs_pe ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;iend-ibegin&gt;&#32;ret{};
00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{ibegin}&#32;;&#32;ix&#32;&lt;&#32;iend&#32;;&#32;++ix)&#32;{
00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[ix];
00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a6fa675710cb0e3a25d2b46b601516149_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a826d5ada30ddfb3bd85e38a3b9231ed9"/><section>
    <title>subreg_digs_pf()</title>
<indexterm><primary>subreg_digs_pf</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subreg_digs_pf</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subreg_digs_pf ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reg_N_digs_t&lt;iend-ibegin&gt;&#32;ret{};
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{ibegin}&#32;;&#32;ix&#32;&lt;&#32;iend&#32;;&#32;++ix)&#32;{
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[ix-ibegin]&#32;=&#32;cthis[ix];
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a826d5ada30ddfb3bd85e38a3b9231ed9_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6551f10097dd07df063b87fc1a007fd8"/><section>
    <title>subst()</title>
<indexterm><primary>subst</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subst</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subst (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>TO DO REPASAR &apos;@&apos; = &apos;-&apos; </para>
<programlisting linenumbering="unnumbered">01476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
01478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;pfx_rat_reg_digs_t,2&gt;&#32;result{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>(),cthis};
01479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&#32;cb_arg{-arg};
01480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(arg.is_0()))&#32;{
01481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{1}&#32;;&#32;ix&#32;&lt;&#32;L&#32;;&#32;++ix)&#32;{
01482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cb_arg.m_dc[ix]&#32;=&#32;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link>();
01483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;carry{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link>()};
01486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;ix{0}&#32;;&#32;ix&#32;&lt;&#32;LE+LF&#32;;&#32;++ix)&#32;{
01487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&#32;&#32;&#32;temp_result&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;result[0].m_dc[ix].add(cb_arg[ix]);
01488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&#32;temp_result_2&#32;=&#32;&#32;&#32;&#32;&#32;&#32;temp_result[0].add(carry);
01489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[0].m_dc[ix]&#32;&#32;=&#32;temp_result_2[0];
01490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[1].m_dc[ix]&#32;&#32;=&#32;(temp_result_2[1].add(temp_result_2[1]))[0];
01491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;carry&#32;=&#32;result[1].m_dc[ix];
01492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
01494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00036">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_0()</link>, <link linkend="_l00038">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::dig_Bm1()</link> y <link linkend="_l00151">NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a6551f10097dd07df063b87fc1a007fd8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a94e5d24230e61c14c2590893f435ef06"/><section>
    <title>sui_B()</title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00045 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab5167455e73179baf8deaccf40901063"/><section>
    <title>sui_Bp1()</title>
<indexterm><primary>sui_Bp1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>sui_Bp1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::sui_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00046 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::sui_B()+1;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab9e34bb3a8d955badd3498d51d5e62f4"/><section>
    <title>ui_0()</title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00042 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_0();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adbeecd9a334cb9c990bca8c7878e19ea"/><section>
    <title>ui_1()</title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00043 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abf72096e6dd350d74f05124d4bf07e3a"/><section>
    <title>ui_Bm1()</title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00044 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_Bm1();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a470670e3e267bb42318f77ed70a7f42d"/><section>
    <title>ui_max()</title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00048 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_max();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ca499b70aaa1d53917b468c09ad6968"/><section>
    <title>ui_submax()</title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;type_traits::allowable_base_type_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00047 {<emphasis role="keywordflow">return</emphasis>&#32;dig_t::ui_submax();}
</programlisting></section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_nat__rat__fixed__reg__t_8hpp">nat_rat_fixed_reg_t.hpp</link></section>
</section>
