<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceutilities_1_1special" xml:lang="es">
<title>Referencia del Namespace utilities::special</title>
<indexterm><primary>utilities::special</primary></indexterm>
<simplesect>
    <title>Clases    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link></para>

<para>FORMA ANTIGUA PERO SEGURA DE CONSEGUIR POTENCIAS DE UNA BASE EN COMPILE TIME. </para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_010_01_4">pow_B_to_E_t&lt; Base, 0 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_011_01_4">pow_B_to_E_t&lt; Base, 1 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_012_01_4">pow_B_to_E_t&lt; Base, 2 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1tuple__builder__t">tuple_builder_t</link></para>

<para>TEMPLATE GENERAL. </para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21">tuple_builder_t&lt; BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</link></para>

<para>ESPECIALIZACION DONDE INTOBJ_CT == BEGININTOBJ_CT. </para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802">tuple_builder_t&lt; EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</link></para>

<para>ESPECIALIZACION DONDE INTOBJ_CT == ENDINTOBJ_CT-1. </para>
</listitem>
            <listitem><para>struct <link linkend="_structutilities_1_1special_1_1tuple__user__constructor__t">tuple_user_constructor_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Funciones    </title>
        <itemizedlist>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> B, <link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> L&gt; </para><para>consteval <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link> <link linkend="_namespaceutilities_1_1special_1a3645f9215c31596f25430e9c722eef17">Base_pow_to_Size</link> () noexcept</para>

<para>FORMA SENCILLA DE CONSEGUIR POTENCIAS DE UNA BASE EN COMPILE TIME. </para>
</listitem>
            <listitem><para>template&lt;std::size_t start, std::size_t Base, std::size_t ... Is, template&lt; std::size_t, std::size_t &gt; typename Funct_tt, typename ... Ts&gt; </para><para>constexpr void <link linkend="_namespaceutilities_1_1special_1a600ef880527fb943066e81d144a572d4">ctf_helper</link> (std::index_sequence&lt; Is... &gt;, std::tuple&lt; Ts... &gt; const &amp;t) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t start, std::size_t end, std::size_t Base, template&lt; typename, std::size_t, std::size_t &gt; typename Funct_tt, typename ... Ts&gt; </para><para>constexpr void <link linkend="_namespaceutilities_1_1special_1a450a92504b01e717cfe785076cf97b93">ct_for</link> (std::tuple&lt; Ts... &gt; const &amp;t) noexcept</para>
</listitem>
            <listitem><para>template&lt;auto B, auto L, typename A &gt; </para><para>constexpr <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link> <link linkend="_namespaceutilities_1_1special_1a92614fb496f783431fe229a771f40a00">conversion_to_int</link> (const A &amp;arg) noexcept</para>

<para>CONVERSION DE REGISTRO DE DIGITOS A ENTERO EN TIEMPO DE COMPILACION. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> Base, <link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> Exp&gt; </para><para>constexpr <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link> <link linkend="_namespaceutilities_1_1special_1a0c24705b4d3cfd27689f38201488c087">Pow_B2L_v</link> = <link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&lt;Base,Exp&gt;::value</para>
</listitem>
            <listitem><para>template&lt;std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </para><para>constexpr auto <link linkend="_namespaceutilities_1_1special_1ada5efac888ec6774ade3b0ff5911cb89">tuple_constr_v</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>

<para>LA LLAMADA &quot;REAL&quot; ES <literallayout><computeroutput>            assign_with_order(dest,args...);
</computeroutput></literallayout> donde los &quot;args&quot; son de tipo &quot;Ts&quot; (que es uno solo, todos iguales entre si) </para>
</section>
<section>
<title>Documentación de las funciones</title>
<anchor xml:id="_namespaceutilities_1_1special_1a3645f9215c31596f25430e9c722eef17"/><section>
    <title>Base_pow_to_Size()</title>
<indexterm><primary>Base_pow_to_Size</primary><secondary>utilities::special</secondary></indexterm>
<indexterm><primary>utilities::special</primary><secondary>Base_pow_to_Size</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> B, <link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link> utilities::special::Base_pow_to_Size ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>FORMA SENCILLA DE CONSEGUIR POTENCIAS DE UNA BASE EN COMPILE TIME. </para>
</para>
<para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00179">179</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespaceutilities_1_1special_a3645f9215c31596f25430e9c722eef17_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespaceutilities_1_1special_a3645f9215c31596f25430e9c722eef17_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespaceutilities_1_1special_1a92614fb496f783431fe229a771f40a00"/><section>
    <title>conversion_to_int()</title>
<indexterm><primary>conversion_to_int</primary><secondary>utilities::special</secondary></indexterm>
<indexterm><primary>utilities::special</primary><secondary>conversion_to_int</secondary></indexterm>
<computeroutput>template&lt;auto B, auto L, typename A &gt; </computeroutput><para><computeroutput>constexpr <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link> utilities::special::conversion_to_int (const A &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONVERSION DE REGISTRO DE DIGITOS A ENTERO EN TIEMPO DE COMPILACION. </para>
</para>
<para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00382">382</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_namespaceutilities_1_1special_1a450a92504b01e717cfe785076cf97b93"/><section>
    <title>ct_for()</title>
<indexterm><primary>ct_for</primary><secondary>utilities::special</secondary></indexterm>
<indexterm><primary>utilities::special</primary><secondary>ct_for</secondary></indexterm>
<computeroutput>template&lt;std::size_t start, std::size_t end, std::size_t Base, template&lt; typename, std::size_t, std::size_t &gt; typename Funct_tt, typename ... Ts&gt; </computeroutput><para><computeroutput>constexpr void utilities::special::ct_for (std::tuple&lt; Ts... &gt; const &amp; t)<computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00374">374</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_namespaceutilities_1_1special_1a600ef880527fb943066e81d144a572d4"/><section>
    <title>ctf_helper()</title>
<indexterm><primary>ctf_helper</primary><secondary>utilities::special</secondary></indexterm>
<indexterm><primary>utilities::special</primary><secondary>ctf_helper</secondary></indexterm>
<computeroutput>template&lt;std::size_t start, std::size_t Base, std::size_t ... Is, template&lt; std::size_t, std::size_t &gt; typename Funct_tt, typename ... Ts&gt; </computeroutput><para><computeroutput>constexpr void utilities::special::ctf_helper (std::index_sequence&lt; Is... &gt; , std::tuple&lt; Ts... &gt; const &amp; t)<computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00355">355</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las variables</title>
<anchor xml:id="_namespaceutilities_1_1special_1a0c24705b4d3cfd27689f38201488c087"/><section>
    <title>Pow_B2L_v</title>
<indexterm><primary>Pow_B2L_v</primary><secondary>utilities::special</secondary></indexterm>
<indexterm><primary>utilities::special</primary><secondary>Pow_B2L_v</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> Base, <link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">NumRepr::usint_t</link> Exp&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link> utilities::special::Pow_B2L_v = <link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&lt;Base,Exp&gt;::value<computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00218">218</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_namespaceutilities_1_1special_1ada5efac888ec6774ade3b0ff5911cb89"/><section>
    <title>tuple_constr_v</title>
<indexterm><primary>tuple_constr_v</primary><secondary>utilities::special</secondary></indexterm>
<indexterm><primary>utilities::special</primary><secondary>tuple_constr_v</secondary></indexterm>
<computeroutput>template&lt;std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>constexpr auto utilities::special::tuple_constr_v<computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Valor inicial:</emphasis><programlisting linenumbering="unnumbered">=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tuple_user_constructor_t&lt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeginIntObj_ct,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndIntObj_ct,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Base,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Funct_tt
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;::build()
</programlisting><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00336">336</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
</section>
</section>
