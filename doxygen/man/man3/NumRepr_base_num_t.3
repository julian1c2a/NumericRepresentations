.TH "NumRepr::base_num_t< UINT_T, B >" 3 "Lunes, 2 de Enero de 2023" "NumericRepresentations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NumRepr::base_num_t< UINT_T, B >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <base_num_t\&.hpp>\fP
.PP
Herencias basic_string< dig_t< UINT_T, B > >\&.
.SS "Tipos públicos"

.in +1c
.ti -1c
.RI "using \fBdig_t\fP = \fBdig_t\fP< UINT_T, B >"
.br
.ti -1c
.RI "using \fBbase_t\fP = basic_string< \fBdig_t\fP >"
.br
.ti -1c
.RI "using \fBstr_iterator\fP = typename base_t::iterator"
.br
.ti -1c
.RI "using \fBc_str_iterator\fP = typename base_t::const_iterator"
.br
.ti -1c
.RI "using \fBr_str_iterator\fP = typename base_t::reverse_iterator"
.br
.ti -1c
.RI "using \fBcr_str_iterator\fP = typename base_t::const_reverse_iterator"
.br
.in -1c
.SS "Métodos públicos"

.in +1c
.ti -1c
.RI "constexpr \fBsize_t\fP \fBsize\fP () const noexcept"
.br
.ti -1c
.RI "constexpr void \fBresize\fP (\fBsize_t\fP arg) noexcept"
.br
.ti -1c
.RI "constexpr \fBdig_t\fP \fBoperator[]\fP (ullint arg) const noexcept"
.br
.ti -1c
.RI "constexpr \fBdig_t\fP & \fBoperator[]\fP (ullint arg) noexcept"
.br
.ti -1c
.RI "constexpr void \fBclear\fP () noexcept"
.br
.ti -1c
.RI "constexpr void \fBpush_back\fP (\fBdig_t\fP arg) noexcept"
.br
.ti -1c
.RI "constexpr void \fBinsert\fP (\fBsize_t\fP pos, \fBsize_t\fP tam, \fBdig_t\fP parg) noexcept"
.br
.ti -1c
.RI "constexpr num_basic_t \fBsubstr\fP (\fBsize_t\fP pos, \fBsize_t\fP n) const noexcept"
.br
.ti -1c
.RI "constexpr void \fBpush_front\fP (\fBdig_t\fP parg) noexcept"
.br
.ti -1c
.RI "constexpr \fBstr_iterator\fP \fBbegin\fP () noexcept"
.br
.ti -1c
.RI "constexpr \fBc_str_iterator\fP \fBend\fP () const noexcept"
.br
.ti -1c
.RI "constexpr \fBr_str_iterator\fP \fBrbegin\fP () noexcept"
.br
.ti -1c
.RI "constexpr \fBcr_str_iterator\fP \fBrend\fP () const noexcept"
.br
.ti -1c
.RI "constexpr void \fBerase\fP (\fBsize_t\fP pos, \fBsize_t\fP tam) noexcept"
.br
.ti -1c
.RI "constexpr const num_basic_t & \fBoperator&=\fP (const num_basic_t &arg) noexcept"
.br
.in -1c
.SH "Descripción detallada"
.PP 

.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B>
.br
requires (\fBtype_traits::suitable_base\fP<UINT_T,B>())
.br
struct NumRepr::base_num_t< UINT_T, B >"
.PP
Definición en la línea \fB10\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SH "Documentación de los 'Typedef' miembros de la clase"
.PP 
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> using \fBNumRepr::base_num_t\fP< UINT_T, B >::base_t =  basic_string<\fBdig_t\fP>"

.PP
Definición en la línea \fB13\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> using \fBNumRepr::base_num_t\fP< UINT_T, B >::c_str_iterator =  typename base_t::const_iterator"

.PP
Definición en la línea \fB15\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> using \fBNumRepr::base_num_t\fP< UINT_T, B >::cr_str_iterator =  typename base_t::const_reverse_iterator"

.PP
Definición en la línea \fB17\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> using \fBNumRepr::base_num_t\fP< UINT_T, B >::dig_t =  \fBdig_t\fP<UINT_T,B>"

.PP
Definición en la línea \fB12\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> using \fBNumRepr::base_num_t\fP< UINT_T, B >::r_str_iterator =  typename base_t::reverse_iterator"

.PP
Definición en la línea \fB16\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> using \fBNumRepr::base_num_t\fP< UINT_T, B >::str_iterator =  typename base_t::iterator"

.PP
Definición en la línea \fB14\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SH "Documentación de las funciones miembro"
.PP 
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBstr_iterator\fP \fBNumRepr::base_num_t\fP< UINT_T, B >::begin ()\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB51\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr void \fBNumRepr::base_num_t\fP< UINT_T, B >::clear ()\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB33\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBc_str_iterator\fP \fBNumRepr::base_num_t\fP< UINT_T, B >::end () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB54\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr void \fBNumRepr::base_num_t\fP< UINT_T, B >::erase (\fBsize_t\fP pos, \fBsize_t\fP tam)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB63\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr void \fBNumRepr::base_num_t\fP< UINT_T, B >::insert (\fBsize_t\fP pos, \fBsize_t\fP tam, \fBdig_t\fP parg)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB39\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr const num_basic_t & \fBNumRepr::base_num_t\fP< UINT_T, B >::operator&= (const num_basic_t & arg)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB67\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBdig_t\fP \fBNumRepr::base_num_t\fP< UINT_T, B >::operator[] (ullint arg) const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB25\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBdig_t\fP & \fBNumRepr::base_num_t\fP< UINT_T, B >::operator[] (ullint arg)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB29\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr void \fBNumRepr::base_num_t\fP< UINT_T, B >::push_back (\fBdig_t\fP arg)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB36\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr void \fBNumRepr::base_num_t\fP< UINT_T, B >::push_front (\fBdig_t\fP parg)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB48\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBr_str_iterator\fP \fBNumRepr::base_num_t\fP< UINT_T, B >::rbegin ()\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB57\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBcr_str_iterator\fP \fBNumRepr::base_num_t\fP< UINT_T, B >::rend () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB60\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr void \fBNumRepr::base_num_t\fP< UINT_T, B >::resize (\fBsize_t\fP arg)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB22\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr \fBsize_t\fP \fBNumRepr::base_num_t\fP< UINT_T, B >::size () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB19\fP del archivo \fBbase_num_t\&.hpp\fP\&.
.SS "template<type_traits::uint_type_for_radix_c UINT_T, UINT_T B> constexpr num_basic_t \fBNumRepr::base_num_t\fP< UINT_T, B >::substr (\fBsize_t\fP pos, \fBsize_t\fP n) const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB43\fP del archivo \fBbase_num_t\&.hpp\fP\&.

.SH "Autor"
.PP 
Generado automáticamente por Doxygen para NumericRepresentations del código fuente\&.
