<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace_num_repr_1_1type__traits" xml:lang="es">
<title>Referencia del Namespace NumRepr::type_traits</title>
<indexterm><primary>NumRepr::type_traits</primary></indexterm>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace_num_repr_1_1type__traits_1_1ugly__details__for__greater__suitable__type__deduction">ugly_details_for_greater_suitable_type_deduction</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_num_repr_1_1type__traits_1_1ugly__details__for__suitable__type__deduction">ugly_details_for_suitable_type_deduction</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_num_repr_1_1type__traits_1_1ugly__details__sig___s_int__for___u_int">ugly_details_sig_SInt_for_UInt</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_num_repr_1_1type__traits_1_1ugly__details___s_int__for___s_int">ugly_details_SInt_for_SInt</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_num_repr_1_1type__traits_1_1ugly__details___u_int__for___s_int">ugly_details_UInt_for_SInt</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_num_repr_1_1type__traits_1_1ugly__details___u_int__for___u_int">ugly_details_UInt_for_UInt</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Concepts    </title>
        <itemizedlist>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1arith__integral__c">arith_integral_c</link></para>

<para>TYPE_TRAITS AND CONCEPTS. </para>
</listitem>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1arith__natural__c">arith_natural_c</link></para>
</listitem>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1char__type__c">char_type_c</link></para>
</listitem>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1uint__type__for__radix__c">uint_type_for_radix_c</link></para>

<para>CONCEPT FOR UNSIGNED INTEGRAL TYPES VALID FOR THE RADIX. </para>
</listitem>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1unsigned__integral__c">unsigned_integral_c</link></para>

<para>CONCEPT FOR UNSIGNED INTEGRAL TYPES. </para>
</listitem>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1signed__integral__c">signed_integral_c</link></para>

<para>CONCEPT FOR SIGNED INTEGRAL TYPES. </para>
</listitem>
            <listitem><para>concept <link linkend="_concept_num_repr_1_1type__traits_1_1integral__c">integral_c</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename UInt_t &gt; </para><para>using <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">sig_UInt_for_UInt_t</link> = typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details___u_int__for___u_int_1_1____sig___u_int__for___u_int__t">ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t</link>&lt; UInt_t &gt;::type</para>
</listitem>
            <listitem><para>template&lt;typename UInt_t &gt; </para><para>using <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">sig_SInt_for_UInt_t</link> = typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details__sig___s_int__for___u_int_1_1____sig___s_int__for___u_int__t">ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t</link>&lt; UInt_t &gt;::type</para>
</listitem>
            <listitem><para>template&lt;typename Int_t &gt; </para><para>using <link linkend="_namespace_num_repr_1_1type__traits_1a226e1d44325e03fdc352423b88728bbb">sig_UInt_for_SInt_t</link> = typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details___u_int__for___s_int_1_1____sig___u_int__for___s_int__t">ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t</link>&lt; Int_t &gt;::type</para>
</listitem>
            <listitem><para>template&lt;typename SInt_t &gt; </para><para>using <link linkend="_namespace_num_repr_1_1type__traits_1ae5b5b95ff51b595abc85525d9ce48150">sig_SInt_for_SInt_t</link> = typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details___s_int__for___s_int_1_1____sig___s_int__for___s_int__t">ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t</link>&lt; SInt_t &gt;::type</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1ad76647f24e00f176e977848784fb7826">ullint_t</link> Radix&gt; </para><para>using <link linkend="_namespace_num_repr_1_1type__traits_1a4bda2ea1083d135a865f451a7968fe7b">TypeFromIntNumber_t</link> = typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details__for__suitable__type__deduction_1_1_u_int_type_for_radix">UIntTypeForRadix</link>&lt; decltype(Radix), Radix &gt;::UIntType</para>
</listitem>
            <listitem><para>template&lt;integral_c IntType, IntType Radix&gt; </para><para>using <link linkend="_namespace_num_repr_1_1type__traits_1ab19d1b291fb456e9c4d734340c99152e">GreaterTypeFromIntNumber_t</link> = typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details__for__greater__suitable__type__deduction_1_1_u_e73c7ba18a323e7d8eda21299da56319">UIntTypeForRadixContainsMultResult</link>&lt; decltype(Radix), Radix &gt;::UIntType</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Funciones    </title>
        <itemizedlist>
            <listitem><para>char * <link linkend="_namespace_num_repr_1_1type__traits_1a167f2f4507b6f1cbc6fd15d365570c1f">clear_ccad</link> (char *, <link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">usint_t</link>)</para>
</listitem>
            <listitem><para>template&lt;template&lt; <link linkend="_namespace_num_repr_1a83d6ad1f5b09abca3ed6fd6281ee4d5f">uchint_t</link> B &gt; class T, <link linkend="_namespace_num_repr_1a83d6ad1f5b09abca3ed6fd6281ee4d5f">uchint_t</link> B&gt; </para><para>constexpr const char * <link linkend="_namespace_num_repr_1_1type__traits_1a88d9d80805fd8fe7d5662340a7e92344">devCadenaC</link> (T&lt; B &gt; arg, std::size_t long_ccad=64) noexcept</para>
</listitem>
            <listitem><para>constexpr char * <link linkend="_namespace_num_repr_1_1type__traits_1a234b3a7127ab242615f060f6d137995e">clear_ccad</link> (char *cad_c, std::size_t long_de_cad_c) noexcept</para>
</listitem>
            <listitem><para>constexpr unsigned long long <link linkend="_namespace_num_repr_1_1type__traits_1a195d25ead4c5c820f8a04e30205ed306">atoull</link> (char *text) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">maxbase</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1ae6c52c70d58ecbc58b9ce8ddeff3c42e">submaxbase</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a1a5c6f8a01fa8a777470dd479b3ae87a">minbase</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1ae6d7996db2b7cdee98b72342bc0f976b">subminbase</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a3265677e1277882355b102f90ce5fc69">monobase</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a1d046b3da7103b9ca5a7dacb674f49f0">nobase</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1addc313fbab4434c736167b0510d95a97">maxdigit</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a7197bd8a89fcc647c18b49f63a1b49f5">submaxdigit</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a8c8928703a18d48613b88d4eee0e967a">digit_0</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1ad0267c5c18b47ea7d823e17e735d1e42">digit_1</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1ad3c536f8264351b7aa3d9bd8e648d2e2">base_2</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T , UINT_T B&gt; </para><para>consteval bool <link linkend="_namespace_num_repr_1_1type__traits_1a7fe2595394f638eb83fc857ba0076f09">base_geqt_2</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T , UINT_T B&gt; </para><para>consteval bool <link linkend="_namespace_num_repr_1_1type__traits_1a10f4b5abfc1e0a202341bf4481596e66">base_leqt_max</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T , UINT_T B&gt; </para><para>consteval bool <link linkend="_namespace_num_repr_1_1type__traits_1ae7b0da6237614a2d93ed8d40ee5596a5">suitable_base</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1ab7aafe6bcb405d5c200145181755984f">middle_max</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>consteval UINT_T <link linkend="_namespace_num_repr_1_1type__traits_1a9c68ad4f3469998252d88633edf8e908">sqrt_max</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>template&lt;char_type_c CharT&gt; </para><para>constexpr CharT <link linkend="_namespace_num_repr_1_1type__traits_1a3c2cd8d77157f93388df22fc683352c6">nullchar</link> {CharT(&apos;\0&apos;)}</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a25a6c0b36e21a705612679155c625fea">is_uint_type_for_radix_v</link> = std::is_unsigned_v&lt;UINT_T&gt; &amp;&amp; (! std::is_same_v&lt;UINT_T,<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">uint128_t</link>&gt;)</para>
</listitem>
            <listitem><para>template&lt;typename UINT_T &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a14ca6c2ae135eb7b3434518245aa6e32">is_unsigned_type_v</link></para>
</listitem>
            <listitem><para>template&lt;typename SINT_T &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1ac835cd50de7fc16126659350e707d90b">is_signed_type_v</link> = std::is_signed_v&lt;SINT_T&gt;</para>

<para>METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES SIGNED. </para>
</listitem>
            <listitem><para>template&lt;typename INT_TYPE &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a70c8833df04d2280e43efc6c786255d5">is_integral_type_v</link> = std::is_integral_v&lt;INT_TYPE&gt;</para>

<para>METAOPERADOR QUE NOS DA SI UN TIPO ES INTEGRAL. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename S &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a630fe884d2ee01fc50ace1a6caada422">eq_sz_v</link> = (sizeof(T) == sizeof(S))</para>

<para>METAOPERADORES DE COMPARACION DE CAPACIDAD DE INTEGERS. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename S &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1ac18e09ed303195401d9c8761d19c445d">gt_sz_v</link> = (sizeof(T) &gt; sizeof(S))</para>
</listitem>
            <listitem><para>template&lt;typename T , typename S &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a8f400870614660673c711d0901466df9">lt_sz_v</link> = (sizeof(T) &lt; sizeof(S))</para>
</listitem>
            <listitem><para>template&lt;typename T , typename S &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a960a0fb19a2a30ba524a3d5243973f4f">ge_sz_v</link> = <link linkend="_namespace_num_repr_1_1type__traits_1ac18e09ed303195401d9c8761d19c445d">gt_sz_v</link>&lt;T,S&gt;||<link linkend="_namespace_num_repr_1_1type__traits_1a630fe884d2ee01fc50ace1a6caada422">eq_sz_v</link>&lt;T,S&gt;</para>
</listitem>
            <listitem><para>template&lt;typename T , typename S &gt; </para><para>constexpr bool <link linkend="_namespace_num_repr_1_1type__traits_1a26bf1fb2c8481ad4420be9bd6e46f474">le_sz_v</link> = <link linkend="_namespace_num_repr_1_1type__traits_1a8f400870614660673c711d0901466df9">lt_sz_v</link>&lt;T,S&gt;||<link linkend="_namespace_num_repr_1_1type__traits_1a630fe884d2ee01fc50ace1a6caada422">eq_sz_v</link>&lt;T,S&gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Documentación de los &apos;typedefs&apos;</title>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ab19d1b291fb456e9c4d734340c99152e"/><section>
    <title>GreaterTypeFromIntNumber_t</title>
<indexterm><primary>GreaterTypeFromIntNumber_t</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>GreaterTypeFromIntNumber_t</secondary></indexterm>
<computeroutput>template&lt;integral_c IntType, IntType Radix&gt; </computeroutput><para><computeroutput>using <link linkend="_namespace_num_repr_1_1type__traits_1ab19d1b291fb456e9c4d734340c99152e">NumRepr::type_traits::GreaterTypeFromIntNumber_t</link> = typedef typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details__for__greater__suitable__type__deduction_1_1_u_e73c7ba18a323e7d8eda21299da56319">UIntTypeForRadixContainsMultResult</link>&lt;decltype(Radix),Radix&gt;::UIntType</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00671">671</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ae5b5b95ff51b595abc85525d9ce48150"/><section>
    <title>sig_SInt_for_SInt_t</title>
<indexterm><primary>sig_SInt_for_SInt_t</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>sig_SInt_for_SInt_t</secondary></indexterm>
<computeroutput>template&lt;typename SInt_t &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace_num_repr_1_1type__traits_1ae5b5b95ff51b595abc85525d9ce48150">NumRepr::type_traits::sig_SInt_for_SInt_t</link> = typedef typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details___s_int__for___s_int_1_1____sig___s_int__for___s_int__t">ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t</link>&lt;SInt_t&gt;::type</computeroutput></para>
<para>METAFUNCIONES PARA DAR CON LOS MAXIMOS NUMEROS QUE CABEN EN UN TIPO Y SIMILARES </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00472">472</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649"/><section>
    <title>sig_SInt_for_UInt_t</title>
<indexterm><primary>sig_SInt_for_UInt_t</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>sig_SInt_for_UInt_t</secondary></indexterm>
<computeroutput>template&lt;typename UInt_t &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">NumRepr::type_traits::sig_SInt_for_UInt_t</link> = typedef typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details__sig___s_int__for___u_int_1_1____sig___s_int__for___u_int__t">ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t</link>&lt;UInt_t&gt;::type</computeroutput></para>
<para>METAFUNCION : DA EL SIGUIENTE TIPO NATURAL PARA EL ACTUAL TIPO ENTERO POR ESPECIALIZACION EXPLICITA </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00363">363</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a226e1d44325e03fdc352423b88728bbb"/><section>
    <title>sig_UInt_for_SInt_t</title>
<indexterm><primary>sig_UInt_for_SInt_t</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>sig_UInt_for_SInt_t</secondary></indexterm>
<computeroutput>template&lt;typename Int_t &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace_num_repr_1_1type__traits_1a226e1d44325e03fdc352423b88728bbb">NumRepr::type_traits::sig_UInt_for_SInt_t</link> = typedef typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details___u_int__for___s_int_1_1____sig___u_int__for___s_int__t">ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t</link>&lt;Int_t&gt;::type</computeroutput></para>
<para>METAFUNCION : DA EL SIGUIENTE TIPO ENTERO PARA EL ACTUAL TIPO ENTERO POR ESPECIALIZACION EXPLICITA </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00401">401</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b"/><section>
    <title>sig_UInt_for_UInt_t</title>
<indexterm><primary>sig_UInt_for_UInt_t</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>sig_UInt_for_UInt_t</secondary></indexterm>
<computeroutput>template&lt;typename UInt_t &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">NumRepr::type_traits::sig_UInt_for_UInt_t</link> = typedef typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details___u_int__for___u_int_1_1____sig___u_int__for___u_int__t">ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t</link>&lt;UInt_t&gt;::type</computeroutput></para>
<para>METAFUNCION : DA EL SIGUIENTE TIPO ENTERO PARA EL ACTUAL TIPO NATURAL POR ESPECIALIZACION EXPLICITA </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00288">288</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a4bda2ea1083d135a865f451a7968fe7b"/><section>
    <title>TypeFromIntNumber_t</title>
<indexterm><primary>TypeFromIntNumber_t</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>TypeFromIntNumber_t</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespace_num_repr_1ad76647f24e00f176e977848784fb7826">ullint_t</link> Radix&gt; </computeroutput><para><computeroutput>using <link linkend="_namespace_num_repr_1_1type__traits_1a4bda2ea1083d135a865f451a7968fe7b">NumRepr::type_traits::TypeFromIntNumber_t</link> = typedef typename <link linkend="_struct_num_repr_1_1type__traits_1_1ugly__details__for__suitable__type__deduction_1_1_u_int_type_for_radix">UIntTypeForRadix</link>&lt;decltype(Radix),Radix&gt;::UIntType</computeroutput></para>
<para>QUEREMOS FABRICAR LA METAFUNCION TypeFromIntNumberLTSqrtMaxOfType_t&lt;numero&gt; QUE DEVUELVA EL TIPO ENTERO SIN SIGNO MAS PEQUENO PARA EL NUMERO numero TAL QUE SQRT(TYPE::MAX())&gt;=B-1 </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00620">620</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las funciones</title>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a195d25ead4c5c820f8a04e30205ed306"/><section>
    <title>atoull()</title>
<indexterm><primary>atoull</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>atoull</secondary></indexterm>
<para><computeroutput>constexpr unsigned long long NumRepr::type_traits::atoull (char * text)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00156">156</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ad3c536f8264351b7aa3d9bd8e648d2e2"/><section>
    <title>base_2()</title>
<indexterm><primary>base_2</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>base_2</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::base_2 ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00528">528</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a7fe2595394f638eb83fc857ba0076f09"/><section>
    <title>base_geqt_2()</title>
<indexterm><primary>base_geqt_2</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>base_geqt_2</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T , UINT_T B&gt; </computeroutput><para><computeroutput>consteval bool NumRepr::type_traits::base_geqt_2 ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00533">533</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a10f4b5abfc1e0a202341bf4481596e66"/><section>
    <title>base_leqt_max()</title>
<indexterm><primary>base_leqt_max</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>base_leqt_max</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T , UINT_T B&gt; </computeroutput><para><computeroutput>consteval bool NumRepr::type_traits::base_leqt_max ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00538">538</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a167f2f4507b6f1cbc6fd15d365570c1f"/><section>
    <title>clear_ccad()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>clear_ccad</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>clear_ccad</secondary></indexterm>
<para><computeroutput>char * NumRepr::type_traits::clear_ccad (char * , <link linkend="_namespace_num_repr_1ac6c7f4dbb7298c676dd9f9b94e887f2a">usint_t</link> )</computeroutput></para>Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_num_repr_1_1type__traits_a167f2f4507b6f1cbc6fd15d365570c1f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a234b3a7127ab242615f060f6d137995e"/><section>
    <title>clear_ccad()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>clear_ccad</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>clear_ccad</secondary></indexterm>
<para><computeroutput>constexpr char * NumRepr::type_traits::clear_ccad (char * cad_c, std::size_t long_de_cad_c)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00149">149</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a88d9d80805fd8fe7d5662340a7e92344"/><section>
    <title>devCadenaC()</title>
<indexterm><primary>devCadenaC</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>devCadenaC</secondary></indexterm>
<computeroutput>template&lt;template&lt; <link linkend="_namespace_num_repr_1a83d6ad1f5b09abca3ed6fd6281ee4d5f">uchint_t</link> B &gt; class T, <link linkend="_namespace_num_repr_1a83d6ad1f5b09abca3ed6fd6281ee4d5f">uchint_t</link> B&gt; </computeroutput><para><computeroutput>constexpr const char * NumRepr::type_traits::devCadenaC (T&lt; B &gt; arg, std::size_t long_ccad = <computeroutput>64</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00132">132</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_num_repr_1_1type__traits_a88d9d80805fd8fe7d5662340a7e92344_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a8c8928703a18d48613b88d4eee0e967a"/><section>
    <title>digit_0()</title>
<indexterm><primary>digit_0</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>digit_0</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::digit_0 ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00518">518</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ad0267c5c18b47ea7d823e17e735d1e42"/><section>
    <title>digit_1()</title>
<indexterm><primary>digit_1</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>digit_1</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::digit_1 ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00523">523</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506"/><section>
    <title>maxbase()</title>
<indexterm><primary>maxbase</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>maxbase</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::maxbase ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00478">478</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_num_repr_1_1type__traits_a4f0f4b9cd9964b406c8299bcbd74f506_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1addc313fbab4434c736167b0510d95a97"/><section>
    <title>maxdigit()</title>
<indexterm><primary>maxdigit</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>maxdigit</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::maxdigit ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00508">508</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ab7aafe6bcb405d5c200145181755984f"/><section>
    <title>middle_max()</title>
<indexterm><primary>middle_max</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>middle_max</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::middle_max ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00548">548</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_num_repr_1_1type__traits_ab7aafe6bcb405d5c200145181755984f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a1a5c6f8a01fa8a777470dd479b3ae87a"/><section>
    <title>minbase()</title>
<indexterm><primary>minbase</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>minbase</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::minbase ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00488">488</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a3265677e1277882355b102f90ce5fc69"/><section>
    <title>monobase()</title>
<indexterm><primary>monobase</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>monobase</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::monobase ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00498">498</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a1d046b3da7103b9ca5a7dacb674f49f0"/><section>
    <title>nobase()</title>
<indexterm><primary>nobase</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>nobase</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::nobase ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00503">503</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a9c68ad4f3469998252d88633edf8e908"/><section>
    <title>sqrt_max()</title>
<indexterm><primary>sqrt_max</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>sqrt_max</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::sqrt_max ( )</computeroutput></para>
<para>QUEREMOS FABRICAR LA METAFUNCION TypeFromIntNumber_t&lt;numero_sin_signo&gt; QUE DEVUELVA EL TIPO ENTERO SIN SIGNO MAS PEQUENO PARA EL NUMERO numero_sin_signo </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00557">557</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_num_repr_1_1type__traits_a9c68ad4f3469998252d88633edf8e908_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ae6c52c70d58ecbc58b9ce8ddeff3c42e"/><section>
    <title>submaxbase()</title>
<indexterm><primary>submaxbase</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>submaxbase</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::submaxbase ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00483">483</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a7197bd8a89fcc647c18b49f63a1b49f5"/><section>
    <title>submaxdigit()</title>
<indexterm><primary>submaxdigit</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>submaxdigit</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::submaxdigit ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00513">513</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ae6d7996db2b7cdee98b72342bc0f976b"/><section>
    <title>subminbase()</title>
<indexterm><primary>subminbase</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>subminbase</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>consteval UINT_T NumRepr::type_traits::subminbase ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00493">493</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ae7b0da6237614a2d93ed8d40ee5596a5"/><section>
    <title>suitable_base()</title>
<indexterm><primary>suitable_base</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>suitable_base</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T , UINT_T B&gt; </computeroutput><para><computeroutput>consteval bool NumRepr::type_traits::suitable_base ( )</computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00543">543</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las variables</title>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a630fe884d2ee01fc50ace1a6caada422"/><section>
    <title>eq_sz_v</title>
<indexterm><primary>eq_sz_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>eq_sz_v</secondary></indexterm>
<computeroutput>template&lt;typename T , typename S &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::eq_sz_v = (sizeof(T) == sizeof(S))<computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>METAOPERADORES DE COMPARACION DE CAPACIDAD DE INTEGERS. </para>
</para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00206">206</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a960a0fb19a2a30ba524a3d5243973f4f"/><section>
    <title>ge_sz_v</title>
<indexterm><primary>ge_sz_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>ge_sz_v</secondary></indexterm>
<computeroutput>template&lt;typename T , typename S &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::ge_sz_v = <link linkend="_namespace_num_repr_1_1type__traits_1ac18e09ed303195401d9c8761d19c445d">gt_sz_v</link>&lt;T,S&gt;||<link linkend="_namespace_num_repr_1_1type__traits_1a630fe884d2ee01fc50ace1a6caada422">eq_sz_v</link>&lt;T,S&gt;<computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00212">212</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ac18e09ed303195401d9c8761d19c445d"/><section>
    <title>gt_sz_v</title>
<indexterm><primary>gt_sz_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>gt_sz_v</secondary></indexterm>
<computeroutput>template&lt;typename T , typename S &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::gt_sz_v = (sizeof(T) &gt; sizeof(S))<computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00208">208</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a70c8833df04d2280e43efc6c786255d5"/><section>
    <title>is_integral_type_v</title>
<indexterm><primary>is_integral_type_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>is_integral_type_v</secondary></indexterm>
<computeroutput>template&lt;typename INT_TYPE &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::is_integral_type_v = std::is_integral_v&lt;INT_TYPE&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>METAOPERADOR QUE NOS DA SI UN TIPO ES INTEGRAL. </para>
</para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00199">199</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1ac835cd50de7fc16126659350e707d90b"/><section>
    <title>is_signed_type_v</title>
<indexterm><primary>is_signed_type_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>is_signed_type_v</secondary></indexterm>
<computeroutput>template&lt;typename SINT_T &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::is_signed_type_v = std::is_signed_v&lt;SINT_T&gt;<computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES SIGNED. </para>
</para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00192">192</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a25a6c0b36e21a705612679155c625fea"/><section>
    <title>is_uint_type_for_radix_v</title>
<indexterm><primary>is_uint_type_for_radix_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>is_uint_type_for_radix_v</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::is_uint_type_for_radix_v = std::is_unsigned_v&lt;UINT_T&gt; &amp;&amp; (! std::is_same_v&lt;UINT_T,<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">uint128_t</link>&gt;)<computeroutput>[constexpr]</computeroutput></computeroutput></para>
<para>&quot;CLASS&quot; TYPE TYPE DEFINITION template&lt;typename              int_type,int_type base&gt; class digito&lt;int_type,base&gt; {}; CONCEPT TYPE TYPE DEFINITION template&lt;allowable_base_type_c int_type,int_type base&gt; class digito&lt;int_type,base&gt; {}; METAOPERADOR QUE NOS DA LA ADECUACION DE UN TIPO PARA SER BASE DE UN SISTEMA DE NUMERACION VALE CUALQUIER TIPO UNSIGNED INTEGRAL QUE NO SEA EL MAYOR CONSIDERADO AQUI EL MAYOR CONSIDERADO ES UINT128_T </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00175">175</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a14ca6c2ae135eb7b3434518245aa6e32"/><section>
    <title>is_unsigned_type_v</title>
<indexterm><primary>is_unsigned_type_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>is_unsigned_type_v</secondary></indexterm>
<computeroutput>template&lt;typename UINT_T &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::is_unsigned_type_v<computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Valor inicial:</emphasis><programlisting linenumbering="unnumbered">=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_uint_type_for_radix_v&lt;UINT_T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_same_v&lt;UINT_T,uint128_t&gt;
</programlisting>
<para>METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES UNSIGNED VALEN LOS QUE VALEN PARA RADIX MAS LOS TIPO MAS GRANDES POR LO TANTO UINT128_T SE CONSIDERA UN UNSIGNED INTEGRAL TYPE </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00184">184</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a26bf1fb2c8481ad4420be9bd6e46f474"/><section>
    <title>le_sz_v</title>
<indexterm><primary>le_sz_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>le_sz_v</secondary></indexterm>
<computeroutput>template&lt;typename T , typename S &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::le_sz_v = <link linkend="_namespace_num_repr_1_1type__traits_1a8f400870614660673c711d0901466df9">lt_sz_v</link>&lt;T,S&gt;||<link linkend="_namespace_num_repr_1_1type__traits_1a630fe884d2ee01fc50ace1a6caada422">eq_sz_v</link>&lt;T,S&gt;<computeroutput>[constexpr]</computeroutput></computeroutput></para>
<para>METAFUNCION : DA EL SIGUIENTE TIPO NATURAL PARA EL ACTUAL TIPO NATURAL POR ESPECIALIZACION EXPLICITA </para>
<para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00214">214</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a8f400870614660673c711d0901466df9"/><section>
    <title>lt_sz_v</title>
<indexterm><primary>lt_sz_v</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>lt_sz_v</secondary></indexterm>
<computeroutput>template&lt;typename T , typename S &gt; </computeroutput><para><computeroutput>constexpr bool NumRepr::type_traits::lt_sz_v = (sizeof(T) &lt; sizeof(S))<computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00210">210</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
<anchor xml:id="_namespace_num_repr_1_1type__traits_1a3c2cd8d77157f93388df22fc683352c6"/><section>
    <title>nullchar</title>
<indexterm><primary>nullchar</primary><secondary>NumRepr::type_traits</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits</primary><secondary>nullchar</secondary></indexterm>
<computeroutput>template&lt;char_type_c CharT&gt; </computeroutput><para><computeroutput>constexpr CharT NumRepr::type_traits::nullchar {CharT(&apos;\0&apos;)}<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_basic__types_8hpp_source_1l00126">126</link> del archivo <link linkend="_basic__types_8hpp_source">basic_types.hpp</link>.</para>
</section>
</section>
</section>
