.TH "basic_types.hpp" 3 "Lunes, 2 de Enero de 2023" "NumericRepresentations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_types.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'istream'\fP
.br
\fC#include <cinttypes>\fP
.br
\fC#include <type_traits>\fP
.br
\fC#include <optional>\fP
.br
\fC#include <compare>\fP
.br
\fC#include <concepts>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <string>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include <array>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <list>\fP
.br
\fC#include <map>\fP
.br
\fC#include <climits>\fP
.br
\fC#include <numeric>\fP
.br
\fC#include <limits>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <iterator>\fP
.br
\fC#include <functional>\fP
.br

.SS "Clases"

.in +1c
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< UInt_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ullint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ulint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< usint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uchint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< UInt >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ullint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ulint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< usint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uchint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< SInt >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint128_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< schint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< ssint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< slint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sllint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< SInt >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sllint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< slint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< ssint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< schint_t >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >\fP"
.br
.ti -1c
.RI "struct \fBNumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBNumRepr\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits::ugly_details_UInt_for_UInt\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits::ugly_details_sig_SInt_for_UInt\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits::ugly_details_UInt_for_SInt\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits::ugly_details_SInt_for_SInt\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits::ugly_details_for_suitable_type_deduction\fP"
.br
.ti -1c
.RI "namespace \fBNumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction\fP"
.br
.in -1c
.SS "Concepts"

.in +1c
.ti -1c
.RI "concept \fBNumRepr::type_traits::arith_integral_c\fP"
.br
.RI "TYPE_TRAITS AND CONCEPTS\&. "
.ti -1c
.RI "concept \fBNumRepr::type_traits::arith_natural_c\fP"
.br
.ti -1c
.RI "concept \fBNumRepr::type_traits::char_type_c\fP"
.br
.ti -1c
.RI "concept \fBNumRepr::type_traits::uint_type_for_radix_c\fP"
.br
.RI "CONCEPT FOR UNSIGNED INTEGRAL TYPES VALID FOR THE RADIX\&. "
.ti -1c
.RI "concept \fBNumRepr::type_traits::unsigned_integral_c\fP"
.br
.RI "CONCEPT FOR UNSIGNED INTEGRAL TYPES\&. "
.ti -1c
.RI "concept \fBNumRepr::type_traits::signed_integral_c\fP"
.br
.RI "CONCEPT FOR SIGNED INTEGRAL TYPES\&. "
.ti -1c
.RI "concept \fBNumRepr::type_traits::integral_c\fP"
.br
.in -1c
.SS "typedefs"

.in +1c
.ti -1c
.RI "using \fBNumRepr::chint_t\fP = char"
.br
.RI "NUEVOS NOMBRES PARA LOS ENTEROS O PARECIDOS\&. "
.ti -1c
.RI "using \fBNumRepr::schint_t\fP = signed char"
.br
.ti -1c
.RI "using \fBNumRepr::ssint_t\fP = signed short int"
.br
.ti -1c
.RI "using \fBNumRepr::sint_t\fP = signed int"
.br
.ti -1c
.RI "using \fBNumRepr::slint_t\fP = signed long int"
.br
.ti -1c
.RI "using \fBNumRepr::sllint_t\fP = signed long long int"
.br
.ti -1c
.RI "using \fBNumRepr::uchint_t\fP = unsigned char"
.br
.ti -1c
.RI "using \fBNumRepr::usint_t\fP = unsigned short int"
.br
.ti -1c
.RI "using \fBNumRepr::uint_t\fP = unsigned int"
.br
.ti -1c
.RI "using \fBNumRepr::ulint_t\fP = unsigned long int"
.br
.ti -1c
.RI "using \fBNumRepr::ullint_t\fP = unsigned long long int"
.br
.ti -1c
.RI "using \fBNumRepr::uint128_t\fP = __uint128_t"
.br
.ti -1c
.RI "using \fBNumRepr::sint128_t\fP = __int128_t"
.br
.ti -1c
.RI "using \fBNumRepr::size_t\fP = std::size_t"
.br
.ti -1c
.RI "using \fBNumRepr::sint8_t\fP = std::int8_t"
.br
.ti -1c
.RI "using \fBNumRepr::sint16_t\fP = std::int16_t"
.br
.ti -1c
.RI "using \fBNumRepr::sint32_t\fP = std::int32_t"
.br
.ti -1c
.RI "using \fBNumRepr::sint64_t\fP = std::int64_t"
.br
.ti -1c
.RI "using \fBNumRepr::int8_t\fP = std::int8_t"
.br
.ti -1c
.RI "using \fBNumRepr::int16_t\fP = std::int16_t"
.br
.ti -1c
.RI "using \fBNumRepr::int32_t\fP = std::int32_t"
.br
.ti -1c
.RI "using \fBNumRepr::int64_t\fP = std::int64_t"
.br
.ti -1c
.RI "using \fBNumRepr::fast8_t\fP = std::int_fast8_t"
.br
.ti -1c
.RI "using \fBNumRepr::fast16_t\fP = std::int_fast16_t"
.br
.ti -1c
.RI "using \fBNumRepr::fast32_t\fP = std::int_fast32_t"
.br
.ti -1c
.RI "using \fBNumRepr::fast64_t\fP = std::int_fast64_t"
.br
.ti -1c
.RI "using \fBNumRepr::least8_t\fP = std::int_least8_t"
.br
.ti -1c
.RI "using \fBNumRepr::least16_t\fP = std::int_least16_t"
.br
.ti -1c
.RI "using \fBNumRepr::least32_t\fP = std::int_least32_t"
.br
.ti -1c
.RI "using \fBNumRepr::least64_t\fP = std::int_least64_t"
.br
.ti -1c
.RI "using \fBNumRepr::uint8_t\fP = std::uint8_t"
.br
.ti -1c
.RI "using \fBNumRepr::uint16_t\fP = std::uint16_t"
.br
.ti -1c
.RI "using \fBNumRepr::uint32_t\fP = std::uint32_t"
.br
.ti -1c
.RI "using \fBNumRepr::uint64_t\fP = std::uint64_t"
.br
.ti -1c
.RI "using \fBNumRepr::ufast8_t\fP = std::uint_fast8_t"
.br
.ti -1c
.RI "using \fBNumRepr::ufast16_t\fP = std::uint_fast16_t"
.br
.ti -1c
.RI "using \fBNumRepr::ufast32_t\fP = std::uint_fast32_t"
.br
.ti -1c
.RI "using \fBNumRepr::ufast64_t\fP = std::uint_fast64_t"
.br
.ti -1c
.RI "using \fBNumRepr::uleast8_t\fP = std::uint_least8_t"
.br
.ti -1c
.RI "using \fBNumRepr::uleast16_t\fP = std::uint_least16_t"
.br
.ti -1c
.RI "using \fBNumRepr::uleast32_t\fP = std::uint_least32_t"
.br
.ti -1c
.RI "using \fBNumRepr::uleast64_t\fP = std::uint_least64_t"
.br
.ti -1c
.RI "using \fBNumRepr::intmax_t\fP = std::intmax_t"
.br
.ti -1c
.RI "using \fBNumRepr::uintmax_t\fP = std::uintmax_t"
.br
.ti -1c
.RI "template<typename UInt_t > using \fBNumRepr::type_traits::sig_UInt_for_UInt_t\fP = typename ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< UInt_t >::type"
.br
.ti -1c
.RI "template<typename UInt_t > using \fBNumRepr::type_traits::sig_SInt_for_UInt_t\fP = typename ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< UInt_t >::type"
.br
.ti -1c
.RI "template<typename Int_t > using \fBNumRepr::type_traits::sig_UInt_for_SInt_t\fP = typename ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< Int_t >::type"
.br
.ti -1c
.RI "template<typename SInt_t > using \fBNumRepr::type_traits::sig_SInt_for_SInt_t\fP = typename ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< SInt_t >::type"
.br
.ti -1c
.RI "template<ullint_t Radix> using \fBNumRepr::type_traits::TypeFromIntNumber_t\fP = typename UIntTypeForRadix< decltype(Radix), Radix >::UIntType"
.br
.ti -1c
.RI "template<integral_c IntType, IntType Radix> using \fBNumRepr::type_traits::GreaterTypeFromIntNumber_t\fP = typename UIntTypeForRadixContainsMultResult< decltype(Radix), Radix >::UIntType"
.br
.in -1c
.SS "Funciones"

.in +1c
.ti -1c
.RI "char * \fBNumRepr::type_traits::clear_ccad\fP (char *, usint_t)"
.br
.ti -1c
.RI "template<template< uchint_t B > class T, uchint_t B> constexpr const char * \fBNumRepr::type_traits::devCadenaC\fP (T< B > arg, std::size_t long_ccad=64) noexcept"
.br
.ti -1c
.RI "constexpr char * \fBNumRepr::type_traits::clear_ccad\fP (char *cad_c, std::size_t long_de_cad_c) noexcept"
.br
.ti -1c
.RI "constexpr unsigned long long \fBNumRepr::type_traits::atoull\fP (char *text) noexcept"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::maxbase\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::submaxbase\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::minbase\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::subminbase\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::monobase\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::nobase\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::maxdigit\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::submaxdigit\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::digit_0\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::digit_1\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::base_2\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T , UINT_T B> consteval bool \fBNumRepr::type_traits::base_geqt_2\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T , UINT_T B> consteval bool \fBNumRepr::type_traits::base_leqt_max\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T , UINT_T B> consteval bool \fBNumRepr::type_traits::suitable_base\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::middle_max\fP ()"
.br
.ti -1c
.RI "template<typename UINT_T > consteval UINT_T \fBNumRepr::type_traits::sqrt_max\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "template<char_type_c CharT> constexpr CharT \fBNumRepr::type_traits::nullchar\fP {CharT('\\0')}"
.br
.ti -1c
.RI "template<typename UINT_T > constexpr bool \fBNumRepr::type_traits::is_uint_type_for_radix_v\fP = std::is_unsigned_v<UINT_T> && (! std::is_same_v<UINT_T,uint128_t>)"
.br
.ti -1c
.RI "template<typename UINT_T > constexpr bool \fBNumRepr::type_traits::is_unsigned_type_v\fP"
.br
.ti -1c
.RI "template<typename SINT_T > constexpr bool \fBNumRepr::type_traits::is_signed_type_v\fP = std::is_signed_v<SINT_T>"
.br
.RI "METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES SIGNED\&. "
.ti -1c
.RI "template<typename INT_TYPE > constexpr bool \fBNumRepr::type_traits::is_integral_type_v\fP = std::is_integral_v<INT_TYPE>"
.br
.RI "METAOPERADOR QUE NOS DA SI UN TIPO ES INTEGRAL\&. "
.ti -1c
.RI "template<typename T , typename S > constexpr bool \fBNumRepr::type_traits::eq_sz_v\fP = (sizeof(T) == sizeof(S))"
.br
.RI "METAOPERADORES DE COMPARACION DE CAPACIDAD DE INTEGERS\&. "
.ti -1c
.RI "template<typename T , typename S > constexpr bool \fBNumRepr::type_traits::gt_sz_v\fP = (sizeof(T) > sizeof(S))"
.br
.ti -1c
.RI "template<typename T , typename S > constexpr bool \fBNumRepr::type_traits::lt_sz_v\fP = (sizeof(T) < sizeof(S))"
.br
.ti -1c
.RI "template<typename T , typename S > constexpr bool \fBNumRepr::type_traits::ge_sz_v\fP = gt_sz_v<T,S>||eq_sz_v<T,S>"
.br
.ti -1c
.RI "template<typename T , typename S > constexpr bool \fBNumRepr::type_traits::le_sz_v\fP = lt_sz_v<T,S>||eq_sz_v<T,S>"
.br
.in -1c
.SH "Autor"
.PP 
Generado automáticamente por Doxygen para NumericRepresentations del código fuente\&.
