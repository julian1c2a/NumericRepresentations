<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_auxiliary__functions_8hpp_source" xml:lang="es">
<title>auxiliary_functions.hpp</title>
<indexterm><primary>auxiliary_functions.hpp</primary></indexterm>
Ir a la documentaci√≥n de este archivo.<programlisting linenumbering="unnumbered"><anchor xml:id="_auxiliary__functions_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;AUXILIARY_FUNCTIONS_HPP_INCLUDED</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;AUXILIARY_FUNCTIONS_HPP_INCLUDED</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00003"/>00003 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_auxiliary__types_8hpp">auxiliary_types.hpp</link>&quot;</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00005"/>00005 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00006"/><link linkend="_namespace_num_repr">00006</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_num_repr">NumRepr</link>&#32;{
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00007"/>00007 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00008"/>00008 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00009"/><link linkend="_namespace_num_repr_1a267abda3e78b6a487e39c4de923838bf">00009</link> <link linkend="_namespace_num_repr_1a192603e40b54371f4bebf61a4afa17e8">sign_e</link>&#32;<link linkend="_namespace_num_repr_1a267abda3e78b6a487e39c4de923838bf">Char2Sign</link>(<emphasis role="keywordtype">char</emphasis>&#32;ch)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00010"/>00010 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ch&#32;&lt;=&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a192603e40b54371f4bebf61a4afa17e8aedd99b9b4a181ec16ae4194c9b065e8b">sign_e::vplus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a192603e40b54371f4bebf61a4afa17e8a664d33ce0500d45dc2e44770723ba7d1">sign_e::vminus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00015"/>00015 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00016"/>00016 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00017"/>00017 <emphasis role="keyword">template</emphasis>&lt;type_traits::arith_<emphasis role="keywordtype">int</emphasis>egral_c&#32;IntT&gt;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00018"/>00018 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00019"/><link linkend="_namespace_num_repr_1ae6e314ed88507b46a8155893a823049c">00019</link> <link linkend="_namespace_num_repr_1a192603e40b54371f4bebf61a4afa17e8">sign_e</link>&#32;<link linkend="_namespace_num_repr_1ae6e314ed88507b46a8155893a823049c">Int2Sign</link>&#32;(IntT&#32;nu)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00020"/>00020 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nu&#32;&lt;&#32;0)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a192603e40b54371f4bebf61a4afa17e8a664d33ce0500d45dc2e44770723ba7d1">sign_e::vminus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a192603e40b54371f4bebf61a4afa17e8aedd99b9b4a181ec16ae4194c9b065e8b">sign_e::vplus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00025"/>00025 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00026"/>00026 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00027"/>00027 <emphasis role="keyword">template</emphasis>&lt;type_traits::arith_<emphasis role="keywordtype">int</emphasis>egral_c&#32;IntT&gt;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00028"/>00028 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00029"/><link linkend="_namespace_num_repr_1a396b4de02e34550acddc2664931975d8">00029</link> <link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0">sign_funct_e</link>&#32;<link linkend="_namespace_num_repr_1a396b4de02e34550acddc2664931975d8">Int2SignFunct</link>(IntT&#32;nu)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00030"/>00030 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nu&#32;&lt;&#32;0)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0a664d33ce0500d45dc2e44770723ba7d1">sign_funct_e::vminus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nu&#32;&gt;&#32;0)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0aedd99b9b4a181ec16ae4194c9b065e8b">sign_funct_e::vplus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0ad50833e13d94478df7669d0bfd94e859">sign_funct_e::vzero</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00037"/>00037 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00038"/>00038 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00039"/>00039 <emphasis role="keyword">template</emphasis>&lt;type_traits::arith_natural_c&#32;NatIntT&gt;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00040"/>00040 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00041"/><link linkend="_namespace_num_repr_1af38005a1c9fb23a68d4651abc72ddf25">00041</link> <link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0">sign_funct_e</link>&#32;<link linkend="_namespace_num_repr_1af38005a1c9fb23a68d4651abc72ddf25">Nat2SignFunct</link>(NatIntT&#32;nu)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00042"/>00042 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nu==0)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0ad50833e13d94478df7669d0bfd94e859">sign_funct_e::vzero</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1a53ea65055c089ed2caa1aa7a885e8eb0aedd99b9b4a181ec16ae4194c9b065e8b">sign_funct_e::vplus</link>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00047"/>00047 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00048"/>00048 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00049"/><link linkend="_namespace_num_repr_1_1detail">00049</link> <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00050"/>00050 <emphasis role="comment">//&#32;precondition:&#32;low*low&#32;&lt;=&#32;n,&#32;high*high&#32;&gt;&#32;n.</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00051"/>00051 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00052"/><link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">00052</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">ceilsqrt</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n,<emphasis role="keywordtype">size_t</emphasis>&#32;low,<emphasis role="keywordtype">size_t</emphasis>&#32;high)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00053"/>00053 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00054"/>00054 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;mid{std::midpoint(low,&#32;high)};
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00055"/>00055 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;sqmid{mid*mid};
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00056"/>00056 &#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(low&#32;+&#32;1&#32;&gt;=&#32;high)&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;high&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(sqmid&#32;==&#32;n)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mid&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(sqmid&#32;&lt;&#32;&#32;n)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">ceilsqrt</link>(n,&#32;mid,&#32;high)&#32;&#32;:
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">ceilsqrt</link>(n,&#32;low,&#32;mid)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00066"/>00066 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00067"/>00067 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00068"/>00068 <emphasis role="comment">//&#32;returns&#32;ceiling(sqrt(n))</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00069"/>00069 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00070"/><link linkend="_namespace_num_repr_1_1detail_1ad76e295a8cfd29f1f6e2a02983e4717a">00070</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">ceilsqrt</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00071"/>00071 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00072"/>00072 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;num_max_dig{std::numeric_limits&lt;std::size_t&gt;::digits};
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00073"/>00073 &#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(n&#32;&lt;&#32;3)&#32;?
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">ceilsqrt</link>(
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n,
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t(1)&#32;&lt;&lt;&#32;(num_max_dig&#32;/&#32;2)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00083"/>00083 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00084"/>00084 
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00085"/>00085 <emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;n&#32;divisible&#32;by&#32;an&#32;odd&#32;integer&#32;in</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00086"/>00086 <emphasis role="comment">//&#32;[2&#32;*&#32;low&#32;+&#32;1,&#32;2&#32;*&#32;high&#32;+&#32;1).</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00087"/>00087 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00088"/><link linkend="_namespace_num_repr_1_1detail_1a098c7fa0c984b9aa1e6c5e6033affc88">00088</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_num_repr_1_1detail_1a098c7fa0c984b9aa1e6c5e6033affc88">find_factor</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n,<emphasis role="keywordtype">size_t</emphasis>&#32;low,<emphasis role="keywordtype">size_t</emphasis>&#32;high)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00089"/>00089 {
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00090"/>00090 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;mid{std::midpoint(low,&#32;high)};
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00091"/>00091 &#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(low&#32;+&#32;1&#32;&gt;=&#32;high)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(n&#32;%&#32;(2&#32;*&#32;low&#32;+&#32;1))&#32;==&#32;0&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1detail_1a098c7fa0c984b9aa1e6c5e6033affc88">find_factor</link>(n,&#32;low,&#32;mid)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_num_repr_1_1detail_1a098c7fa0c984b9aa1e6c5e6033affc88">find_factor</link>(n,&#32;mid,&#32;high)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00101"/>00101 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00102"/>00102 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00103"/><link linkend="_namespace_num_repr_1_1auxiliary__functions">00103</link> <emphasis role="keyword">namespace&#32;</emphasis>auxiliary_functions&#32;{
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00105"/><link linkend="_namespace_num_repr_1_1auxiliary__functions_1a6a368b190a18264af00c59b164dc1096">00105</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_num_repr_1_1auxiliary__functions_1a6a368b190a18264af00c59b164dc1096">is_prime</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;2)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((n==2)||(n==3))
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!<link linkend="_namespace_num_repr_1_1detail_1a098c7fa0c984b9aa1e6c5e6033affc88">detail::find_factor</link>(n,&#32;1,&#32;(<link linkend="_namespace_num_repr_1_1detail_1aa138a7304b06ab664d7208956b3c0dbe">detail::ceilsqrt</link>(n)&#32;+&#32;1)&#32;/&#32;2));
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00115"/><link linkend="_namespace_num_repr_1_1auxiliary__functions_1a3ea0c809df1b14220a5fc969a28d7a8d">00115</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_num_repr_1_1auxiliary__functions_1a3ea0c809df1b14220a5fc969a28d7a8d">is_power_of_2</link>(<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">uint128_t</link>&#32;num)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((num&#32;%&#32;2)&#32;!=&#32;0)
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1_1auxiliary__functions_1a3ea0c809df1b14220a5fc969a28d7a8d">is_power_of_2</link>(num&#32;/&#32;2);
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00122"/>00122 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00123"/>00123 }
<anchor xml:id="_auxiliary__functions_8hpp_source_1l00124"/>00124 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;AUXILIARY_FUNCTIONS_HPP_INCLUDED</emphasis>
</programlisting></section>
