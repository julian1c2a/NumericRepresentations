<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</title>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;nat_rat_fixed_reg_t.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt; UINT_T, B &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link> = std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt; UINT_T, B &gt;, NE+NF &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; LE, LF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a022253ded9523d2145125697729f0bc2">pfx_rat_reg_NExNF_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; UINT_T, B, NE, NF &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">type_traits::sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39">SIG_SINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">type_traits::sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt; UINT_T, B, NE+NF &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link> = <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt; UINT_T, B, LE+LF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link> = typename std::array&lt; UINT_T, NE+NF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf7444ca6fd95c7e1e8e1b0180b269a0">reg_suints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link>, NE+NF &gt;</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; </para><para>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af0e57e72ead75b530b5efe77928ecdc6">reg_ssints_t</link> = typename std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39">SIG_SINT_T</link>, NE+NF &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a83498b558e3a2707ff1767b5bdf087b4">pfx_rat_reg_digs_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&gt;&amp;&amp;...)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae679f5015862a68f635d46d8c4a70892">pfx_rat_reg_digs_t</link> (const Ts &amp;... args) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1acf99b1745ac9ee699102236d1a2a79dc">copy_arg_N</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp;arg)</para>

<para>BEGIN : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</para><para>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ace15a99d6b8f4b429bf385e32d9c58d8">move_arg_N</link> (base_N_t&lt; NE, NF &gt; &amp;&amp;arg)</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae344ba117479d673748d2e4b54a11e20">pfx_rat_reg_digs_t</link> (const base_NExNF_t&lt; NE, NF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7afac12b75bf172621e52a8cb1aee74c">pfx_rat_reg_digs_t</link> (const base_NExNF_t&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af205ef58ee00a8d89a5504f3638d2f06">pfx_rat_reg_digs_t</link> (Ints_type ... dig_pow_i) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a57512a8692247ed4c3bfca17504d04bb">pfx_rat_reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2447e6e4c5bc27036cb5c0c717c57516">pfx_rat_reg_digs_t</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a40c5401cc7a854a6c9ee7e303b8b605e">operator=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a01ec3009f1dad14b6a40cd4cffc266d1">operator=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a87a935fc4c1bba1d16ef8fc855ab837d">operator=</link> (const nat_reg_N_digs_t&lt; NE, NF &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE MODIFICAR EL ARGUMENTO. </para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae1b1bbc00ba4e1b7cda6d655d0c69713">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp;arg) noexcept</para>

<para>OPERACION ASIGNACION POR COPIA DESDE BASE_N_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4655dff96fd715063231961682140a8">operator=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7a8a8164894278d64b0ec3c2534d2837">operator=</link> (Int_Type arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a8c7d7fb0e6776dd78e993e5fc8fbf8e4">concat</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a72cce26eea1af99400f760bb683df57f">concat</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a12229e5a534c8c6f2e4075031ae7ef6c">concat_inv</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad13f4ece8bd16d01902c852ada645087">concat_inv</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5b16b680b8c906452330a8201e3f9966">concat</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ea2b34d7a64b91d20a547769fe4c4d5">concat</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f346d0bbdf300ba36b0b9622a0c2004">concat_inv</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9350d24557721d0a2d25a87b3d993183">concat_inv</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa93bfacedfc35b410d1eb6f1e74ffe55">subreg_digs</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a206489e66bc07dd845d00c4a6ccb0bdc">rev_subreg_digs</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6fa675710cb0e3a25d2b46b601516149">subreg_digs_pe</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a3a821c17ddc821a00db5e00b02ea7f77">rev_subreg_digs_pe</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a826d5ada30ddfb3bd85e38a3b9231ed9">subreg_digs_pf</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</para><para>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad5adcbe25e088551ac817004a9320300">rev_subreg_digs_pf</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a787b682d968d66643631b4e17b191b5a">IntPart</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1dfad6f1cf535bde170572bc3c023c6d">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d2ee3c6afa41d4d8df88b979612eac8">operator==</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a858568dd397e27a65b678be845d2f11d">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9ac296171e867711b5eeef9373c97080">operator!=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a674d8af40df8b5fc48eecd0e58c6b844">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af2ce70fc1edd09e642f0d340f752167a">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a81d967416f67b9a4c30fbca73b4d2a6c">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4dcd2478d4d0f6930a3bafc5159d7e76">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0f8ef4c04d7b0956fb973192e04259c9">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7251f075014fe1f5c38694f6b8675b1c">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a04f43c91d88792c1c6d7369406660a">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a088384a64c5d34b0286cf4074929585f">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</para><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4ec8b7755e10bf9fd0d152a6f73be39">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</para><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66a7379ac00e3519f5c116819ffb34ea">get</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aeb5f53ec7f2fce4b7729ec3a1226c457">put</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</para><para>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a69468bfb93c10666ca820da3d1124f33">put</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a02410bb4d27f15f78c3b3e6bed790547">operator[]</link> (std::int32_t idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66bc74a435ff3ee2f48a779b285b4045">operator[]</link> (std::int32_t idx) noexcept</para>
</listitem>
            <listitem><para>constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6a0f8118f2de9491462901891f51bfea">operator()</link> (std::int32_t idx) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1ad5dbda3b2a1663086f48ccddb0c07d">operator++</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adacc48c5076affbe4719232ba16af6cd">operator++</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae87bcfde3ae0324b373aef151db47020">operator--</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ac59dbac090677509ad2290c8af28c5db">operator--</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a82fea75187699b7f253e7a0b76f84816">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a43181180eabb8e8ea937db4ba2d7718d">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a27966e1e6701d534293e7f258e53457b">C_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf28ede7d87f952b85ee2e6f13bddd99">C_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45">operator!</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a46c6455a1ef12adaad5d814985d9ee2c">operator-</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af9fbb6e036ca9bd58675e476d43e05a9">operator+=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a863b4585d8f4ae407912c98c9273b6d3">operator-=</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae46f34abf55253a3dc0f6774678f57bc">mult</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a747abd2210ae2c492b36f277931a8cb6">add</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>

<para>&apos;@&apos; = &apos;+&apos; </para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6551f10097dd07df063b87fc1a007fd8">subst</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad900c018f6bac8a884c30349154dea10">operator+</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a742df4d0f55dc71053ee0cd6722c227e">operator-</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abbd54ac852f5cde9a0ec8ebe34f4ffc9">operator*</link> (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad44b35a08b59ad0418071711eeed448b">operator&lt;&lt;</link> (std::size_t n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a197245d11816587e8bbcc82e53a94b45">operator&lt;&lt;=</link> (std::size_t n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2059c242611fae3bb6b65e7313bb7ff5">operator&gt;&gt;</link> (std::size_t n) const noexcept</para>

<para>DIVIDE BY THE BASE B (/10_B) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a04e688baa386601c21f3ad4348205ed8">operator&gt;&gt;=</link> (std::size_t n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5beb2c8c44ad830017acdac79a4e84ad">rem_B</link> (std::size_t n) const noexcept</para>

<para>END : OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;=. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a073f393cf63e0e2ee6c651748c35aa05">m_rem_B</link> (std::size_t n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a90bb25d38ca338df232d9dc14a4134a4">operator|=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>

<para>BEGIN : OPERATORS | &amp; |= &amp;=. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a85a5e8fd4c769947c919010307e3aa93">operator|</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa2cd3382829147490da1a24415b06c77">operator&amp;=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a44e11dd006b54a63e2fbf7242cf9f273">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab3cac3beb283fe928dbda805c62a0230">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) const noexcept</para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</listitem>
            <listitem><para>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a11dc06d186a7598661dcf1b8b98736a4">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a589433f890f78faca137757fc3fb8459">operator*</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a00a90e2240080937a5bf0fbf6f6cfde1">operator+</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aff1f98a5fef7912f98b23032061c4d2a">operator-</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0240da6219232b6431dc4355cbbfe7ac">operator*</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a268bcec2ba1b58bfca7f3c499bcb4bdd">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2afb2e3153171736b62c2eb7a831f22c">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7921aacc123039a503c43bb0590a3816">operator*=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a886ba43fc3221dd828cc5305f641bb6e">operator+=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a06c385a088293d118abf24e1145b2d61">operator-=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adba3e7b2345403dcf9558285e13f18a4">operator*=</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp;arg) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aee17574658ad0e66f3ee133d9f554833">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a18ae64dc889b84eea4ca989e9563651a">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a67e6e0e59887f528524c4b54e6ba5a2a">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab9e34bb3a8d955badd3498d51d5e62f4">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adbeecd9a334cb9c990bca8c7878e19ea">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abf72096e6dd350d74f05124d4bf07e3a">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a94e5d24230e61c14c2590893f435ef06">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab5167455e73179baf8deaccf40901063">sui_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ca499b70aaa1d53917b468c09ad6968">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a470670e3e267bb42318f77ed70a7f42d">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03">regd_0</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4d1b2577021f8594d6efa471234869e0">regd_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad70d405111f74e96957daf7e860f0abd">regd_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1afc75739252c5a40b233bd12eace8dd16">regd_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0fd73bc1e0e7ef8d7e5cfeb2830da7a5">regd_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a010c5902fd8210da63a98c1179be37a7">regd_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274">regi_0</link> () noexcept</para>

<para>ARRAYS DE ENTEROS QUE SON DE AYUDA. </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a2b45b2f3d26220d33285794c8128a6">regi_1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9c1583db7aec52231103595dc69a2a32">regi_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6d97e8aa88ec3d0b9f81c66de861b915">regi_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a993ab098e0e7070f2514b0ebd9b9162e">regi_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a86f11292fe859c0c3ef9a580d1b96052">regi_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type))&lt;=L)</para><para>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1d2effcd65514535a97572a28c992519">normalize</link> (Ints_type ... digits_pow_i) noexcept</para>

<para>END : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</listitem>
            <listitem><para>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d591c66320eb144688d13f2f017db83">cuenta_0s_desde_IZDA</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab36669ef39e97b9de7b2b1afb11551a7">cuenta_0s_desde_DRCHA</link> (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp;arg) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Atributos privados    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2649a33cb0440df7967746d93b2ea6d7">m_dc</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt;<?linebreak?>requires (<link linkend="_namespace_num_repr_1_1type__traits_1ae7b0da6237614a2d93ed8d40ee5596a5">type_traits::suitable_base</link>&lt;UINT_T,B&gt;() &amp;&amp; (LE&gt;0))<?linebreak?>struct NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</title></simplesect>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00012">12</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074"/><section>
    <title>base_NEXNF_t</title>
<indexterm><primary>base_NEXNF_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>base_NEXNF_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::base_NEXNF_t =  std::array&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt;UINT_T,B&gt;,NE+NF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00015">15</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a"/><section>
    <title>base_t</title>
<indexterm><primary>base_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>base_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::base_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt;LE,LF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00016">16</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644"/><section>
    <title>dig_t</title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&lt;UINT_T,B&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00013">13</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3"/><section>
    <title>nat_reg_digs_t</title>
<indexterm><primary>nat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>nat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::nat_reg_digs_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt;UINT_T,B,LE+LF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00024">24</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe"/><section>
    <title>nat_reg_NExNF_digs_t</title>
<indexterm><primary>nat_reg_NExNF_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>nat_reg_NExNF_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::nat_reg_NExNF_digs_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0d08c8fc166476583cb94478965336c3">nat_reg_digs_t</link>&lt;UINT_T,B,NE+NF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00023">23</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a022253ded9523d2145125697729f0bc2"/><section>
    <title>pfx_rat_reg_NExNF_digs_t</title>
<indexterm><primary>pfx_rat_reg_NExNF_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_NExNF_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_NExNF_digs_t =  <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt;UINT_T,B,NE,NF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00019">19</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e"/><section>
    <title>reg_ints_t</title>
<indexterm><primary>reg_ints_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>reg_ints_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::reg_ints_t =  typename std::array&lt;UINT_T,NE+NF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00027">27</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af0e57e72ead75b530b5efe77928ecdc6"/><section>
    <title>reg_ssints_t</title>
<indexterm><primary>reg_ssints_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>reg_ssints_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::reg_ssints_t =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39">SIG_SINT_T</link>,NE+NF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00033">33</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf7444ca6fd95c7e1e8e1b0180b269a0"/><section>
    <title>reg_suints_t</title>
<indexterm><primary>reg_suints_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>reg_suints_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::reg_suints_t =  typename std::array&lt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link>,NE+NF&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00030">30</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa7640d2bf6c36ba7243b2dee7abc0b39"/><section>
    <title>SIG_SINT_T</title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::SIG_SINT_T =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">type_traits::sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00021">21</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609"/><section>
    <title>SIG_UINT_T</title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::SIG_UINT_T =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">type_traits::sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00020">20</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a747abd2210ae2c492b36f277931a8cb6"/><section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::add (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&apos;@&apos; = &apos;+&apos; </para>
</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01455">1455</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a747abd2210ae2c492b36f277931a8cb6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adf28ede7d87f952b85ee2e6f13bddd99"/><section>
    <title>C_B()</title>
<indexterm><primary>C_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01238">1238</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_adf28ede7d87f952b85ee2e6f13bddd99_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a27966e1e6701d534293e7f258e53457b"/><section>
    <title>C_Bm1()</title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01229">1229</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a27966e1e6701d534293e7f258e53457b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a72cce26eea1af99400f760bb683df57f"/><section>
    <title>concat()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONCAT : CONCATENACION pfx_rat_reg_digs_t&lt;23,7&gt; var1{ <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(4)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(7)</link> }; dig_t&lt;23&gt; var2{22}; var1.concat(var2) == nat#1:2:3:4:5:6:7:20#B23 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00452">452</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a72cce26eea1af99400f760bb683df57f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a8c7d7fb0e6776dd78e993e5fc8fbf8e4"/><section>
    <title>concat()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>FORMACION DE UN REG_M_DIGS_T&lt;M&gt; DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T&lt;N&gt; EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION A SU VEZ PUEDEN SER POR COPIA Y POR MOVIMIENTO CONCAT : CONCATENACION pfx_rat_reg_digs_t&lt;23,7&gt; var1{ <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(4)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(7)</link> } pfx_rat_reg_digs_t&lt;23,3&gt; var2{ <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(22)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(21)</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(20)</link> } var1.concat(var2) == nat#1:2:3:4:5:6:7:22:21:20#B23 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00433">433</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a8c7d7fb0e6776dd78e993e5fc8fbf8e4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ea2b34d7a64b91d20a547769fe4c4d5"/><section>
    <title>concat()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00508">508</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a4ea2b34d7a64b91d20a547769fe4c4d5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5b16b680b8c906452330a8201e3f9966"/><section>
    <title>concat()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>concat</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00494">494</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a5b16b680b8c906452330a8201e3f9966_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad13f4ece8bd16d01902c852ada645087"/><section>
    <title>concat_inv()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00480">480</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad13f4ece8bd16d01902c852ada645087_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a12229e5a534c8c6f2e4075031ae7ef6c"/><section>
    <title>concat_inv()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00466">466</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a12229e5a534c8c6f2e4075031ae7ef6c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9350d24557721d0a2d25a87b3d993183"/><section>
    <title>concat_inv()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; LE+LF+1 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00535">535</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9350d24557721d0a2d25a87b3d993183_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f346d0bbdf300ba36b0b9622a0c2004"/><section>
    <title>concat_inv()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>concat_inv</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>concat_inv</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; LE+NE, LF+NF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::concat_inv (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00521">521</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9f346d0bbdf300ba36b0b9622a0c2004_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1acf99b1745ac9ee699102236d1a2a79dc"/><section>
    <title>copy_arg_N()</title>
<indexterm><primary>copy_arg_N</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>copy_arg_N</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::copy_arg_N (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>BEGIN : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</para>

<para>FUNCION DELEGADA PARA COPIA DE UN ARRAY DE DISTINTO TAMANO O TAMANO CUALQUIERA &quot;N&quot; INTERNO </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00175">175</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_acf99b1745ac9ee699102236d1a2a79dc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab36669ef39e97b9de7b2b1afb11551a7"/><section>
    <title>cuenta_0s_desde_DRCHA()</title>
<indexterm><primary>cuenta_0s_desde_DRCHA</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>cuenta_0s_desde_DRCHA</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::cuenta_0s_desde_DRCHA (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01911">1911</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d591c66320eb144688d13f2f017db83"/><section>
    <title>cuenta_0s_desde_IZDA()</title>
<indexterm><primary>cuenta_0s_desde_IZDA</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>cuenta_0s_desde_IZDA</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr std::size_t <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::cuenta_0s_desde_IZDA (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01896">1896</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a235bc4a9ae726bbf7c7d5933d9a62b2e"/><section>
    <title>dig_0()</title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00037">37</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a235bc4a9ae726bbf7c7d5933d9a62b2e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a235bc4a9ae726bbf7c7d5933d9a62b2e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a960faa8c0828a9a6680526e7a9bfbc59"/><section>
    <title>dig_1()</title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00038">38</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a960faa8c0828a9a6680526e7a9bfbc59_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a960faa8c0828a9a6680526e7a9bfbc59_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a487d6b76d2e1cb0c18afaf54288e6029"/><section>
    <title>dig_Bm1()</title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00039">39</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a487d6b76d2e1cb0c18afaf54288e6029_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a487d6b76d2e1cb0c18afaf54288e6029_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a18ae64dc889b84eea4ca989e9563651a"/><section>
    <title>dig_Bm2()</title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00041">41</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a18ae64dc889b84eea4ca989e9563651a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aee17574658ad0e66f3ee133d9f554833"/><section>
    <title>dig_max()</title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00040">40</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_aee17574658ad0e66f3ee133d9f554833_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a67e6e0e59887f528524c4b54e6ba5a2a"/><section>
    <title>dig_submax()</title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00042">42</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a67e6e0e59887f528524c4b54e6ba5a2a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66a7379ac00e3519f5c116819ffb34ea"/><section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t A{}; I en [LE-1,-LF] A.get&lt;LE-1&gt;() [devuelve el digito de peso B^(LE-1)] .......... A.get&lt;2&gt;() [devuelve el digito de peso B^2] A.get&lt;1&gt;() [devuelve el digito de peso B^1] A.get&lt;0&gt;() [devuelve el digito de peso (B^0)==1] A.get&lt;-1&gt;() [devuelve el digito de peso B^-1] A.get&lt;-2&gt;() [devuelve el digito de peso B^-2] ........... A.get&lt;-LF&gt;() [devuelve el digito de peso B^-LF] MSB == MSB_E == LE-1 LSB_E == LF MSB_F == LF-1 LSB_F == 0 == LSB </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01090">1090</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a787b682d968d66643631b4e17b191b5a"/><section>
    <title>IntPart()</title>
<indexterm><primary>IntPart</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>IntPart</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr Int_Type <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::IntPart ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00633">633</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a073f393cf63e0e2ee6c651748c35aa05"/><section>
    <title>m_rem_B()</title>
<indexterm><primary>m_rem_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>m_rem_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::m_rem_B (std::size_t n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01710">1710</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a073f393cf63e0e2ee6c651748c35aa05_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a43181180eabb8e8ea937db4ba2d7718d"/><section>
    <title>mC_B()</title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01209">1209</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a43181180eabb8e8ea937db4ba2d7718d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a82fea75187699b7f253e7a0b76f84816"/><section>
    <title>mC_Bm1()</title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01199">1199</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a82fea75187699b7f253e7a0b76f84816_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ace15a99d6b8f4b429bf385e32d9c58d8"/><section>
    <title>move_arg_N()</title>
<indexterm><primary>move_arg_N</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>move_arg_N</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::move_arg_N (base_N_t&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>FUNCION DELEGADA PARA MOVER DE UN ARRAY DE DISTINTO TAMANO O TAMANO CUALQUIERA &quot;N&quot; INTERNO </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00210">210</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ace15a99d6b8f4b429bf385e32d9c58d8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae46f34abf55253a3dc0f6774678f57bc"/><section>
    <title>mult()</title>
<indexterm><primary>mult</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>mult</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::mult (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACIONES &apos;@&apos;(REG_DIGS_T,DIG_T)-&gt;STD::ARRAY&lt;REG_DIGS_T,2&gt; &apos;@&apos; = MULT </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01373">1373</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ae46f34abf55253a3dc0f6774678f57bc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1d2effcd65514535a97572a28c992519"/><section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>normalize</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type))&lt;=L)</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::normalize (Ints_type ... digits_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>END : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. </para>
</para>

<para>FUNCION DE NORMALIZACION A LA BASE B DE UN ARGUMENTOS EN UN PACK DE ENTEROS CUALQUIERA INTERNA </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00244">244</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1d2effcd65514535a97572a28c992519_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1d2effcd65514535a97572a28c992519_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45"/><section>
    <title>operator!()</title>
<indexterm><primary>operator!</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01246">1246</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9f8d01bd90392598f683702bdff3ad45_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a858568dd397e27a65b678be845d2f11d"/><section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A != B =&gt; true or false </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00717">717</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9ac296171e867711b5eeef9373c97080"/><section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9f8d01bd90392598f683702bdff3ad45">::operator!</link>= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00769">769</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a44e11dd006b54a63e2fbf7242cf9f273"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&amp; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01755">1755</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a44e11dd006b54a63e2fbf7242cf9f273_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa2cd3382829147490da1a24415b06c77"/><section>
    <title>operator&amp;=()</title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&amp;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01746">1746</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6a0f8118f2de9491462901891f51bfea"/><section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator() (std::int32_t idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01122">1122</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0240da6219232b6431dc4355cbbfe7ac"/><section>
    <title>operator*()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator* (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02066">2066</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a0240da6219232b6431dc4355cbbfe7ac_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a589433f890f78faca137757fc3fb8459"/><section>
    <title>operator*()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator* (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>BEGIN : DECLARACIONES E INICIALIZACIONES</para>

<para>END : DECLARACIONES E INICIALIZACIONES</para>

<para>BEGIN : OBTENEMOS TODOS LOS SUMANDOS MULTIPLICANDO POR UN DIGITO FIJO COLOCADOS CONVENIENTEMENTE</para>

<para>COLOCADOS CONVENIENTEMENTE END : OBTENEMOS TODOS LOS SUMANDOS MULTIPLICANDO POR UN DIGITO FIJO</para>

<para>BEGIN : SUMAMOS TODOS LOS SUMANDOS</para>

<para>END : SUMAMOS TODOS LOS SUMANDOS BEGIN : PREPARAMOS EL PAR DE RETORNO</para>

<para>END : PREPARAMOS EL PAR DE RETORNO</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01835">1835</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a589433f890f78faca137757fc3fb8459_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abbd54ac852f5cde9a0ec8ebe34f4ffc9"/><section>
    <title>operator*()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator* (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01522">1522</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_abbd54ac852f5cde9a0ec8ebe34f4ffc9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7921aacc123039a503c43bb0590a3816"/><section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator*= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02119">2119</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a7921aacc123039a503c43bb0590a3816_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adba3e7b2345403dcf9558285e13f18a4"/><section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator*= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02142">2142</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a00a90e2240080937a5bf0fbf6f6cfde1"/><section>
    <title>operator+()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator+ (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02048">2048</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a00a90e2240080937a5bf0fbf6f6cfde1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab3cac3beb283fe928dbda805c62a0230"/><section>
    <title>operator+()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator+ (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>END : OPERATORS | &amp; |= &amp;=. </para>
</para>

<para>CARRY INICIAL ES 0</para>

<para>INT_ARRAY TEMPORAL COPIA DE (*THIS) [SUMANDO 0]</para>

<para>INT_ARRAY TEMPORAL COPIA DE ARG [SUMANDO 1]</para>

<para>BUCLE FOR QUE SUMA RETINTS Y ARGINTS DESDE IDX=0 A IDX=L-1</para>

<para>GUARDAMOS EL CARRY FINAL Y RETORNAMOS LA SUMA</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01772">1772</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ab3cac3beb283fe928dbda805c62a0230_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad900c018f6bac8a884c30349154dea10"/><section>
    <title>operator+()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator+ (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01506">1506</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad900c018f6bac8a884c30349154dea10_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1ad5dbda3b2a1663086f48ccddb0c07d"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator++ ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES 1</para>

<para>BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01137">1137</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a1ad5dbda3b2a1663086f48ccddb0c07d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adacc48c5076affbe4719232ba16af6cd"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator++ (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01159">1159</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_adacc48c5076affbe4719232ba16af6cd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a268bcec2ba1b58bfca7f3c499bcb4bdd"/><section>
    <title>operator+=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator+= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02101">2101</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a268bcec2ba1b58bfca7f3c499bcb4bdd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a886ba43fc3221dd828cc5305f641bb6e"/><section>
    <title>operator+=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator+= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02128">2128</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af9fbb6e036ca9bd58675e476d43e05a9"/><section>
    <title>operator+=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator+= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES 1</para>

<para>CASOS CARRY==0[ULTIMA], CARRY==1[VECES SIGUIENTES], CARRY=ARG [1A VEZ] SI ARG == 0 ENTONCES SE DEVUELVE SIN MÁS SI ARG == 1 ENTONCES ++CTHIS SI ARG &gt; 1 ENTONCES 1a VEZ dig_BmArg 2a VEZ dig_Bm1 Y SIGUIENTES ULTIMA VEZ CARRY ==0</para>

<para>PRIMERA VEZ : ARG &gt; 1 usamos dig_BmArg</para>

<para>SEGUNDA VEZ Y SIGUIENTES BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01277">1277</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_af9fbb6e036ca9bd58675e476d43e05a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a46c6455a1ef12adaad5d814985d9ee2c"/><section>
    <title>operator-()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01254">1254</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a46c6455a1ef12adaad5d814985d9ee2c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aff1f98a5fef7912f98b23032061c4d2a"/><section>
    <title>operator-()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator- (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02057">2057</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_aff1f98a5fef7912f98b23032061c4d2a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a11dc06d186a7598661dcf1b8b98736a4"/><section>
    <title>operator-()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::pair&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>, <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator- (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>INICIALIZAMOS EL CARRY/BORROW A 0</para>

<para>GUARDAMOS EL COMPLEMENTO A LA BASE MENOS 1 DEL MINUENDO</para>

<para>COMPLETAMOS EL COMPLEMENTO A LA BASE SUMANDO 1 [carry_CB vale en el inicio 1]</para>

<para>SE HA COMPLETADO EL COMPLEMENTO A LA BASE</para>

<para>SUMAMOS SUMANDO_0 + C_B(SUMANDO_1)</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01799">1799</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a11dc06d186a7598661dcf1b8b98736a4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a742df4d0f55dc71053ee0cd6722c227e"/><section>
    <title>operator-()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator- (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01514">1514</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a742df4d0f55dc71053ee0cd6722c227e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae87bcfde3ae0324b373aef151db47020"/><section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator-- ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES EL COMPLEMENTO A LA BASE DE 1</para>

<para>BUCLE FOR QUE SUMA CTHIS Y C_B(1) DESDE IDX=0 A IDX=LE+LF-1</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01167">1167</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ae87bcfde3ae0324b373aef151db47020_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ac59dbac090677509ad2290c8af28c5db"/><section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator-- (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01182">1182</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ac59dbac090677509ad2290c8af28c5db_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2afb2e3153171736b62c2eb7a831f22c"/><section>
    <title>operator-=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator-= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02110">2110</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2afb2e3153171736b62c2eb7a831f22c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a06c385a088293d118abf24e1145b2d61"/><section>
    <title>operator-=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator-= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l02135">2135</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a863b4585d8f4ae407912c98c9273b6d3"/><section>
    <title>operator-=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator-= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CARRY INICIAL ES 1</para>

<para>CASOS CARRY==0[ULTIMA], CARRY==1[VECES SIGUIENTES], CARRY=ARG [1A VEZ] SI ARG == 0 ENTONCES SE DEVUELVE SIN MÁS SI ARG == 1 ENTONCES &#8211;CTHIS SI ARG &gt; 1 ENTONCES 1a VEZ dig_BmArg 2a VEZ dig_Bm1 Y SIGUIENTES ULTIMA VEZ CARRY ==0</para>

<para>PRIMERA VEZ : SUMAMOS EL COMPLEMENTO A LA BASE DE ARG</para>

<para>SEGUNDA VEZ Y SIGUIENTES BUCLE FOR QUE SUMA CTHIS Y 1 DESDE IDX=0 A IDX=L-1</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01318">1318</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a863b4585d8f4ae407912c98c9273b6d3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0f8ef4c04d7b0956fb973192e04259c9"/><section>
    <title>operator&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &lt; B =&gt; true or false </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00919">919</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7251f075014fe1f5c38694f6b8675b1c"/><section>
    <title>operator&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00973">973</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad44b35a08b59ad0418071711eeed448b"/><section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt;&lt; (std::size_t n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>BEGIN : OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;= MULTIPLY BY THE BASE B (10) </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01632">1632</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad44b35a08b59ad0418071711eeed448b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a197245d11816587e8bbcc82e53a94b45"/><section>
    <title>operator&lt;&lt;=()</title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt;&lt;= (std::size_t n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01647">1647</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a197245d11816587e8bbcc82e53a94b45_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a674d8af40df8b5fc48eecd0e58c6b844"/><section>
    <title>operator&lt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &lt;= B =&gt; true or false </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00783">783</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af2ce70fc1edd09e642f0d340f752167a"/><section>
    <title>operator&lt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00837">837</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a088384a64c5d34b0286cf4074929585f"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COMPARACION OPERADOR SPACESHIP C++20 Comparaciones con un array estandar de otra longitud La salida devuelta es greater,less,equivalent </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01044">1044</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a088384a64c5d34b0286cf4074929585f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4ec8b7755e10bf9fd0d152a6f73be39"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&lt;=&gt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01058">1058</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad4ec8b7755e10bf9fd0d152a6f73be39_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae1b1bbc00ba4e1b7cda6d655d0c69713"/><section>
    <title>operator=()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0c1d6f1882ef00a90de99c7c13538074">base_NEXNF_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA DESDE BASE_N_T. </para>
</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00376">376</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad4655dff96fd715063231961682140a8"/><section>
    <title>operator=()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) dig_t&lt;13&gt; a{3}; pfx_rat_reg_digs_t&lt;13,16&gt; A{}; A = a; A = nat#0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:3#B13 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00387">387</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad4655dff96fd715063231961682140a8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a87a935fc4c1bba1d16ef8fc855ab837d"/><section>
    <title>operator=()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator= (const nat_reg_N_digs_t&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION ASIGNACION POR COPIA EN LA QUE <emphasis>NO</emphasis> SE PUEDE MODIFICAR EL ARGUMENTO. </para>
</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00366">366</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7a8a8164894278d64b0ec3c2534d2837"/><section>
    <title>operator=()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator= (Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) pfx_rat_reg_digs_t&lt;16,4&gt; var{}; var = 1324; 1324/%16 = 82|12 82/%16 = 5|2 =&gt; var == nat#5:2:12#B16 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00400">400</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a7a8a8164894278d64b0ec3c2534d2837_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a01ec3009f1dad14b6a40cd4cffc266d1"/><section>
    <title>operator=()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR MOVIMIENTO reg_N_digs_t == std::array&lt;dig_t,N&gt;; pfx_rat_reg_digs_t&lt;21,5&gt; var{}; pfx_rat_reg_digs_t var2{}; var2 = std::move(var); var2 == antigua var; var actual no sabemos su valor; </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00356">356</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a40c5401cc7a854a6c9ee7e303b8b605e"/><section>
    <title>operator=()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator= (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR COPIA EN LA QUE SE PUEDE COPIAR reg_N_digs_t == std::array&lt;dig_t,N&gt;; pfx_rat_reg_digs_t&lt;21,5&gt; var{}; pfx_rat_reg_digs_t var2{}; var2 = var; var2 == var </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00341">341</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a1dfad6f1cf535bde170572bc3c023c6d"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator== (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A == B =&gt; true or false </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00657">657</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7d2ee3c6afa41d4d8df88b979612eac8"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator== (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00703">703</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a04f43c91d88792c1c6d7369406660a"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&gt; (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &gt; B =&gt; true or false </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00987">987</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a81d967416f67b9a4c30fbca73b4d2a6c"/><section>
    <title>operator&gt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&gt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t&lt;23,12&gt; A; A = ... pfx_rat_reg_digs_t&lt;23,10&gt; B; B = ... A &gt;= B =&gt; true or false </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00851">851</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4dcd2478d4d0f6930a3bafc5159d7e76"/><section>
    <title>operator&gt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&gt;= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>&lt; NE, NF &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00905">905</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2059c242611fae3bb6b65e7313bb7ff5"/><section>
    <title>operator&gt;&gt;()</title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&gt;&gt; (std::size_t n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>DIVIDE BY THE BASE B (/10_B) </para>
</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01664">1664</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2059c242611fae3bb6b65e7313bb7ff5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a04e688baa386601c21f3ad4348205ed8"/><section>
    <title>operator&gt;&gt;=()</title>
<indexterm><primary>operator&gt;&gt;=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator&gt;&gt;=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator&gt;&gt;= (std::size_t n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01679">1679</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a04e688baa386601c21f3ad4348205ed8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a02410bb4d27f15f78c3b3e6bed790547"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator[] (std::int32_t idx) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01108">1108</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a02410bb4d27f15f78c3b3e6bed790547_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a66bc74a435ff3ee2f48a779b285b4045"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator[] (std::int32_t idx)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01115">1115</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a66bc74a435ff3ee2f48a779b285b4045_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a85a5e8fd4c769947c919010307e3aa93"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator| (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01738">1738</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a85a5e8fd4c769947c919010307e3aa93_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a90bb25d38ca338df232d9dc14a4134a4"/><section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::operator|= (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>BEGIN : OPERATORS | &amp; |= &amp;=. </para>
</para>

<para>REMAINDER BY THE BASE B (%10_B) END : &quot;OPERATORS&quot; REM_B^n AND M_REM_B^n </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01729">1729</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR POR DEFECTO pfx_rat_reg_digs_t&lt;10,3,2&gt; var(); var == nat#0:0:0:s:0:0#B10 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00152">152</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a05f3a766ce29786655fc99812d550fa6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a05f3a766ce29786655fc99812d550fa6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a7afac12b75bf172621e52a8cb1aee74c"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const base_NExNF_t&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS INTERNO </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00234">234</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae344ba117479d673748d2e4b54a11e20"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t N&gt; <?linebreak?>requires (N&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const base_NExNF_t&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COPIA REFERENCIA DESDE UN ARRAY DE DIGITOS INTERNO </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00227">227</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a57512a8692247ed4c3bfca17504d04bb"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COPIA pfx_rat_reg_digs_t&lt;10,3,2&gt; var{1,3,2,5,6}; pfx_rat_reg_digs_t&lt;10,3,2&gt; var2(var); </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00322">322</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a83498b558e3a2707ff1767b5bdf087b4"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR POR LISTA DE DIGITOS pfx_rat_reg_digs_t&lt;10,3,2&gt; var{<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>}; var == nat#1:3:2:s:5:6#B10 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00158">158</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ae679f5015862a68f635d46d8c4a70892"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link>&gt;&amp;&amp;...)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (const Ts &amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO pfx_rat_reg_digs_t&lt;10,3,2&gt; var(<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(1)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(3)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(2)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(5)</link>,<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t(6)</link>); var == nat#1:3:2:5:6#B10 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00166">166</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1af205ef58ee00a8d89a5504f3638d2f06"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (Ints_type ... dig_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO pfx_rat_reg_digs_t&lt;10,3,2&gt; var{1,3,2,5,6}; var == nat#1:3:2:s:5:6#B10 </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00315">315</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_af205ef58ee00a8d89a5504f3638d2f06_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2447e6e4c5bc27036cb5c0c717c57516"/><section>
    <title>pfx_rat_reg_digs_t()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>pfx_rat_reg_digs_t</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>pfx_rat_reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t NE, std::size_t NF&gt; <?linebreak?>requires (NE&gt;0)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::pfx_rat_reg_digs_t (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab1d1cdb286a3d34d491fe8834c4946fe">nat_reg_NExNF_digs_t</link>&lt; NE, NF &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR MOVIMIENTO pfx_rat_reg_digs_t&lt;10,3,2&gt; var{1,3,2,5,6}; pfx_rat_reg_digs_t&lt;10,3,2&gt; var2(std::move(var)); var queda no sabemos su valor </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00330">330</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aeb5f53ec7f2fce4b7729ec3a1226c457"/><section>
    <title>put()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>put</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>put</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::put (const <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>pfx_rat_reg_digs_t A{}; A.put&lt;2&gt;(B-1-A.get&lt;2&gt;()) [pone un valor en un digito por su indice] </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01098">1098</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a69468bfb93c10666ca820da3d1124f33"/><section>
    <title>put()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>put</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>put</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t I&gt; <?linebreak?>requires ((I &lt; LE)&amp;&amp;(std::abs(I) &lt; LF+1))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::put (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01104">1104</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a300ccd4144f9f2cdb9979897e14ded03"/><section>
    <title>regd_0()</title>
<indexterm><primary>regd_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00051">51</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a300ccd4144f9f2cdb9979897e14ded03_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a300ccd4144f9f2cdb9979897e14ded03_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4d1b2577021f8594d6efa471234869e0"/><section>
    <title>regd_1()</title>
<indexterm><primary>regd_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00058">58</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a4d1b2577021f8594d6efa471234869e0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1afc75739252c5a40b233bd12eace8dd16"/><section>
    <title>regd_B()</title>
<indexterm><primary>regd_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00068">68</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_afc75739252c5a40b233bd12eace8dd16_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad70d405111f74e96957daf7e860f0abd"/><section>
    <title>regd_Bm1()</title>
<indexterm><primary>regd_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00063">63</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad70d405111f74e96957daf7e860f0abd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a0fd73bc1e0e7ef8d7e5cfeb2830da7a5"/><section>
    <title>regd_pow_n_B()</title>
<indexterm><primary>regd_pow_n_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00076">76</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a0fd73bc1e0e7ef8d7e5cfeb2830da7a5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a010c5902fd8210da63a98c1179be37a7"/><section>
    <title>regd_pow_n_B_m1()</title>
<indexterm><primary>regd_pow_n_B_m1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regd_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regd_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00083">83</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a010c5902fd8210da63a98c1179be37a7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2b72b79cdc0bf99d420fa9ffc812b274"/><section>
    <title>regi_0()</title>
<indexterm><primary>regi_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>ARRAYS DE ENTEROS QUE SON DE AYUDA. </para>
</para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00094">94</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2b72b79cdc0bf99d420fa9ffc812b274_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a2b72b79cdc0bf99d420fa9ffc812b274_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9a2b45b2f3d26220d33285794c8128a6"/><section>
    <title>regi_1()</title>
<indexterm><primary>regi_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00102">102</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9a2b45b2f3d26220d33285794c8128a6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6d97e8aa88ec3d0b9f81c66de861b915"/><section>
    <title>regi_B()</title>
<indexterm><primary>regi_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00114">114</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a6d97e8aa88ec3d0b9f81c66de861b915_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9c1583db7aec52231103595dc69a2a32"/><section>
    <title>regi_Bm1()</title>
<indexterm><primary>regi_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00108">108</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a9c1583db7aec52231103595dc69a2a32_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a993ab098e0e7070f2514b0ebd9b9162e"/><section>
    <title>regi_pow_n_B()</title>
<indexterm><primary>regi_pow_n_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00122">122</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a993ab098e0e7070f2514b0ebd9b9162e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a86f11292fe859c0c3ef9a580d1b96052"/><section>
    <title>regi_pow_n_B_m1()</title>
<indexterm><primary>regi_pow_n_B_m1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>regi_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::int32_t n&gt; <?linebreak?>requires ((n &lt; LE) &amp;&amp; (n &gt; -(LF+1)))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4611ac7b27e61eeb36892ac67877e22e">reg_ints_t</link>&lt; LE+LF &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::regi_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00130">130</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a5beb2c8c44ad830017acdac79a4e84ad"/><section>
    <title>rem_B()</title>
<indexterm><primary>rem_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rem_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rem_B (std::size_t n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>END : OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;=. </para>
</para>

<para>BEGIN : &quot;OPERATORS&quot; REM_B^n AND M_REM_B^n REMAINDER BY THE BASE B (%10_B) </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01698">1698</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a5beb2c8c44ad830017acdac79a4e84ad_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a206489e66bc07dd845d00c4a6ccb0bdc"/><section>
    <title>rev_subreg_digs()</title>
<indexterm><primary>rev_subreg_digs</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rev_subreg_digs</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00562">562</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a206489e66bc07dd845d00c4a6ccb0bdc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a3a821c17ddc821a00db5e00b02ea7f77"/><section>
    <title>rev_subreg_digs_pe()</title>
<indexterm><primary>rev_subreg_digs_pe</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rev_subreg_digs_pe</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs_pe ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00588">588</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a3a821c17ddc821a00db5e00b02ea7f77_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ad5adcbe25e088551ac817004a9320300"/><section>
    <title>rev_subreg_digs_pf()</title>
<indexterm><primary>rev_subreg_digs_pf</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>rev_subreg_digs_pf</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::rev_subreg_digs_pf ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00614">614</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ad5adcbe25e088551ac817004a9320300_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1aa93bfacedfc35b410d1eb6f1e74ffe55"/><section>
    <title>subreg_digs()</title>
<indexterm><primary>subreg_digs</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subreg_digs</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend-ibegin&gt;0)&amp;&amp;(iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subreg_digs ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00549">549</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_aa93bfacedfc35b410d1eb6f1e74ffe55_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6fa675710cb0e3a25d2b46b601516149"/><section>
    <title>subreg_digs_pe()</title>
<indexterm><primary>subreg_digs_pe</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subreg_digs_pe</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt;= LE+LF)&amp;&amp;(ibegin &lt; iend)&amp;&amp;(ibegin &gt;= LF))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subreg_digs_pe ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00575">575</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a6fa675710cb0e3a25d2b46b601516149_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a826d5ada30ddfb3bd85e38a3b9231ed9"/><section>
    <title>subreg_digs_pf()</title>
<indexterm><primary>subreg_digs_pf</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subreg_digs_pf</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><computeroutput>template&lt;std::size_t ibegin, std::size_t iend&gt; <?linebreak?>requires ((iend &lt; LF)&amp;&amp;(ibegin &lt; iend))</computeroutput><para><computeroutput>constexpr reg_N_digs_t&lt; iend-ibegin &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subreg_digs_pf ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00601">601</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a826d5ada30ddfb3bd85e38a3b9231ed9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a6551f10097dd07df063b87fc1a007fd8"/><section>
    <title>subst()</title>
<indexterm><primary>subst</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>subst</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>constexpr std::array&lt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a05f3a766ce29786655fc99812d550fa6">pfx_rat_reg_digs_t</link>, 2 &gt; <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::subst (<link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644">dig_t</link> arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>TO DO REPASAR &apos;@&apos; = &apos;-&apos; </para>
<para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l01476">1476</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a6551f10097dd07df063b87fc1a007fd8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a94e5d24230e61c14c2590893f435ef06"/><section>
    <title>sui_B()</title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00046">46</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a94e5d24230e61c14c2590893f435ef06_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab5167455e73179baf8deaccf40901063"/><section>
    <title>sui_Bp1()</title>
<indexterm><primary>sui_Bp1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>sui_Bp1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a553a93b4e70ebccb1aad563d4433d609">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::sui_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00047">47</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ab5167455e73179baf8deaccf40901063_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1ab9e34bb3a8d955badd3498d51d5e62f4"/><section>
    <title>ui_0()</title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00043">43</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_ab9e34bb3a8d955badd3498d51d5e62f4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1adbeecd9a334cb9c990bca8c7878e19ea"/><section>
    <title>ui_1()</title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00044">44</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_adbeecd9a334cb9c990bca8c7878e19ea_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1abf72096e6dd350d74f05124d4bf07e3a"/><section>
    <title>ui_Bm1()</title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00045">45</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_abf72096e6dd350d74f05124d4bf07e3a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a470670e3e267bb42318f77ed70a7f42d"/><section>
    <title>ui_max()</title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00049">49</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a470670e3e267bb42318f77ed70a7f42d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a4ca499b70aaa1d53917b468c09ad6968"/><section>
    <title>ui_submax()</title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00048">48</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1nat__rat__fixed__reg__t_a4ca499b70aaa1d53917b468c09ad6968_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Documentación de los datos miembro</title>
<anchor xml:id="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a2649a33cb0440df7967746d93b2ea6d7"/><section>
    <title>m_dc</title>
<indexterm><primary>m_dc</primary><secondary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::nat_rat_fixed_reg_t&lt; UINT_T, B, LE, LF &gt;</primary><secondary>m_dc</secondary></indexterm>
<computeroutput>template&lt;type_traits::uint_type_for_radix_c UINT_T, UINT_T B, std::size_t LE, std::size_t LF&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t_1a9703976cda8e32e393f3acb637fac01a">base_t</link> <link linkend="_struct_num_repr_1_1nat__rat__fixed__reg__t">NumRepr::nat_rat_fixed_reg_t</link>&lt; UINT_T, B, LE, LF &gt;::m_dc<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_nat__rat__fixed__reg__t_8hpp_source_1l00035">35</link> del archivo <link linkend="_nat__rat__fixed__reg__t_8hpp_source">nat_rat_fixed_reg_t.hpp</link>.</para>
</section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_nat__rat__fixed__reg__t_8hpp">nat_rat_fixed_reg_t.hpp</link></section>
</section>
