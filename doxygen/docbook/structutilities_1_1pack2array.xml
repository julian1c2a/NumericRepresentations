<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structutilities_1_1pack2array" xml:lang="es">
<title>Referencia de la plantilla de la Estructura utilities::pack2array&lt; Ts &gt;</title>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary></indexterm>
<para>

<para>END: TEMPLATE GENERICO Y SUS ESPECIALIZACIONES. </para>
 
</para>
<para>
<computeroutput>#include &lt;utilities.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> = std::array&lt; typename <link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&lt; Ts... &gt;<link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">::elem_type</link>&lt; 0 &gt;,(sizeof...(Ts)) &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">elem_type</link> = typename <link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&lt; Ts... &gt;::elem_type&lt; 0 &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>constexpr <link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> <link linkend="_structutilities_1_1pack2array_1aff5f3e688a6d88206663fac8959e5254">operator()</link> (Ts &amp;&amp;...args) const noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr std::size_t <link linkend="_structutilities_1_1pack2array_1aa3f4d803238e78c1edb296d5ddc753ca">pack_size</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t J&gt; </para><para>static constexpr <link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">elem_type</link> <link linkend="_structutilities_1_1pack2array_1a771595ff4aaf2523a89c4aed11e5c16c">get</link> (Ts &amp;&amp;...args) noexcept</para>
</listitem>
            <listitem><para>template&lt;std::size_t... I&gt; </para><para>static constexpr void <link linkend="_structutilities_1_1pack2array_1af8e2f179474b34f00d87b1f670abda42">for_each_impl</link> (<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> &amp;iarray, const Ts...args, std::index_sequence&lt; I... &gt;) noexcept</para>
</listitem>
            <listitem><para>static constexpr void <link linkend="_structutilities_1_1pack2array_1ac0a1c575813515e6ab144a2652e65832">for_each</link> (<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> &amp;iarray, const Ts...args) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;typename... Ts&gt;<?linebreak?>requires (all_are_the_same_type_c&lt;Ts...&gt;&amp;&amp;there_is_one_or_more_c&lt;Ts...&gt;)<?linebreak?>struct utilities::pack2array&lt; Ts &gt;</title></simplesect>

<para>END: TEMPLATE GENERICO Y SUS ESPECIALIZACIONES. </para>
<para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00105">105</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671"/><section>
    <title>array_type</title>
<indexterm><primary>array_type</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>array_type</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><para><computeroutput>using <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::array_type =  std::array&lt; typename <link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&lt;Ts...&gt;<link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">::elem_type</link>&lt;0&gt;, (sizeof...(Ts)) &gt;</computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00106">106</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819"/><section>
    <title>elem_type</title>
<indexterm><primary>elem_type</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>elem_type</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><para><computeroutput>using <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::elem_type =  typename <link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&lt;Ts...&gt;::elem_type&lt;0&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00119">119</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_structutilities_1_1pack2array_1ac0a1c575813515e6ab144a2652e65832"/><section>
    <title>for_each()</title>
<indexterm><primary>for_each</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><para><computeroutput>static constexpr void <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::for_each (<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> &amp; iarray, const Ts... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00144">144</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structutilities_1_1pack2array_ac0a1c575813515e6ab144a2652e65832_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structutilities_1_1pack2array_1af8e2f179474b34f00d87b1f670abda42"/><section>
    <title>for_each_impl()</title>
<indexterm><primary>for_each_impl</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>for_each_impl</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><computeroutput>template&lt;std::size_t... I&gt; </computeroutput><para><computeroutput>static constexpr void <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::for_each_impl (<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> &amp; iarray, const Ts... args, std::index_sequence&lt; I... &gt; )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>ESTA FUNCION AUXILIAR ES NECESARIA PARA UNA POSTERIOR EXPANSION DEL PARAMETER PACK </para>
<para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00133">133</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1pack2array_1a771595ff4aaf2523a89c4aed11e5c16c"/><section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><computeroutput>template&lt;std::size_t J&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">elem_type</link> <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::get (Ts &amp;&amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00122">122</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1pack2array_1aff5f3e688a6d88206663fac8959e5254"/><section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link> <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::operator() (Ts &amp;&amp;... args) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00114">114</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1pack2array_1aa3f4d803238e78c1edb296d5ddc753ca"/><section>
    <title>pack_size()</title>
<indexterm><primary>pack_size</primary><secondary>utilities::pack2array&lt; Ts &gt;</secondary></indexterm>
<indexterm><primary>utilities::pack2array&lt; Ts &gt;</primary><secondary>pack_size</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><para><computeroutput>static constexpr std::size_t <link linkend="_structutilities_1_1pack2array">utilities::pack2array</link>&lt; Ts &gt;::pack_size ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00110">110</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_utilities_8hpp">utilities.hpp</link></section>
</section>
