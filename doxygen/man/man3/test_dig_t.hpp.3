.TH "test_dig_t.hpp" 3 "Lunes, 28 de Noviembre de 2022" "NumericRepresentations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
test_dig_t.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'pardigs_t\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBNumRepr\fP"
.br
.in -1c
.SS "Funciones"

.in +1c
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_constr_UINT_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_constr_SINT_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_constr_defecto_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_constr_copia_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_constr_movimiento_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_assign_UINT_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_assign_SINT_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_assign_copia_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_assign_movimiento_dig_t\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_preincrement\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_postincrement\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_predecrement\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_postdecrement\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_add_assign\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_add_assign_uint\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_substract_assign\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_substract_assign_uint\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_mult_assign\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_mult_assign_uint\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_ediv_assign\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_ediv_assign_uint\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_erem_assign\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_erem_assign_uint\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_add\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_add_int\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_substract\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_substract_int\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_multiply\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_multiply_int\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_edivision\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_edivision_int\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_C_B\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_operator_C_Bm1\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_prop_C_B_eq_inv_C_B\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_prop_C_Bm1_eq_inv_C_Bm1\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_prop_C_B_minus_1_eq_C_Bm1\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_unary_operator_minus\fP ()"
.br
.ti -1c
.RI "template<type_traits::allowable_base_type_c UINT_T, UINT_T B> 
.br
requires (type_traits::suitable_base<UINT_T,B>())void \fBNumRepr::display_unary_operator_neg\fP ()"
.br
.in -1c
.SH "Autor"
.PP 
Generado automáticamente por Doxygen para NumericRepresentations del código fuente\&.
