<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_utilities_8hpp_source" xml:lang="es">
<title>utilities.hpp</title>
<indexterm><primary>utilities.hpp</primary></indexterm>
Ir a la documentaci√≥n de este archivo.<programlisting linenumbering="unnumbered"><anchor xml:id="_utilities_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;UTILITIES_HPP_INCLUDED</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;UTILITIES_HPP_INCLUDED</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00003"/>00003 
<anchor xml:id="_utilities_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_basic__types_8hpp">basic_types.hpp</link>&quot;</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00007"/>00007 
<anchor xml:id="_utilities_8hpp_source_1l00008"/><link linkend="_namespaceutilities">00008</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceutilities">utilities</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00009"/>00009 <emphasis role="keyword">template</emphasis>&lt;NumRepr::type_traits::<emphasis role="keywordtype">unsigned</emphasis>_<emphasis role="keywordtype">int</emphasis>egral_c&#32;UINT_T&gt;
<anchor xml:id="_utilities_8hpp_source_1l00010"/><link linkend="_namespaceutilities_1a42ed6a49f4270d2ecd4103689b1e16ee">00010</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceutilities_1a42ed6a49f4270d2ecd4103689b1e16ee">uintspair</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::array&lt;UINT_T,2&gt;;
<anchor xml:id="_utilities_8hpp_source_1l00011"/>00011 <emphasis role="keyword">template</emphasis>&lt;NumRepr::type_traits::<emphasis role="keywordtype">unsigned</emphasis>_<emphasis role="keywordtype">int</emphasis>egral_c&#32;UINT_T,UINT_T&#32;B&gt;
<anchor xml:id="_utilities_8hpp_source_1l00012"/><link linkend="_namespaceutilities_1a19b04f837f493034c4612e5bcb58da22">00012</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceutilities_1a19b04f837f493034c4612e5bcb58da22">uintspairlist</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::array&lt;uintspair&lt;UINT_T&gt;,B&gt;;
<anchor xml:id="_utilities_8hpp_source_1l00013"/>00013 <emphasis role="keyword">template</emphasis>&lt;NumRepr::type_traits::<emphasis role="keywordtype">unsigned</emphasis>_<emphasis role="keywordtype">int</emphasis>egral_c&#32;UINT_T,UINT_T&#32;B&gt;
<anchor xml:id="_utilities_8hpp_source_1l00014"/><link linkend="_namespaceutilities_1ab05788cb7517fec011dd7e174edcd6a9">00014</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespaceutilities_1ab05788cb7517fec011dd7e174edcd6a9">uintspairtbl</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::array&lt;uintspairlist&lt;UINT_T,B&gt;,B&gt;;
<anchor xml:id="_utilities_8hpp_source_1l00015"/>00015 
<anchor xml:id="_utilities_8hpp_source_1l00038"/>00038 
<anchor xml:id="_utilities_8hpp_source_1l00039"/>00039 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Ts&gt;
<anchor xml:id="_utilities_8hpp_source_1l00040"/><link linkend="_structutilities_1_1pack2tuple">00040</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00041"/><link linkend="_structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9">tuple_type</link>&#32;=&#32;std::tuple&lt;Ts...&gt;;
<anchor xml:id="_utilities_8hpp_source_1l00042"/><link linkend="_structutilities_1_1pack2tuple_1a76afbd16c998332eb4de2986d8ec9cf5">00042</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structutilities_1_1pack2tuple_1a76afbd16c998332eb4de2986d8ec9cf5">pack_size</link>()&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(Ts));}
<anchor xml:id="_utilities_8hpp_source_1l00043"/><link linkend="_structutilities_1_1pack2tuple_1a98950abc107a937f1f2aa37871955957">00043</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9">tuple_type</link>&#32;<link linkend="_structutilities_1_1pack2tuple_1a98950abc107a937f1f2aa37871955957">operator()</link>(Ts&amp;&amp;&#32;...args)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9">tuple_type</link>&#32;&#32;content&#32;=&#32;std::make_tuple(std::forward(args...));
<anchor xml:id="_utilities_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;std::move(content);
<anchor xml:id="_utilities_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;K&gt;
<anchor xml:id="_utilities_8hpp_source_1l00048"/><link linkend="_structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38">00048</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38">elem_type</link>&#32;=&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::tuple_element&lt;K,tuple_type&gt;::type;
<anchor xml:id="_utilities_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;J&gt;
<anchor xml:id="_utilities_8hpp_source_1l00050"/><link linkend="_structutilities_1_1pack2tuple_1a21099506ee203993b708bd6f4894c82b">00050</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38">elem_type&lt;J&gt;::type</link>&#32;<link linkend="_structutilities_1_1pack2tuple_1a21099506ee203993b708bd6f4894c82b">get</link>(Ts&amp;&amp;&#32;...args)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9">tuple_type</link>&#32;&#32;content&#32;=&#32;std::make_tuple(std::forward(args...));
<anchor xml:id="_utilities_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38">elem_type&lt;J&gt;</link>&#32;ret{std::get&lt;J&gt;(std::forward(content))};
<anchor xml:id="_utilities_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_utilities_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00055"/>00055 };
<anchor xml:id="_utilities_8hpp_source_1l00068"/>00068 
<anchor xml:id="_utilities_8hpp_source_1l00073"/>00073 
<anchor xml:id="_utilities_8hpp_source_1l00074"/><link linkend="_structutilities_1_1local__void__t">00074</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1local__void__t">local_void_t</link>&#32;{};
<anchor xml:id="_utilities_8hpp_source_1l00075"/>00075 
<anchor xml:id="_utilities_8hpp_source_1l00076"/>00076 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>Head_t,<emphasis role="keyword">class</emphasis>...Tail_t&gt;
<anchor xml:id="_utilities_8hpp_source_1l00077"/><link linkend="_structutilities_1_1for__each__same__type">00077</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1for__each__same__type">for_each_same_type</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00078"/><link linkend="_structutilities_1_1for__each__same__type_1acf16b98533524aefda115e880faa2baf">00078</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1for__each__same__type_1acf16b98533524aefda115e880faa2baf">second_t</link>&#32;=&#32;std::tuple_element&lt;0,std::tuple&lt;Tail_t...&gt;&gt;::type;
<anchor xml:id="_utilities_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">static</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00080"/><link linkend="_structutilities_1_1for__each__same__type_1a10069179aea7ad89090b1e1db8926772">00080</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structutilities_1_1for__each__same__type_1a10069179aea7ad89090b1e1db8926772">are_same_type_v</link>&#32;=&#32;(
<anchor xml:id="_utilities_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::is_same_v&lt;Head_t,second_t&gt;)
<anchor xml:id="_utilities_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_structutilities_1_1for__each__same__type">for_each_same_type&lt;Tail_t...&gt;::are_same_type_v</link>)
<anchor xml:id="_utilities_8hpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_utilities_8hpp_source_1l00084"/>00084 };
<anchor xml:id="_utilities_8hpp_source_1l00085"/>00085 
<anchor xml:id="_utilities_8hpp_source_1l00086"/>00086 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;Head_t&gt;
<anchor xml:id="_utilities_8hpp_source_1l00087"/><link linkend="_structutilities_1_1for__each__same__type_3_01_head__t_01_4">00087</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1for__each__same__type">for_each_same_type</link>&lt;Head_t&gt;&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00088"/><link linkend="_structutilities_1_1for__each__same__type_3_01_head__t_01_4_1a628ba9e0ff78e1d0115e23aa8ad22121">00088</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structutilities_1_1for__each__same__type_1a10069179aea7ad89090b1e1db8926772">are_same_type_v</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_utilities_8hpp_source_1l00089"/>00089 };
<anchor xml:id="_utilities_8hpp_source_1l00090"/>00090 
<anchor xml:id="_utilities_8hpp_source_1l00091"/>00091 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Ts&gt;
<anchor xml:id="_utilities_8hpp_source_1l00092"/><link linkend="_conceptutilities_1_1all__are__the__same__type__c">00092</link> <emphasis role="keyword">concept&#32;</emphasis><link linkend="_conceptutilities_1_1all__are__the__same__type__c">all_are_the_same_type_c</link>&#32;=&#32;<emphasis role="keyword">requires</emphasis>(Ts...)&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for_each_same_type&lt;Ts...&gt;::are_same_type_v;
<anchor xml:id="_utilities_8hpp_source_1l00094"/>00094 };
<anchor xml:id="_utilities_8hpp_source_1l00095"/>00095 
<anchor xml:id="_utilities_8hpp_source_1l00096"/>00096 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Ts&gt;
<anchor xml:id="_utilities_8hpp_source_1l00097"/><link linkend="_conceptutilities_1_1there__is__one__or__more__c">00097</link> <emphasis role="keyword">concept&#32;</emphasis><link linkend="_conceptutilities_1_1there__is__one__or__more__c">there_is_one_or_more_c</link>&#32;=&#32;<emphasis role="keyword">requires</emphasis>(Ts...)&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keyword">sizeof</emphasis>...(Ts))&gt;0);
<anchor xml:id="_utilities_8hpp_source_1l00099"/>00099 };
<anchor xml:id="_utilities_8hpp_source_1l00100"/>00100 
<anchor xml:id="_utilities_8hpp_source_1l00102"/>00102 
<anchor xml:id="_utilities_8hpp_source_1l00103"/>00103 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Ts&gt;
<anchor xml:id="_utilities_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;&#32;(<link linkend="_conceptutilities_1_1all__are__the__same__type__c">all_are_the_same_type_c</link>&lt;Ts...&gt;&amp;&amp;<link linkend="_conceptutilities_1_1there__is__one__or__more__c">there_is_one_or_more_c</link>&lt;Ts...&gt;)
<anchor xml:id="_utilities_8hpp_source_1l00105"/><link linkend="_structutilities_1_1pack2array">00105</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structutilities_1_1pack2array">pack2array</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00106"/><link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">00106</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>&#32;=&#32;std::array&lt;
<anchor xml:id="_utilities_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&lt;Ts...&gt;::elem_type&lt;0&gt;,
<anchor xml:id="_utilities_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>...(Ts))
<anchor xml:id="_utilities_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;;
<anchor xml:id="_utilities_8hpp_source_1l00110"/><link linkend="_structutilities_1_1pack2array_1aa3f4d803238e78c1edb296d5ddc753ca">00110</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;<link linkend="_structutilities_1_1pack2array_1aa3f4d803238e78c1edb296d5ddc753ca">pack_size</link>()&#32;noexcept&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(Ts));
<anchor xml:id="_utilities_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00113"/>00113 
<anchor xml:id="_utilities_8hpp_source_1l00114"/><link linkend="_structutilities_1_1pack2array_1aff5f3e688a6d88206663fac8959e5254">00114</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>&#32;<link linkend="_structutilities_1_1pack2array_1aff5f3e688a6d88206663fac8959e5254">operator()</link>(Ts&amp;&amp;&#32;...args)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>&#32;&#32;content&#32;=&#32;<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>{std::forward(args...)};
<anchor xml:id="_utilities_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;content;
<anchor xml:id="_utilities_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00118"/>00118 
<anchor xml:id="_utilities_8hpp_source_1l00119"/><link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">00119</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">elem_type</link>&#32;=&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structutilities_1_1pack2tuple">pack2tuple</link>&lt;Ts...&gt;::elem_type&lt;0&gt;;
<anchor xml:id="_utilities_8hpp_source_1l00120"/>00120 
<anchor xml:id="_utilities_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;J&gt;
<anchor xml:id="_utilities_8hpp_source_1l00122"/><link linkend="_structutilities_1_1pack2array_1a771595ff4aaf2523a89c4aed11e5c16c">00122</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">elem_type</link>&#32;<link linkend="_structutilities_1_1pack2array_1a771595ff4aaf2523a89c4aed11e5c16c">get</link>(Ts&amp;&amp;&#32;...args)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>&#32;&#32;content&#32;=&#32;{std::forward(args...)};
<anchor xml:id="_utilities_8hpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819">elem_type</link>&#32;ret{std::get&lt;J&gt;(std::forward(content))};
<anchor xml:id="_utilities_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_utilities_8hpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00127"/>00127 
<anchor xml:id="_utilities_8hpp_source_1l00131"/>00131 
<anchor xml:id="_utilities_8hpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;std::size_t...&#32;I&gt;
<anchor xml:id="_utilities_8hpp_source_1l00133"/><link linkend="_structutilities_1_1pack2array_1af8e2f179474b34f00d87b1f670abda42">00133</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1af8e2f179474b34f00d87b1f670abda42">for_each_impl</link>(
<anchor xml:id="_utilities_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>&amp;&#32;iarray,
<anchor xml:id="_utilities_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Ts...args,
<anchor xml:id="_utilities_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::index_sequence&lt;I...&gt;
<anchor xml:id="_utilities_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;(&#32;iarray[I]&#32;=&#32;std::get&lt;I&gt;(&#32;std::make_tuple(args...)&#32;)&#32;)&#32;,&#32;...);
<anchor xml:id="_utilities_8hpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_utilities_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00142"/>00142 
<anchor xml:id="_utilities_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00144"/><link linkend="_structutilities_1_1pack2array_1ac0a1c575813515e6ab144a2652e65832">00144</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structutilities_1_1pack2array_1ac0a1c575813515e6ab144a2652e65832">for_each</link>(<link linkend="_structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671">array_type</link>&amp;&#32;iarray,<emphasis role="keyword">const</emphasis>&#32;Ts...args)&#32;noexcept&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size_of_pack{<emphasis role="keyword">sizeof</emphasis>...(args)};
<anchor xml:id="_utilities_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for_each_impl(
<anchor xml:id="_utilities_8hpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iarray,
<anchor xml:id="_utilities_8hpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args...,
<anchor xml:id="_utilities_8hpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_index_sequence&lt;size_of_pack&gt;{}
<anchor xml:id="_utilities_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_utilities_8hpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_utilities_8hpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00153"/>00153 };
<anchor xml:id="_utilities_8hpp_source_1l00154"/>00154 
<anchor xml:id="_utilities_8hpp_source_1l00155"/>00155 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&#32;Ts&gt;
<anchor xml:id="_utilities_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
<anchor xml:id="_utilities_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all_are_the_same_type_c&lt;Ts...&gt;
<anchor xml:id="_utilities_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;there_is_one_or_more_c&lt;Ts...&gt;
<anchor xml:id="_utilities_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_utilities_8hpp_source_1l00160"/><link linkend="_namespaceutilities_1a0f549ca7e224442069f979e4beaaab88">00160</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceutilities_1a0f549ca7e224442069f979e4beaaab88">assign_with_order</link>(
<anchor xml:id="_utilities_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;dest&#32;,
<anchor xml:id="_utilities_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Ts&amp;...&#32;args
<anchor xml:id="_utilities_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;<emphasis role="keyword">noexcept</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00164"/>00164 {
<anchor xml:id="_utilities_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1pack2array_1ac0a1c575813515e6ab144a2652e65832">pack2array&lt;Ts...&gt;::for_each</link>(dest,args...);
<anchor xml:id="_utilities_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_utilities_8hpp_source_1l00167"/>00167 }
<anchor xml:id="_utilities_8hpp_source_1l00173"/>00173 
<anchor xml:id="_utilities_8hpp_source_1l00174"/><link linkend="_namespaceutilities_1_1special">00174</link> <emphasis role="keyword">namespace&#32;</emphasis>special&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00175"/>00175 
<anchor xml:id="_utilities_8hpp_source_1l00177"/>00177 <emphasis role="keyword">template</emphasis>&lt;NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;B,NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;L&gt;
<anchor xml:id="_utilities_8hpp_source_1l00178"/>00178 <emphasis role="keyword">consteval</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00179"/><link linkend="_namespaceutilities_1_1special_1a3645f9215c31596f25430e9c722eef17">00179</link> <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_namespaceutilities_1_1special_1a3645f9215c31596f25430e9c722eef17">Base_pow_to_Size</link>()&#32;noexcept&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;Bc{B};
<anchor xml:id="_utilities_8hpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L==0)
<anchor xml:id="_utilities_8hpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(1);
<anchor xml:id="_utilities_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L==1)
<anchor xml:id="_utilities_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Bc);
<anchor xml:id="_utilities_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(L==2)
<anchor xml:id="_utilities_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Bc*Bc);
<anchor xml:id="_utilities_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Bc*<link linkend="_namespaceutilities_1_1special_1a3645f9215c31596f25430e9c722eef17">Base_pow_to_Size</link>&lt;B,L-1&gt;());
<anchor xml:id="_utilities_8hpp_source_1l00189"/>00189 }
<anchor xml:id="_utilities_8hpp_source_1l00190"/>00190 
<anchor xml:id="_utilities_8hpp_source_1l00192"/>00192 <emphasis role="keyword">template</emphasis>&lt;NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Base,NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Exp&gt;
<anchor xml:id="_utilities_8hpp_source_1l00193"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">00193</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00194"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">00194</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Base);
<anchor xml:id="_utilities_8hpp_source_1l00195"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a18389207e612ede874167dc399c02826">00195</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a18389207e612ede874167dc399c02826">exponent</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Exp);
<anchor xml:id="_utilities_8hpp_source_1l00196"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a17f0d1b4cf62a74554413151bfc6629d">00196</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a17f0d1b4cf62a74554413151bfc6629d">value</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>*(<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&lt;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>,<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a18389207e612ede874167dc399c02826">exponent</link>-1&gt;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a17f0d1b4cf62a74554413151bfc6629d">::value</link>);
<anchor xml:id="_utilities_8hpp_source_1l00197"/>00197 };
<anchor xml:id="_utilities_8hpp_source_1l00198"/>00198 <emphasis role="keyword">template</emphasis>&lt;NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Base&gt;
<anchor xml:id="_utilities_8hpp_source_1l00199"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_012_01_4">00199</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&lt;Base,2&gt;&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00200"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_012_01_4_1aadf9e01f5cc05bf5c34656e09b1370d2">00200</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Base);
<anchor xml:id="_utilities_8hpp_source_1l00201"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_012_01_4_1a7813bfd67f20e5a35a0615fb59da5ded">00201</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a18389207e612ede874167dc399c02826">exponent</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(2);
<anchor xml:id="_utilities_8hpp_source_1l00202"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_012_01_4_1aac25bd7fe869f2df3657077012ac2b0d">00202</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a17f0d1b4cf62a74554413151bfc6629d">value</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>*<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>;
<anchor xml:id="_utilities_8hpp_source_1l00203"/>00203 };
<anchor xml:id="_utilities_8hpp_source_1l00204"/>00204 <emphasis role="keyword">template</emphasis>&lt;NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Base&gt;
<anchor xml:id="_utilities_8hpp_source_1l00205"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_011_01_4">00205</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&lt;Base,1&gt;&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00206"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_011_01_4_1ae275de86799ac539564d4df469f77830">00206</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Base);
<anchor xml:id="_utilities_8hpp_source_1l00207"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_011_01_4_1af70ce68d6a77de9d50120e24a22003b8">00207</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a18389207e612ede874167dc399c02826">exponent</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(1);
<anchor xml:id="_utilities_8hpp_source_1l00208"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_011_01_4_1a8a2588d336127ed170c7433f25030ab8">00208</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a17f0d1b4cf62a74554413151bfc6629d">value</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>;
<anchor xml:id="_utilities_8hpp_source_1l00209"/>00209 };
<anchor xml:id="_utilities_8hpp_source_1l00210"/>00210 <emphasis role="keyword">template</emphasis>&lt;NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Base&gt;
<anchor xml:id="_utilities_8hpp_source_1l00211"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_010_01_4">00211</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t</link>&lt;Base,0&gt;&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00212"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_010_01_4_1a1d7328f79e3d83c4b936c3b5a55d7f8d">00212</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a03e94eee98295a1f25fd3fd449e6e4b7">base</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(Base);
<anchor xml:id="_utilities_8hpp_source_1l00213"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_010_01_4_1aa89fa4d1d3caf25c460be700a292070c">00213</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a18389207e612ede874167dc399c02826">exponent</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(0);
<anchor xml:id="_utilities_8hpp_source_1l00214"/><link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_3_01_base_00_010_01_4_1a586db44bff1accd46725d000c7db247e">00214</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t_1a17f0d1b4cf62a74554413151bfc6629d">value</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link><emphasis role="keyword">&gt;</emphasis>(1);
<anchor xml:id="_utilities_8hpp_source_1l00215"/>00215 };
<anchor xml:id="_utilities_8hpp_source_1l00216"/>00216 
<anchor xml:id="_utilities_8hpp_source_1l00217"/>00217 <emphasis role="keyword">template</emphasis>&lt;NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Base,NumRepr::us<emphasis role="keywordtype">int</emphasis>_t&#32;Exp&gt;
<anchor xml:id="_utilities_8hpp_source_1l00218"/><link linkend="_namespaceutilities_1_1special_1a0c24705b4d3cfd27689f38201488c087">00218</link> <emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>&#32;<link linkend="_namespaceutilities_1_1special_1a0c24705b4d3cfd27689f38201488c087">Pow_B2L_v</link>&#32;=&#32;<link linkend="_structutilities_1_1special_1_1pow___b__to___e__t">pow_B_to_E_t&lt;Base,Exp&gt;::value</link>;
<anchor xml:id="_utilities_8hpp_source_1l00219"/>00219 
<anchor xml:id="_utilities_8hpp_source_1l00222"/>00222 
<anchor xml:id="_utilities_8hpp_source_1l00224"/>00224 <emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;IntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">int</emphasis>64_t,std::<emphasis role="keywordtype">int</emphasis>64_t&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
<anchor xml:id="_utilities_8hpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;((BeginIntObj_ct&#32;&gt;=&#32;EndIntObj_ct)&amp;&amp;(IntObj_ct&#32;&gt;=&#32;BeginIntObj_ct))
<anchor xml:id="_utilities_8hpp_source_1l00232"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t">00232</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t">tuple_builder_t</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00233"/>00233 
<anchor xml:id="_utilities_8hpp_source_1l00234"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1aaa43bea40f3950c7306dec764af33e3a">00234</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1aaa43bea40f3950c7306dec764af33e3a">type</link>&#32;=&#32;std::int64_t;
<anchor xml:id="_utilities_8hpp_source_1l00235"/>00235 
<anchor xml:id="_utilities_8hpp_source_1l00236"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a5b618e051095d223d94c0b5ee22078ce">00236</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;unit&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(1);
<anchor xml:id="_utilities_8hpp_source_1l00237"/>00237 
<anchor xml:id="_utilities_8hpp_source_1l00238"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a7f4fcc4e63e19549e07ef49da9f04398">00238</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;value{IntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00239"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1aa5fd05539d987050763c55b8d0ca8aac">00239</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;begin_value{BeginIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00240"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1ade677d56bc43f6930b30b97deab2928b">00240</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;end_value{EndIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00241"/>00241 
<anchor xml:id="_utilities_8hpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">consteval</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00243"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a8e1ed3d327091c5f21f835adea83ec3f">00243</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a8e1ed3d327091c5f21f835adea83ec3f">build</link>()
<anchor xml:id="_utilities_8hpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tuple_cat(
<anchor xml:id="_utilities_8hpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_tuple(std::make_tuple(value,Funct_tt&lt;Base,value&gt;{}())),
<anchor xml:id="_utilities_8hpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a8e1ed3d327091c5f21f835adea83ec3f">tuple_builder_t&lt;value+unit,begin_value,end_value,Base,Funct_tt&gt;::build</link>()
<anchor xml:id="_utilities_8hpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_utilities_8hpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00251"/>00251 
<anchor xml:id="_utilities_8hpp_source_1l00252"/>00252 };
<anchor xml:id="_utilities_8hpp_source_1l00253"/>00253 
<anchor xml:id="_utilities_8hpp_source_1l00255"/>00255 <emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">int</emphasis>64_t,std::<emphasis role="keywordtype">int</emphasis>64_t&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
<anchor xml:id="_utilities_8hpp_source_1l00261"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802">00261</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutilities_1_1special_1_1tuple__builder__t">tuple_builder_t</link>&lt;EndIntObj_ct-1,BeginIntObj_ct,EndIntObj_ct,Base,Funct_tt&gt;&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00262"/>00262 
<anchor xml:id="_utilities_8hpp_source_1l00263"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1ac530c0ab3a98a57fa2014b41f22b8676">00263</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1ac530c0ab3a98a57fa2014b41f22b8676">type</link>&#32;=&#32;std::int64_t;
<anchor xml:id="_utilities_8hpp_source_1l00264"/>00264 
<anchor xml:id="_utilities_8hpp_source_1l00265"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1a5e639670b0914aa4dd40496a12a2e84c">00265</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a5b618e051095d223d94c0b5ee22078ce">unit</link>&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(1);
<anchor xml:id="_utilities_8hpp_source_1l00266"/>00266 
<anchor xml:id="_utilities_8hpp_source_1l00267"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1adf90b0c747ad6d5fcbe51e4965ad713f">00267</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a7f4fcc4e63e19549e07ef49da9f04398">value</link>{EndIntObj_ct-<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a5b618e051095d223d94c0b5ee22078ce">unit</link>};
<anchor xml:id="_utilities_8hpp_source_1l00268"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1a9e97fc5b1ca3232b40629aaa5187b884">00268</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1aa5fd05539d987050763c55b8d0ca8aac">begin_value</link>{BeginIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00269"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1a4e46a15f03b4f6125e48d0fc2287a6b3">00269</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::int64_t&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1ade677d56bc43f6930b30b97deab2928b">end_value</link>{EndIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00270"/>00270 
<anchor xml:id="_utilities_8hpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">consteval</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00272"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1a55aa2fc522a7eafb0bc8fc5384c199cc">00272</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_end_int_obj__ct-1_00_01_begin_int_obj__ct_0ca0ca34624b3cee9c3ca5b4040f52802_1a55aa2fc522a7eafb0bc8fc5384c199cc">build</link>()
<anchor xml:id="_utilities_8hpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(std::make_tuple(<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a7f4fcc4e63e19549e07ef49da9f04398">value</link>,Funct_tt&lt;Base,value&gt;{}()));
<anchor xml:id="_utilities_8hpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00276"/>00276 
<anchor xml:id="_utilities_8hpp_source_1l00277"/>00277 };
<anchor xml:id="_utilities_8hpp_source_1l00278"/>00278 
<anchor xml:id="_utilities_8hpp_source_1l00280"/>00280 <emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">int</emphasis>64_t,std::<emphasis role="keywordtype">int</emphasis>64_t&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
<anchor xml:id="_utilities_8hpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(BeginIntObj_ct&#32;&lt;=&#32;EndIntObj_ct)
<anchor xml:id="_utilities_8hpp_source_1l00287"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21">00287</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t">tuple_builder_t&lt;BeginIntObj_ct,BeginIntObj_ct,EndIntObj_ct,Base,Funct_tt&gt;</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00288"/>00288 
<anchor xml:id="_utilities_8hpp_source_1l00289"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1af658a886eb733fd518d8d3b0920641dd">00289</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1af658a886eb733fd518d8d3b0920641dd">type</link>&#32;=&#32;std::int64_t;
<anchor xml:id="_utilities_8hpp_source_1l00290"/>00290 
<anchor xml:id="_utilities_8hpp_source_1l00291"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1aa55281dc2747c4ef8f2d6711cbb7ba7e">00291</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1af658a886eb733fd518d8d3b0920641dd">type</link>&#32;&#32;&#32;unit&#32;&#32;=&#32;1;
<anchor xml:id="_utilities_8hpp_source_1l00292"/>00292 
<anchor xml:id="_utilities_8hpp_source_1l00293"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1afd02e57d9beaa8e3094fa06a47b1abee">00293</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1af658a886eb733fd518d8d3b0920641dd">type</link>&#32;&#32;&#32;value{BeginIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00294"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1ab979913cde5632c13b1b1baa5498ad82">00294</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1af658a886eb733fd518d8d3b0920641dd">type</link>&#32;&#32;&#32;begin_value{BeginIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00295"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1add38b4094dd55a686f2a0fbdd1092466">00295</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1af658a886eb733fd518d8d3b0920641dd">type</link>&#32;&#32;&#32;end_value{EndIntObj_ct};
<anchor xml:id="_utilities_8hpp_source_1l00296"/>00296 
<anchor xml:id="_utilities_8hpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">consteval</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00298"/><link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1a86b75b979de0c5767a791bb4b0731793">00298</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_3_01_begin_int_obj__ct_00_01_begin_int_obj__ct_0acf174306e1877482e57b362979e4e21_1a86b75b979de0c5767a791bb4b0731793">build</link>()
<anchor xml:id="_utilities_8hpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tuple_cat(
<anchor xml:id="_utilities_8hpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_tuple(
<anchor xml:id="_utilities_8hpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_tuple(value,Funct_tt&lt;Base,value&gt;{}())
<anchor xml:id="_utilities_8hpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;),
<anchor xml:id="_utilities_8hpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a8e1ed3d327091c5f21f835adea83ec3f">tuple_builder_t&lt;begin_value+unit,begin_value,end_value,Base,Funct_tt&gt;::build</link>()
<anchor xml:id="_utilities_8hpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_utilities_8hpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_utilities_8hpp_source_1l00308"/>00308 
<anchor xml:id="_utilities_8hpp_source_1l00309"/>00309 };
<anchor xml:id="_utilities_8hpp_source_1l00310"/>00310 
<anchor xml:id="_utilities_8hpp_source_1l00311"/>00311 <emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">int</emphasis>64_t,std::<emphasis role="keywordtype">int</emphasis>64_t&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00316"/>00316 &gt;
<anchor xml:id="_utilities_8hpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(BeginIntObj_ct&#32;&lt;&#32;EndIntObj_ct)
<anchor xml:id="_utilities_8hpp_source_1l00318"/><link linkend="_structutilities_1_1special_1_1tuple__user__constructor__t">00318</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structutilities_1_1special_1_1tuple__user__constructor__t">tuple_user_constructor_t</link>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00319"/><link linkend="_structutilities_1_1special_1_1tuple__user__constructor__t_1a815b9f98f9de37d096dbb4453c1fbd6b">00319</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;value&#32;=
<anchor xml:id="_utilities_8hpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__builder__t">tuple_builder_t</link>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;::build();
<anchor xml:id="_utilities_8hpp_source_1l00327"/>00327 };
<anchor xml:id="_utilities_8hpp_source_1l00328"/>00328 
<anchor xml:id="_utilities_8hpp_source_1l00329"/>00329 <emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">int</emphasis>64_t,std::<emphasis role="keywordtype">int</emphasis>64_t&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00334"/>00334 &gt;
<anchor xml:id="_utilities_8hpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(BeginIntObj_ct&#32;&lt;&#32;EndIntObj_ct)
<anchor xml:id="_utilities_8hpp_source_1l00336"/><link linkend="_namespaceutilities_1_1special_1ada5efac888ec6774ade3b0ff5911cb89">00336</link> <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespaceutilities_1_1special_1ada5efac888ec6774ade3b0ff5911cb89">tuple_constr_v</link>&#32;=
<anchor xml:id="_utilities_8hpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutilities_1_1special_1_1tuple__user__constructor__t">tuple_user_constructor_t</link>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BeginIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndIntObj_ct,
<anchor xml:id="_utilities_8hpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Funct_tt
<anchor xml:id="_utilities_8hpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;::build();
<anchor xml:id="_utilities_8hpp_source_1l00343"/>00343 
<anchor xml:id="_utilities_8hpp_source_1l00344"/>00344 <emphasis role="keyword">template</emphasis>&#32;&lt;
<anchor xml:id="_utilities_8hpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;start,
<anchor xml:id="_utilities_8hpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;...&#32;Is,
<anchor xml:id="_utilities_8hpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t,
<anchor xml:id="_utilities_8hpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t
<anchor xml:id="_utilities_8hpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Funct_tt,
<anchor xml:id="_utilities_8hpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;...&#32;Ts
<anchor xml:id="_utilities_8hpp_source_1l00353"/>00353 &gt;
<anchor xml:id="_utilities_8hpp_source_1l00354"/>00354 <emphasis role="keyword">constexpr</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00355"/><link linkend="_namespaceutilities_1_1special_1a600ef880527fb943066e81d144a572d4">00355</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceutilities_1_1special_1a600ef880527fb943066e81d144a572d4">ctf_helper</link>&#32;(
<anchor xml:id="_utilities_8hpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::index_sequence&lt;Is...&gt;,
<anchor xml:id="_utilities_8hpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tuple&lt;Ts...&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;t
<anchor xml:id="_utilities_8hpp_source_1l00358"/>00358 )&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(Funct_tt&lt;Base,Is&gt;{}(std::get&lt;start&#32;+&#32;Is&gt;(t)),&#32;...);
<anchor xml:id="_utilities_8hpp_source_1l00360"/>00360 }
<anchor xml:id="_utilities_8hpp_source_1l00361"/>00361 
<anchor xml:id="_utilities_8hpp_source_1l00362"/>00362 <emphasis role="keyword">template</emphasis>&#32;&lt;
<anchor xml:id="_utilities_8hpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;start,
<anchor xml:id="_utilities_8hpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;end,
<anchor xml:id="_utilities_8hpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;Base,
<anchor xml:id="_utilities_8hpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;
<anchor xml:id="_utilities_8hpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>,
<anchor xml:id="_utilities_8hpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t,
<anchor xml:id="_utilities_8hpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t
<anchor xml:id="_utilities_8hpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Funct_tt,
<anchor xml:id="_utilities_8hpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;...&#32;Ts
<anchor xml:id="_utilities_8hpp_source_1l00372"/>00372 &gt;
<anchor xml:id="_utilities_8hpp_source_1l00373"/>00373 <emphasis role="keyword">constexpr</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00374"/><link linkend="_namespaceutilities_1_1special_1a450a92504b01e717cfe785076cf97b93">00374</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceutilities_1_1special_1a450a92504b01e717cfe785076cf97b93">ct_for</link>&#32;(std::tuple&lt;Ts...&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctf_helper&lt;start,Base,Funct_tt&gt;(std::make_index_sequence&lt;end-start&gt;{},&#32;t);
<anchor xml:id="_utilities_8hpp_source_1l00376"/>00376 }
<anchor xml:id="_utilities_8hpp_source_1l00377"/>00377 
<anchor xml:id="_utilities_8hpp_source_1l00379"/>00379 <emphasis role="keyword">template</emphasis>&lt;auto&#32;B,auto&#32;L,<emphasis role="keyword">typename</emphasis>&#32;A&gt;
<anchor xml:id="_utilities_8hpp_source_1l00380"/>00380 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>
<anchor xml:id="_utilities_8hpp_source_1l00381"/>00381 <link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>
<anchor xml:id="_utilities_8hpp_source_1l00382"/><link linkend="_namespaceutilities_1_1special_1a92614fb496f783431fe229a771f40a00">00382</link> <link linkend="_namespaceutilities_1_1special_1a92614fb496f783431fe229a771f40a00">conversion_to_int</link>(<emphasis role="keyword">const</emphasis>&#32;A&amp;&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1a412296ccfc8e357e166ab1365f2777f3">NumRepr::uint128_t</link>;
<anchor xml:id="_utilities_8hpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_num_repr_1a7673a3c7d88f28a54277d1d03bca2502">NumRepr::sint128_t</link>;
<anchor xml:id="_utilities_8hpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;uint128_t&#32;base{<emphasis role="keyword">static_cast&lt;</emphasis>uint128_t<emphasis role="keyword">&gt;</emphasis>(B)};
<anchor xml:id="_utilities_8hpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint128_t&#32;acc{arg[L-1]()};
<anchor xml:id="_utilities_8hpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(sint128_t&#32;ix{L-2}&#32;;&#32;ix&#32;&gt;&#32;-1&#32;;&#32;--ix)&#32;{
<anchor xml:id="_utilities_8hpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;acc&#32;*=&#32;base;
<anchor xml:id="_utilities_8hpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;acc&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint128_t<emphasis role="keyword">&gt;</emphasis>(arg[ix]());
<anchor xml:id="_utilities_8hpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="_utilities_8hpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;acc;
<anchor xml:id="_utilities_8hpp_source_1l00392"/>00392 }
<anchor xml:id="_utilities_8hpp_source_1l00393"/>00393 
<anchor xml:id="_utilities_8hpp_source_1l00394"/>00394 
<anchor xml:id="_utilities_8hpp_source_1l00395"/>00395 
<anchor xml:id="_utilities_8hpp_source_1l00396"/>00396 }
<anchor xml:id="_utilities_8hpp_source_1l00397"/>00397 
<anchor xml:id="_utilities_8hpp_source_1l00398"/>00398 }
<anchor xml:id="_utilities_8hpp_source_1l00399"/>00399 
<anchor xml:id="_utilities_8hpp_source_1l00400"/>00400 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;UTILITIES_HPP_INCLUDED</emphasis>
</programlisting></section>
