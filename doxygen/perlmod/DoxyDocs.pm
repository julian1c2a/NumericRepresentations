$doxydocs=
{
  classes => [
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename SInt'
        }
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< schint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'signed_gt_signed_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< schint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< schint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< signed_gt_signed_v< ssint_t >, ssint_t, typename __sig_SInt_for_SInt_t< ssint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'signed_gt_signed_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<SINT_T,schint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'signed_gt_signed_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< signed_gt_signed_v< slint_t >, slint_t, typename __sig_SInt_for_SInt_t< slint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'signed_gt_signed_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<SINT_T,sint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< slint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'signed_gt_signed_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< slint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< slint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< signed_gt_signed_v< sllint_t >, sllint_t, typename __sig_SInt_for_SInt_t< sllint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'signed_gt_signed_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<SINT_T,slint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sllint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sllint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sint128_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< ssint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'signed_gt_signed_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< ssint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< ssint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< signed_gt_signed_v< sint_t >, sint_t, typename __sig_SInt_for_SInt_t< sint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'signed_gt_signed_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<SINT_T,ssint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename UInt'
        }
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uchint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'int_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uchint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uchint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< int_type_gt_this_type_v< ssint_t >, ssint_t, typename __sig_SInt_for_UInt_t< usint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'int_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<int_type,uchint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'int_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< int_type_gt_this_type_v< slint_t >, slint_t, typename __sig_SInt_for_UInt_t< ulint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'int_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<int_type,uint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ulint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'int_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ulint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ulint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< int_type_gt_this_type_v< sllint_t >, sllint_t, typename __sig_SInt_for_UInt_t< ullint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'int_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<int_type,ulint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ullint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ullint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sint128_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< usint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'int_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< usint_t >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< usint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< int_type_gt_this_type_v< sint_t >, sint_t, typename __sig_SInt_for_UInt_t< uint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'int_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<int_type,usint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename SInt'
        }
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< schint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< schint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'uchint_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint128_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint128_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'uint128_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'uint_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< slint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< slint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'ulint_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sllint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sllint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'ullint_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< ssint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< ssint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'unsigned_integral_c',
          declaration_name => 'UInt_t',
          definition_name => 'UInt_t'
        }
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uchint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uchint_t >'
        },
        {
          name => 'uint_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uchint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< uint_type_gt_this_type_v< usint_t >, usint_t, typename __sig_UInt_for_UInt_t< usint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'uint_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<uint_type,uchint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uint_t >'
        },
        {
          name => 'uint_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< uint_type_gt_this_type_v< ulint_t >, ulint_t, typename __sig_UInt_for_UInt_t< ulint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'uint_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<uint_type,uint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ulint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ulint_t >'
        },
        {
          name => 'uint_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ulint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::conditional_t< uint_type_gt_this_type_v< ullint_t >, ullint_t, typename __sig_UInt_for_UInt_t< ullint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'uint_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<uint_type,ulint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ullint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ullint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'uint128_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< usint_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
      ],
      all_members => [
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< usint_t >'
        },
        {
          name => 'uint_type_gt_this_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< usint_t >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< uint_type_gt_this_type_v< uint_t >, uint_t, typename __sig_UInt_for_UInt_t< uint_t >::type >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'uint_type_gt_this_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= gt_sz_v<uint_type,usint_t>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'std::array',
      kind => 'class',
      derived => [
        {
          name => 'NumRepr::reg_digs_t< UINT_T, B, L >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'base_num_t',
      kind => 'class',
      derived => [
        {
          name => 'int_num_t< UINT_T, B >',
          virtualness => 'non_virtual',
          protection => 'protected'
        },
        {
          name => 'nat_num_t< UINT_T, B >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::base_num_t',
      kind => 'struct',
      base => [
        {
          name => 'basic_string',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'base_num_t.hpp'
      },
      template_parameters => [
        {
          type => 'type_traits::uint_type_for_radix_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        }
      ],
      all_members => [
        {
          name => 'base_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'begin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'c_str_iterator',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'clear',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'cr_str_iterator',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'end',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'erase',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'push_back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'push_front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'r_str_iterator',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'rbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'rend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'resize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'str_iterator',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        },
        {
          name => 'substr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::base_num_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t< UINT_T, B >'
          },
          {
            kind => 'typedef',
            name => 'base_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'basic_string< dig_t >'
          },
          {
            kind => 'typedef',
            name => 'str_iterator',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_t::iterator'
          },
          {
            kind => 'typedef',
            name => 'c_str_iterator',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_t::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'r_str_iterator',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_t::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'cr_str_iterator',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_t::const_reverse_iterator'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'resize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'ullint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'ullint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'clear',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'push_back',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos',
                type => 'size_t'
              },
              {
                declaration_name => 'tam',
                type => 'size_t'
              },
              {
                declaration_name => 'parg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'substr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr num_basic_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos',
                type => 'size_t'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'push_front',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'parg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'begin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr str_iterator',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'end',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr c_str_iterator',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rbegin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr r_str_iterator',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rend',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr cr_str_iterator',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'erase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos',
                type => 'size_t'
              },
              {
                declaration_name => 'tam',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const num_basic_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_basic_t &'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'basic_string',
      kind => 'class',
      derived => [
        {
          name => 'NumRepr::base_num_t< UINT_T, B >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_delete',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'uchint',
          declaration_name => 'B',
          definition_name => 'B'
        }
      ],
      all_members => [
        {
          name => 'destruye_lista_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_delete'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_delete'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'destruye_lista_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list',
                type => 'aT *'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_delete< 0u >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'usint',
          declaration_name => 'num_vars',
          definition_name => 'num_vars'
        }
      ],
      all_members => [
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_delete< 0u >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_delete< 1u >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_delete< 1u >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_delete< 2u >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'contruye_lista_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_delete< 2u >'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_delete< 2u >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'contruye_lista_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list',
                type => 'aT *'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_delete< aT, T, std::numeric_limits< uchint >::max()>',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'contruye_lista_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_delete< aT, T, std::numeric_limits< uchint >::max()>'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_delete< aT, T, std::numeric_limits< uchint >::max()>'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'contruye_lista_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list',
                type => 'aT *'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_new',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'usint',
          declaration_name => 'num_vars',
          definition_name => 'num_vars'
        },
        {
          type => 'uchint',
          declaration_name => 'B',
          definition_name => 'B'
        }
      ],
      all_members => [
        {
          name => 'contruye_lista_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_new'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_new'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'contruye_lista_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static aT *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list',
                type => 'aT *'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_new< 0u >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'usint',
          declaration_name => 'num_vars',
          definition_name => 'num_vars'
        }
      ],
      all_members => [
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_new< 0u >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_new< 1u >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'usint',
          declaration_name => 'num_vars',
          definition_name => 'num_vars'
        }
      ],
      all_members => [
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_new< 1u >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_new< 2 >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'usint',
          declaration_name => 'num_vars',
          definition_name => 'num_vars'
        }
      ],
      all_members => [
        {
          name => 'contruye_lista_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_new< 2 >'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_new< 2 >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'contruye_lista_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static aT *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list',
                type => 'aT *'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'details::cp_new< aT, T, std::numeric_limits< uchint >::max()>',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'usint',
          declaration_name => 'num_vars',
          definition_name => 'num_vars'
        }
      ],
      all_members => [
        {
          name => 'contruye_lista_de_listas_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_new< aT, T, std::numeric_limits< uchint >::max()>'
        },
        {
          name => 'contruye_lista_de_variables',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'details::cp_new< aT, T, std::numeric_limits< uchint >::max()>'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'details::cp_new< aT, T, std::numeric_limits< uchint >::max()>'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'contruye_lista_de_listas_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static aT **',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list_list',
                type => 'aT **'
              }
            ]
          },
          {
            kind => 'function',
            name => 'contruye_lista_de_variables',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static aT *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'var_list',
                type => 'aT *'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::dig_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'dig_t.hpp'
      },
      template_parameters => [
        {
          type => 'uint_type_for_radix_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        }
      ],
      all_members => [
        {
          name => 'C_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'C_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_submax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'digspair',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'get_digit_token',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'get_radix_token',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'get_type_template_string_id_token',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_0_divisor',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_0or1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_Bm1orBm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_far_maxormin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_maxormin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_near_maxormin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_0or1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_Bm1orBm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_not_maxormin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_prime',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'is_unit',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'm_d',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'mC_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'mC_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'mult',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'mult_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'normaliza',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'num_to_string',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator SIG_SINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator SIG_UINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator UINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator!',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator%',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator%',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator%=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator%=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator&',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator/',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator/',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator/=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator/=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator^',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator^=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator|',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'operator|=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'radix_str',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'read',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'resbinop_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'set_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'set_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'set_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'set_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'SIG_SINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'SIG_UINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'size_of_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ssi_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ssi_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ssi_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ssi_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ssi_submax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'sui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'sui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'sui_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'sui_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'sui_submax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'sum_carry',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'to_string',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'to_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ui_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ui_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ui_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'ui_submax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'uintspair',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'uintspairlist',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        },
        {
          name => 'uintspairtbl',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::dig_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'SIG_UINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sig_UInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'SIG_SINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sig_SInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'uintspair',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< UINT_T, 2 >'
          },
          {
            kind => 'typedef',
            name => 'digspair',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< dig_t, 2 >'
          },
          {
            kind => 'typedef',
            name => 'uintspairlist',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< uintspair, B >'
          },
          {
            kind => 'typedef',
            name => 'uintspairtbl',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< uintspairlist, B >'
          },
          {
            kind => 'typedef',
            name => 'resbinop_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : CONSTRUCCION DE LAS TABLAS DE MULTIPLICAR ESTATICAS PARA TODA LA CLASE '
                }
              ]
            },
            type => 'auxiliary_types::resbinop_t< dig_t, op >'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator UINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'PARA B=3 2*2 1 COMIENZAN POR 2 B-2 PARA B=4 2*2 2*3 3*4 3 COMIENZAN POR 2 B-2, 3 B-3 PARA B=5 2*2 2*3 2*4 3*3 3*4 4*4 6 COMIENZAN POR 2 B-2, 3 B-3, 4 B-4 PARA B=6 2*2 2*3 2*4 2*5 3*3 3*4 3*5 4*4 4*5 5*5 10 COMIENZAN POR 2 B-2, 3 B-3, 4 B-4, 5 B-5 PARA B=r 2*2 2*(2+1) ... 2*(r-1) r-1 r COMIENZAN POR 2 B-2, 3 B-3, 4 B-4, 5 B-1, ... , r-1 B-r+1 3*3 ... 3*(r-1) r-2 ... (r-1)*(r-1) r-(r-1) '
                },
                {
                  type => 'hruler'
                },
                {
                  type => 'text',
                  content => ' (r-2)r-(r-1)*r/2 + 1 = [2(r-2)-((r-2)+1)]r/2 + 1 = ((r-3)r + 2)/2 = (r^2 - 3r + 2) / 2 '
                },
                {
                  type => 'sect2',
                  title => 'a r^2 + b r + c',
                  content => [
                    {
                      type => 'text',
                      content => '1 = a 9 + b 3 + c 3 = a 16 + b 4 + c '
                    }
                  ]
                },
                {
                  type => 'sect2',
                  title => '6 = a 25 + b 5 + c',
                  content => [
                    {
                      type => 'text',
                      content => '1 = a 9 + b 3 + c 2 = a 7 + b 1 '
                    }
                  ]
                },
                {
                  type => 'sect2',
                  title => '5 = a 16 + b 2',
                  content => [
                    {
                      type => 'text',
                      content => '1 = a 9 + b 3 + c 2 = a 7 + b '
                    }
                  ]
                },
                {
                  type => 'sect2',
                  title => '1 = a  2',
                  content => [
                    {
                      type => 'text',
                      content => 'c = 2/2 b = -3/2 '
                    }
                  ]
                },
                {
                  type => 'sect2',
                  title => 'a =  1/2',
                  content => [
                    {
                      type => 'text',
                      content => 'SIZE = (B^2 - 3B + 2)/2 2+3+4+...+B-1 = 1+2+3+4+...+B-1 - 1 = (B-1)B/2 - 2(B-1)/2 = (B^2 - B - 2B +2)/2 = =(B^2-3B+2)/2'
                    },
                    {
                      type => 'parbreak'
                    },
                    {
                      type => 'text',
                      content => 'FALTARIA HACER SOLO PARA BASES MAYORES QUE 2 CODE NEW USING TYPES : using pair_map = std::pair<uintspair,uintspair>; CODE MULTTABLE: static consteval std::array<pair_map,(B^2 - 3B + 2)/2> multtable{make_multtables()}; CODE FOR MAKE_MULTTABLES(): static consteval std::array<pair_map,(B^2 - 3B + 2)/2> make_multtables() noexcept { std::array<pair_map,(B^2 - 3B + 2)/2> ret; /// ESTO QUE SIGUE HABRIA QUE HACERLO POR UNROOLING LOOP EN COMPILE TIME /// YA QUE IDX E IDY NO SON CONSTANTES EN TIEMPO DE COMPILACION /// LO MEJOR ES HACERLO EN UNA CLASE TEMPLATE POR RECURSION for(size_t idx{2} ; idx < B ; ++idx) { for(size_t idy{idx} ; idy < B ; ++idy) { make_pair(make_array(idx,idy),'
                    },
                    {
                      type => 'url',
                      link => 'struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5',
                      content => 'mult<idx,idy>()'
                    },
                    {
                      type => 'text',
                      content => '); } } } '
                    }
                  ]
                }
              ]
            },
            type => 'constexpr',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const UINT_T &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator SIG_UINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator SIG_SINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr UINT_T',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'dig_t<uchint,10> digito{4}; digito() devuelve un 4 de tipo uchint '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '< CONSTRUCTORES CONSTRUCTOR POR DEFECTO NORMALIZA ES UNA FUNCION QUE BASICAMENTE SI ENTRA 1524 DEVUELVE 1524B TENIENDO EN CUENTA TIPOS Y SIGNOS '
                }
              ]
            },
            type => 'consteval',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR A PARTIR DE UN ENTERO ARG ARG EQUIV ARG+Z*B DONDE Z ES UN ENTERO EN m_d SOLO QUEREMOS QUE HAYA UN NUMERO ENTRE 0 Y B-1 INCLUSIVES '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA POR REFERENCIA. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR MOVIMIENTO. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'dig_t &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN INT_T. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'PODEMOS PASAR ARGUMENTOS POR COPIA, REFERENCIA (PUNTEROS) Y MOVIMIENTO COPIA : COPIA EL ARGUMENTO LITERALMENTE PARA PASARLO: EL ORIGINAL INTACTO REFERENCIA: COPIA LA DIRECCION DEL ARGUMENTO (SI ES CONST EL COMPILADOR NO TE DEJA COMPILAR SI LO CAMBIAS) MOVIMIENTO: SI EL ARGUMETO NO SE VA A UTILIZAR MAS SE LE PASA LA PROPIEDAD A LA FUNCION '
                }
              ]
            },
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const Int_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN DIG_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOBRECARGA DEL OPERATOR=() MEDIANTE MOVIMIENTO DESDE UN DIG_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'dig_t &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_unit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'a y b son digitos; a = std::move(b); a es identico a b; en b puede no queda nada; '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_0_divisor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mult_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator&',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEVOLVER EL MENOR: ANDBITWISE NO TIENE POSIBILIDAD DE ERROR '
                }
              ]
            },
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEVOLVER EL MENOR HABIENDOLO ASIGNADO ANDBITWISE AND ASSIGN NO TIENE POSIBILIDAD DE ERROR '
                }
              ]
            },
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEVOLVER EL MAYOR ORBITWISE NO TIENE POSIBILIDAD DE ERROR '
                }
              ]
            },
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEVOLVER EL MAYOR HABIENDOLO ASIGNADO ORBITWISE AND ASSIGN NO TIENE POSIBILIDAD DE ERROR '
                }
              ]
            },
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator^=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'exp',
                type => 'UIntType'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator^',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'exp',
                type => 'UIntType'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SI COMPARAMOS O HACEMOS UNA OPERACION CON UN INT_T SIEMPRE SERA DIG_T @ INT_T -> DIG_T Y NUNCA INT_T @ DIG_T -> ANY_TYPE METODO PROPIO DE C++20 '
                }
              ]
            },
            type => 'constexpr std::strong_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rhs',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rhs',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METODO PROPIO DE C++20 ESTABLECEMOS UN ORDEN PARCIAL SOBRE LOS ENTEROS SI a b EN Z ESTANDO EN ESTE AMBITO DE BASE B SI a mod B = b mod B '
                }
              ]
            },
            type => 'constexpr std::weak_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rhs',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Tengo serias dudas que la division y el resto euclideo tengan cabida entre los operadores aritmeticos de un tipo '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => ' DUDA SATISFECHA: TIENEN CABIDA PORQUE EL INVERSO MULTIPLICATIVO ETC. SOLO NOS SIRVE SI ESTUVIERAMOS CONSTRUYENDO NUMEROS DE UN ANILLO FINITO '
                }
              ]
            },
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'EN BASE B, B-1-m_d ES EL COMPL_Bm1(m_d) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'EN BASE B, B-m_d ES EL COMPL_B(m_d) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '"C_Bm1" es identico a "operator!()" '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '"C_B" es identico a "operator-()" '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'dig_t<uchint,7> a,b,c; a = 5; b = 2; c = 0; !a == 1 is TRUE a.C_Bm1() == 1 is TRUE !b == 4 is TRUE b.C_Bm1() == 4 is TRUE !c == 6 is TRUE c.C_Bm1() == 6 is TRUE -a == 2 is TRUE a.C_B() == 2 is TRUE -b == 5 is TRUE b.C_B() == 5 is TRUE -c == 0 is TRUE c.C_B() == 0 is TRUE a.mC_Bm1() == 1 is TRUE a == 1 is TRUE b.mC_Bm1() == 4 is TRUE b == 4 is TRUE c.mC_Bm1() == 6 is TRUE c == 6 is TRUE a.mC_B() == 2 is TRUE a == 2 is TRUE b.mC_B() == 5 is TRUE b == 5 is TRUE c.mC_B() == 0 is TRUE c == 0 is TRUE '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_0or1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_0or1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_Bm1orBm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_Bm1orBm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_not_maxormin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_maxormin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_far_maxormin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_near_maxormin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'to_string',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr std::string',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'get_type_template_string_id_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION GENERICA QUE CONSIGUE EL TOKEN TYPE PARA LA OBTENCION DEL OBJETO CORRESPONDIENTE POR TECLADO '
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'mult',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval uintspair',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_prime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_submax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_submax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_submax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_submax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'normaliza',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'sum_carry',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg_1',
                type => 'dig_t'
              },
              {
                declaration_name => 'arg_2',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_type_template_string_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'el parser/lexer del '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => ' '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Funciones de ayuda para '
                }
              ]
            },
            type => 'static constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'in',
                type => 'std::string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'to_type_template_string_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::string',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'size_of_type_template_string_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'get_digit_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION QUE CONSIGUE EL TOKEN DIGITO. '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'uint_value',
                type => 'UINT_T &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_radix_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION QUE CONSIGUE EL TOKEN BASE. '
                }
              ]
            },
            detailed => {},
            type => 'static bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'read',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'value',
                type => 'dig_t &'
              }
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'num_to_string',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TIENE QUE DEVOLVER STD::STRING. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::string',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_d',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT_T'
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'radix_str',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::string',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      brief => {},
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => '< WRAPPER PARA UN TIPO UINT_T QUE UNSIGNED_INTEGRAL_T<UINT_T> SE SOBRECARGAN LOS OPERADORES ARITMETICOS PARA ARITMETICA MODULAR DIG_T = SUMA Y MULTIPLICACION CIRCULAR (MODULAR CON MOD B) '
          }
        ]
      }
    },
    {
      name => 'utilities::for_each_same_type',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'class Head_t'
        },
        {
          type => 'class...',
          declaration_name => 'Tail_t',
          definition_name => 'Tail_t'
        }
      ],
      all_members => [
        {
          name => 'are_same_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::for_each_same_type'
        },
        {
          name => 'second_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::for_each_same_type'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'second_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::tuple_element< 0, std::tuple< Tail_t... > >::type'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'are_same_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= (
        (std::is_same_v<Head_t,second_t>)
		&&	(for_each_same_type<Tail_t...>::are_same_type_v)
	)'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::for_each_same_type< Head_t >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'class Head_t'
        }
      ],
      all_members => [
        {
          name => 'are_same_type_v',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::for_each_same_type< Head_t >'
        }
      ],
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'are_same_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr bool',
            initializer => '= true'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'func_refvar_t',
      kind => 'class',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      template_parameters => [
        {
          type => 'typename aT'
        },
        {
          type => 'template< uchint > class',
          declaration_name => 'T',
          definition_name => 'T'
        }
      ],
      all_members => [
        {
          name => 'borra_var',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        },
        {
          name => 'cuentavars',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'escribe_var',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'este_nombre_ya_ha_sido_declarado',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        },
        {
          name => 'existe_lugar_de_base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        },
        {
          name => 'func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'mapmem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'mapvd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'matd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        },
        {
          name => '~func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'borra_var',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'existe_lugar_de_base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'Base',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'este_nombre_ya_ha_sido_declarado',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T< B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'lhs',
                type => 'string'
              }
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'base',
                type => 'uchint'
              },
              {
                declaration_name => 'var_base',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'const func_refvar_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'escribe_var',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'base',
                type => 'uchint'
              },
              {
                declaration_name => 'var_base',
                type => 'uchint'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'mapmem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'vector< vector< bool > >'
          },
          {
            kind => 'variable',
            name => 'mapvd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'map< string, par_dir_t >'
          },
          {
            kind => 'variable',
            name => 'matd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'aT **'
          },
          {
            kind => 'variable',
            name => 'cuentavars',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'vector< uint >'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'func_refvar_t< INT **, INT *, INT >',
      kind => 'class',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      all_members => [
        {
          name => 'borra_var',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'cuentavars',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'escribe_var',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'este_nombre_ya_ha_sido_declarado',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'existe_lugar_de_base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'mapmem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'mapvd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'matd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        },
        {
          name => '~func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< INT **, INT *, INT >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'borra_var',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'existe_lugar_de_base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'Base',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'este_nombre_ya_ha_sido_declarado',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'INT',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'lhs',
                type => 'string'
              }
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'base',
                type => 'uchint'
              },
              {
                declaration_name => 'var_base',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'const func_refvar_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'escribe_var',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'base',
                type => 'uchint'
              },
              {
                declaration_name => 'var_base',
                type => 'uchint'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'mapmem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'vector< vector< bool > >'
          },
          {
            kind => 'variable',
            name => 'mapvd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'map< string, par_dir_t >'
          },
          {
            kind => 'variable',
            name => 'matd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'INT **'
          },
          {
            kind => 'variable',
            name => 'cuentavars',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'vector< uint >'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'func_refvar_t< UINT **, UINT *, UINT >',
      kind => 'class',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'memory_handler.hpp'
      },
      all_members => [
        {
          name => 'borra_var',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'cuentavars',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'escribe_var',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'este_nombre_ya_ha_sido_declarado',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'existe_lugar_de_base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'mapmem',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'mapvd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'matd',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        },
        {
          name => '~func_refvar_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'func_refvar_t< UINT **, UINT *, UINT >'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => '~func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'borra_var',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'existe_lugar_de_base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'Base',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'este_nombre_ya_ha_sido_declarado',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'lhs',
                type => 'string'
              }
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'base',
                type => 'uchint'
              },
              {
                declaration_name => 'var_base',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'func_refvar_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'const func_refvar_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'escribe_var',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nombre',
                type => 'string'
              },
              {
                declaration_name => 'base',
                type => 'uchint'
              },
              {
                declaration_name => 'var_base',
                type => 'uchint'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'mapmem',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'vector< vector< bool > >'
          },
          {
            kind => 'variable',
            name => 'mapvd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'map< string, par_dir_t >'
          },
          {
            kind => 'variable',
            name => 'matd',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT **'
          },
          {
            kind => 'variable',
            name => 'cuentavars',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'vector< uint >'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'int_num_t',
      kind => 'struct',
      base => [
        {
          name => 'base_num_t',
          virtualness => 'non_virtual',
          protection => 'protected'
        }
      ],
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'int_num_t.hpp'
      },
      template_parameters => [
        {
          type => 'type_traits::unsigned_integral_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        }
      ],
      all_members => [
        {
          name => 'abs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'absp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'aux',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'b_citerator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'b_criterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'b_iterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'b_riterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'Bm1_a_la_drcha',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'Bm1_a_la_izqda',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'ceros_a_la_drcha',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'ceros_a_la_izqda',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'citerator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'criterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'crstriterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'cstriterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'dig',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'digs_fracc_no_significativos',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'digs_no_significativos',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'div2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'div2p',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'div_gen_step',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'div_uno',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'divB',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'divBp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'divp_gen_step',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'erase',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'erase',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'EuclidDiv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'EuclidDivP',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'filled_of_all_digits_are_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'filled_of_all_digits_are_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'iterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'mC_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'mC_B_incondicionado',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'mC_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'n2digs',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'nbstr',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'num_basic',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'num_int',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator!',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator%',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator%=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator/',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator/=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator<<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'operator>>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'pardigs',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'push_back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'push_front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'reduce',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'reduce',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'reduce_fracc',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'reduce_fracc',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'rem2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'rem2p',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'remB',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'remBm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'remBp',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'resize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'riterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'rstriterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'signo',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'spardigs',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'striterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'int_num_t'
        },
        {
          name => 'unos_a_la_drcha',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        },
        {
          name => 'unos_a_la_izqda',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'int_num_t'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'resize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'push_front',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'parg',
                type => 'dig_t< B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'push_back',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t< B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const string &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a1',
                type => 'dig'
              },
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a2',
                type => 'dig'
              },
              {
                declaration_name => 'a1',
                type => 'dig'
              },
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::vector< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::list< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 's',
                type => 'sign_e'
              },
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 's',
                type => 'sign_e'
              },
              {
                declaration_name => 'a1',
                type => 'dig'
              },
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 's',
                type => 'sign_e'
              },
              {
                declaration_name => 'a2',
                type => 'dig'
              },
              {
                declaration_name => 'a1',
                type => 'dig'
              },
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 's',
                type => 'sign_e'
              },
              {
                declaration_name => 'arg',
                type => 'const std::vector< dig > &'
              },
              {
                declaration_name => 'argforma',
                type => 'forma_t',
                default_value => 'noraw'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 's',
                type => 'sign_e'
              },
              {
                declaration_name => 'arg',
                type => 'const std::list< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'spardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 's',
                type => 'sign_e'
              },
              {
                declaration_name => 'a',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ch',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'num_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'Int_T'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const num_uint< B > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const pardigs_t< B > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const spardigs_t< B > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const dig_t< B > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'Int_T'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::vector< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::list< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ceros_a_la_izqda',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'unos_a_la_izqda',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ceros_a_la_drcha',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'unos_a_la_drcha',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'filled_of_all_digits_are_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'filled_of_all_digits_are_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digs_no_significativos',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digs_fracc_no_significativos',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'Bm1_a_la_izqda',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'Bm1_a_la_drcha',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator!',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'abs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'absp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'divB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'remB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'divBp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'remBp',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'div2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rem2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'div2p',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rem2p',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'remBm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'EuclidDiv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pair< num_int, num_int >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'EuclidDivP',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pair< num_int, const num_int & >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const num_int &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reduce',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reduce',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reduce_fracc',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reduce_fracc',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'dig',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t< B >'
          },
          {
            kind => 'typedef',
            name => 'num_basic',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_basic_t< B >'
          },
          {
            kind => 'typedef',
            name => 'nbstr',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'basic_string< dig_t< B > >'
          },
          {
            kind => 'typedef',
            name => 'striterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nbstr::iterator'
          },
          {
            kind => 'typedef',
            name => 'rstriterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nbstr::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'cstriterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nbstr::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'crstriterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nbstr::const_reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'b_iterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_basic::iterator'
          },
          {
            kind => 'typedef',
            name => 'b_riterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_basic::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'b_citerator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_basic::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'b_criterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_basic::const_reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'iterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int::iterator'
          },
          {
            kind => 'typedef',
            name => 'riterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'citerator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'criterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int::const_reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'n2digs',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'n2digs_t< B >'
          },
          {
            kind => 'typedef',
            name => 'pardigs',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pardigs_t< B >'
          },
          {
            kind => 'typedef',
            name => 'spardigs',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'spardigs_t< B >'
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'mC_B_incondicionado',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos1',
                type => 'size_t'
              },
              {
                declaration_name => 'chardig',
                type => 'const dig_t< B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos1',
                type => 'size_t'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              },
              {
                declaration_name => 'c',
                type => 'dig_t< B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'erase',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'num_int &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos',
                type => 'size_t'
              },
              {
                declaration_name => 'npos',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'erase',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'iterator',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'first',
                type => 'iterator'
              },
              {
                declaration_name => 'last',
                type => 'iterator'
              }
            ]
          },
          {
            kind => 'function',
            name => 'div_gen_step',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dvsor',
                type => 'const num_int &'
              },
              {
                declaration_name => 'rem',
                type => 'num_int &'
              },
              {
                declaration_name => 'coc',
                type => 'num_int &'
              },
              {
                declaration_name => 'ndig',
                type => 'usint &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'divp_gen_step',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dvsor',
                type => 'const num_int &'
              },
              {
                declaration_name => 'rem',
                type => 'num_int &'
              },
              {
                declaration_name => 'coc',
                type => 'num_int &'
              },
              {
                declaration_name => 'ndig',
                type => 'usint &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'div_uno',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rem',
                type => 'num_int &'
              },
              {
                declaration_name => 'dvndo',
                type => 'num_int &'
              },
              {
                declaration_name => 'dvsor',
                type => 'num_int &'
              },
              {
                declaration_name => 'long_dvndo',
                type => 'const usint'
              },
              {
                declaration_name => 'long_dvsor',
                type => 'const usint'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'signo',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sign_e'
          },
          {
            kind => 'variable',
            name => 'aux',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'spardigs'
          }
        ]
      },
      friend_methods => {
        members => [
          {
            kind => 'friend',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'friend istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'istream &'
              },
              {
                declaration_name => 'arg',
                type => 'num_int< Base > &'
              }
            ]
          },
          {
            kind => 'friend',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'friend ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'num_int< Base >'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::local_void_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      all_members => [
      ],
      brief => {},
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'EXAMPLE pack2tuple<int,std::string,double>; // tipo '
          },
          {
            type => 'url',
            link => 'structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9',
            content => 'pack2tuple<int,std::string,double>::tuple_type'
          },
          {
            type => 'text',
            content => ' == std::tuple<int,std::string,double>; // tupla using mi_tupla = '
          },
          {
            type => 'url',
            link => 'structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9',
            content => 'pack2tuple<int,std::string,double>::tuple_type'
          },
          {
            type => 'text',
            content => '; pack_size() devuelve 3 mi_tupla(2,"xyz",3.14159) devuelve la tupla {2,"xyz",3.14159} // por copia o por movimiento elem_type<0> es int elem_type<1> es std::string elem_type<2> es double get<0>(2,"xyz",3.14159) == 2; get<1>(2,"xyz",3.14159) == "xyz"; get<2>(2,"xyz",3.14159) == 3.14159; tuple_obj == mi_tupla(2,"xyz",3.14159) == {2,"xyz",3.14159} head of tuple_obj is {2} tail of tuple_obj is {"xyz",3.14159} BEGIN: TEMPLATE GENERICO Y SUS ESPECIALIZACIONES '
          }
        ]
      }
    },
    {
      name => 'nat_num_t',
      kind => 'class',
      base => [
        {
          name => 'base_num_t',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'nat_num_t.hpp'
      },
      template_parameters => [
        {
          type => 'type_traits::unsigned_integral_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        }
      ],
      all_members => [
        {
          name => 'abs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'aux',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'b_citerator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'b_criterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'b_iterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'b_riterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'base_N_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'base_num_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'base_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'begin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'ceros_a_la_drcha',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'ceros_a_la_izqda',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'citerator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'clear',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'criterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'crstriterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'cstriterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'digs_fracc_no_significativos',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'digs_no_significativos',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'div2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'div_gen_step',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'div_uno',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'divB',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'end',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'erase',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'erase',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'es_cero',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'EuclidDiv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'g_aux',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'insert',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'int_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'int_reg_N_digs_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'iterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'm_abs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'm_div2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'm_divB',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'm_EuclidDiv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'm_rem2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'm_remB',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'mC_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'mC_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'minus',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_num_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'nat_reg_N_digs_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'nbstr',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'no_es_cero',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator string',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator uchint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator uint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator ulint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator ullint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator usint',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator vector< dig >',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator!',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator%',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator%=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator/',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator/=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'p_aux',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'push_back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'push_front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'reduce',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'reduce',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'reduce_fracc',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'reduce_fracc',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'rem2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'remB',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'remBm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'resize',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'riterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'rstriterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        },
        {
          name => 'striterator',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'nat_num_t'
        },
        {
          name => 'substr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'nat_num_t'
        }
      ],
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'push_front',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'parg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'uint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'uint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'clear',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'push_back',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'begin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'striterator',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'end',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'cstriterator',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const string &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const string &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator string',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a0',
                type => 'const dig &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a1',
                type => 'const dig &'
              },
              {
                declaration_name => 'a0',
                type => 'const dig &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a2',
                type => 'const dig &'
              },
              {
                declaration_name => 'a1',
                type => 'const dig &'
              },
              {
                declaration_name => 'a0',
                type => 'const dig &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const vector< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const vector< dig > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator vector< dig >',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const pardigs &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const pardigs &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const n2digs &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'const n2digs &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ch',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ch',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'uchint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'usint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'usint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'uint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'uint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'ulint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'ulint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_num_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'ullint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'ullint'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator usint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator uchint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator ulint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator ullint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a0',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ceros_a_la_izqda',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ceros_a_la_drcha',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digs_no_significativos',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digs_fracc_no_significativos',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'usint',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'substr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos',
                type => 'size_t'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'a',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'minus',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'sz',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'abs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'm_abs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'divB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'remB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'm_divB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'm_remB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'div2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rem2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'm_div2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'm_rem2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'remBm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'g_aux',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pardigs',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'p_aux',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'pardigs'
              }
            ]
          },
          {
            kind => 'function',
            name => 'es_cero',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'no_es_cero',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'EuclidDiv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pair< nat_num_t, nat_num_t >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_EuclidDiv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pair< nat_num_t, const nat_num_t & >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reduce',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reduce',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reduce_fracc',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reduce_fracc',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t< UINT_T, B >'
          },
          {
            kind => 'typedef',
            name => 'base_num_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_num_t< UINT_T, B >'
          },
          {
            kind => 'typedef',
            name => 'nbstr',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'basic_string< dig >'
          },
          {
            kind => 'typedef',
            name => 'striterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nbstr::iterator'
          },
          {
            kind => 'typedef',
            name => 'rstriterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nbstr::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'cstriterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nbstr::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'crstriterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nbstr::const_reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'b_iterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_num_t< UINT_T, B >::iterator'
          },
          {
            kind => 'typedef',
            name => 'b_riterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_num_t< UINT_T, B >::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'b_citerator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_num_t< UINT_T, B >::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'b_criterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename base_num_t< UINT_T, B >::const_reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'iterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nat_num_t< UINT_T, B >::iterator'
          },
          {
            kind => 'typedef',
            name => 'riterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nat_num_t< UINT_T, B >::reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'citerator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nat_num_t< UINT_T, B >::const_iterator'
          },
          {
            kind => 'typedef',
            name => 'criterator',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename nat_num_t< UINT_T, B >::const_reverse_iterator'
          },
          {
            kind => 'typedef',
            name => 'base_N_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< dig_t< UINT_T, B >, N >'
          },
          {
            kind => 'typedef',
            name => 'base_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_reg_N_digs_t< UINT_T, B, 2 >'
          },
          {
            kind => 'typedef',
            name => 'nat_reg_N_digs_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_reg_N_digs_t< UINT_T, B, N >'
          },
          {
            kind => 'typedef',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_reg_N_digs_t< UINT_T, B, 2 >'
          },
          {
            kind => 'typedef',
            name => 'int_reg_N_digs_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int_reg_N_digs_t< UINT_T, B, N >'
          },
          {
            kind => 'typedef',
            name => 'int_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int_reg_N_digs_t< UINT_T, B, 2 >'
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'resize',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos1',
                type => 'size_t'
              },
              {
                declaration_name => 'chardig',
                type => 'const dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'insert',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos1',
                type => 'size_t'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              },
              {
                declaration_name => 'c',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_num_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'erase',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_num_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'pos',
                type => 'size_t'
              },
              {
                declaration_name => 'npos',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'erase',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'iterator',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'first',
                type => 'iterator'
              },
              {
                declaration_name => 'last',
                type => 'iterator'
              }
            ]
          },
          {
            kind => 'function',
            name => 'div_gen_step',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dvsor',
                type => 'const nat_num_t &'
              },
              {
                declaration_name => 'rem',
                type => 'nat_num_t &'
              },
              {
                declaration_name => 'coc',
                type => 'nat_num_t &'
              },
              {
                declaration_name => 'ndig',
                type => 'usint &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'div_uno',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rem',
                type => 'nat_num_t &'
              },
              {
                declaration_name => 'dvndo',
                type => 'nat_num_t &'
              },
              {
                declaration_name => 'dvsor',
                type => 'nat_num_t &'
              },
              {
                declaration_name => 'szndo',
                type => 'const usint'
              },
              {
                declaration_name => 'szsor',
                type => 'const usint'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'aux',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pardigs'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::nat_rat_fixed_reg_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'nat_rat_fixed_reg_t.hpp'
      },
      template_parameters => [
        {
          type => 'type_traits::uint_type_for_radix_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        },
        {
          type => 'std::size_t',
          declaration_name => 'LE',
          definition_name => 'LE'
        },
        {
          type => 'std::size_t',
          declaration_name => 'LF',
          definition_name => 'LF'
        }
      ],
      all_members => [
        {
          name => 'add',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'base_NEXNF_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'base_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'C_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'C_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'concat_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'copy_arg_N',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'cuenta_0s_desde_DRCHA',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'cuenta_0s_desde_IZDA',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_submax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'IntPart',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'm_dc',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'm_rem_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'mC_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'mC_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'move_arg_N',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'mult',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'nat_reg_NExNF_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'normalize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator!',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator&',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator>>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator>>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator|',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'operator|=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'pfx_rat_reg_NExNF_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'put',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'put',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'reg_ints_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'reg_ssints_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'reg_suints_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regd_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regd_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regd_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regd_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regd_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regd_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regi_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regi_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regi_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regi_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regi_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'regi_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'rem_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'rev_subreg_digs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'rev_subreg_digs_pe',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'rev_subreg_digs_pf',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'SIG_SINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'SIG_UINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'subreg_digs',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'subreg_digs_pe',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'subreg_digs_pf',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'subst',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'sui_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'sui_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'ui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'ui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'ui_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'ui_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'ui_submax',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_rat_fixed_reg_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t< UINT_T, B >'
          },
          {
            kind => 'typedef',
            name => 'base_NEXNF_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< dig_t< UINT_T, B >, NE+NF >'
          },
          {
            kind => 'typedef',
            name => 'base_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_NEXNF_t< LE, LF >'
          },
          {
            kind => 'typedef',
            name => 'pfx_rat_reg_NExNF_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'pfx_rat_reg_digs_t< UINT_T, B, NE, NF >'
          },
          {
            kind => 'typedef',
            name => 'SIG_UINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename type_traits::sig_UInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'SIG_SINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename type_traits::sig_SInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'nat_reg_NExNF_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_reg_digs_t< UINT_T, B, NE+NF >'
          },
          {
            kind => 'typedef',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_reg_digs_t< UINT_T, B, LE+LF >'
          },
          {
            kind => 'typedef',
            name => 'reg_ints_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< UINT_T, NE+NF >'
          },
          {
            kind => 'typedef',
            name => 'reg_suints_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< SIG_UINT_T, NE+NF >'
          },
          {
            kind => 'typedef',
            name => 'reg_ssints_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< SIG_SINT_T, NE+NF >'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR DEFECTO pfx_rat_reg_digs_t<10,3,2> var(); var == nat#0:0:0:s:0:0#B10 '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR LISTA DE DIGITOS pfx_rat_reg_digs_t<10,3,2> var{'
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(1)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(3)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(2)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(5)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(6)'
                },
                {
                  type => 'text',
                  content => '}; var == nat#1:3:2:s:5:6#B10 '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::initializer_list< dig_t > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO pfx_rat_reg_digs_t<10,3,2> var('
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(1)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(3)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(2)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(5)'
                },
                {
                  type => 'text',
                  content => ','
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(6)'
                },
                {
                  type => 'text',
                  content => '); var == nat#1:3:2:5:6#B10 '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'const Ts &...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'copy_arg_N',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DELEGADA PARA COPIA DE UN ARRAY DE DISTINTO TAMANO O TAMANO CUALQUIERA "N" INTERNO '
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_NEXNF_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'move_arg_N',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DELEGADA PARA MOVER DE UN ARRAY DE DISTINTO TAMANO O TAMANO CUALQUIERA "N" INTERNO '
                }
              ]
            },
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< NE, NF > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA REFERENCIA DESDE UN ARRAY DE DIGITOS INTERNO '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_NExNF_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS INTERNO '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_NExNF_t< NE, NF > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO pfx_rat_reg_digs_t<10,3,2> var{1,3,2,5,6}; var == nat#1:3:2:s:5:6#B10 '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig_pow_i',
                type => 'Ints_type ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA pfx_rat_reg_digs_t<10,3,2> var{1,3,2,5,6}; pfx_rat_reg_digs_t<10,3,2> var2(var); '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pfx_rat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR MOVIMIENTO pfx_rat_reg_digs_t<10,3,2> var{1,3,2,5,6}; pfx_rat_reg_digs_t<10,3,2> var2(std::move(var)); var queda no sabemos su valor '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_NExNF_digs_t< NE, NF > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA EN LA QUE SE PUEDE COPIAR reg_N_digs_t == std::array<dig_t,N>; pfx_rat_reg_digs_t<21,5> var{}; pfx_rat_reg_digs_t var2{}; var2 = var; var2 == var '
                }
              ]
            },
            type => 'constexpr pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR MOVIMIENTO reg_N_digs_t == std::array<dig_t,N>; pfx_rat_reg_digs_t<21,5> var{}; pfx_rat_reg_digs_t var2{}; var2 = std::move(var); var2 == antigua var; var actual no sabemos su valor; '
                }
              ]
            },
            type => 'constexpr pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_NExNF_digs_t< NE, NF > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA EN LA QUE '
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'yes'
                },
                {
                  type => 'text',
                  content => 'NO'
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'no'
                },
                {
                  type => 'text',
                  content => ' SE PUEDE MODIFICAR EL ARGUMENTO. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA DESDE BASE_N_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_NEXNF_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN DIGITO (CONVERSION) dig_t<13> a{3}; pfx_rat_reg_digs_t<13,16> A{}; A = a; A = nat#0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:3#B13 '
                }
              ]
            },
            type => 'constexpr pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) pfx_rat_reg_digs_t<16,4> var{}; var = 1324; 1324/%16 = 82|12 82/%16 = 5|2 => var == nat#5:2:12#B16 '
                }
              ]
            },
            type => 'constexpr pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_Type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FORMACION DE UN REG_M_DIGS_T<M> DESDE EL THIS REG_DIGS_T (L) Y REG_N_DIGS_T<N> EN SUS DOS FORMAS: (*THIS)SEGUIDO(ARG) Y (ARG)SEGUIDO(*THIS) : OPERACIONES DE CONCATENACION A SU VEZ PUEDEN SER POR COPIA Y POR MOVIMIENTO CONCAT : CONCATENACION pfx_rat_reg_digs_t<23,7> var1{ '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(1)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(2)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(3)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(4)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(5)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(6)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(7)'
                },
                {
                  type => 'text',
                  content => ' } pfx_rat_reg_digs_t<23,3> var2{ '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(22)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(21)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(20)'
                },
                {
                  type => 'text',
                  content => ' } var1.concat(var2) == nat#1:2:3:4:5:6:7:22:21:20#B23 '
                }
              ]
            },
            type => 'constexpr nat_reg_NExNF_digs_t< LE+NE, LF+NF >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONCAT : CONCATENACION pfx_rat_reg_digs_t<23,7> var1{ '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(1)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(2)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(3)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(4)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(5)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(6)'
                },
                {
                  type => 'text',
                  content => ', '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1nat__rat__fixed__reg__t_1a996554f9f2bd46c8f3e36fc176997644',
                  content => 'dig_t(7)'
                },
                {
                  type => 'text',
                  content => ' }; dig_t<23> var2{22}; var1.concat(var2) == nat#1:2:3:4:5:6:7:20#B23 '
                }
              ]
            },
            type => 'constexpr reg_N_digs_t< LE+LF+1 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_NExNF_digs_t< LE+NE, LF+NF >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< LE+LF+1 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_NExNF_digs_t< LE+NE, LF+NF >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_NExNF_digs_t< NE, NF > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< LE+LF+1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_NExNF_digs_t< LE+NE, LF+NF >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_NExNF_digs_t< NE, NF > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< LE+LF+1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'subreg_digs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rev_subreg_digs',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'subreg_digs_pe',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rev_subreg_digs_pe',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'subreg_digs_pf',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rev_subreg_digs_pf',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'IntPart',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr Int_Type',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t<23,12> A; A = ... pfx_rat_reg_digs_t<23,10> B; B = ... A == B => true or false '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t<23,12> A; A = ... pfx_rat_reg_digs_t<23,10> B; B = ... A != B => true or false '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t<23,12> A; A = ... pfx_rat_reg_digs_t<23,10> B; B = ... A <= B => true or false '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t<23,12> A; A = ... pfx_rat_reg_digs_t<23,10> B; B = ... A >= B => true or false '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t<23,12> A; A = ... pfx_rat_reg_digs_t<23,10> B; B = ... A < B => true or false '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t<23,12> A; A = ... pfx_rat_reg_digs_t<23,10> B; B = ... A > B => true or false '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COMPARACION OPERADOR SPACESHIP C++20 Comparaciones con un array estandar de otra longitud La salida devuelta es greater,less,equivalent '
                }
              ]
            },
            type => 'constexpr std::weak_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_NExNF_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr std::strong_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< NE, NF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t A{}; I en [LE-1,-LF] A.get<LE-1>() [devuelve el digito de peso B^(LE-1)] .......... A.get<2>() [devuelve el digito de peso B^2] A.get<1>() [devuelve el digito de peso B^1] A.get<0>() [devuelve el digito de peso (B^0)==1] A.get<-1>() [devuelve el digito de peso B^-1] A.get<-2>() [devuelve el digito de peso B^-2] ........... A.get<-LF>() [devuelve el digito de peso B^-LF] MSB == MSB_E == LE-1 LSB_E == LF MSB_F == LF-1 LSB_F == 0 == LSB '
                }
              ]
            },
            type => 'constexpr const dig_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'put',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'pfx_rat_reg_digs_t A{}; A.put<2>(B-1-A.get<2>()) [pone un valor en un digito por su indice] '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'put',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'idx',
                type => 'std::int32_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'idx',
                type => 'std::int32_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr UINT_T',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'idx',
                type => 'std::int32_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mC_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator!',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mult',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACIONES \'@\'(REG_DIGS_T,DIG_T)->STD::ARRAY<REG_DIGS_T,2> \'@\' = MULT '
                }
              ]
            },
            type => 'constexpr std::array< pfx_rat_reg_digs_t, 2 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'add',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '\'@\' = \'+\' '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::array< pfx_rat_reg_digs_t, 2 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'subst',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TO DO REPASAR \'@\' = \'-\' '
                }
              ]
            },
            type => 'constexpr std::array< pfx_rat_reg_digs_t, 2 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : OPERATORS >> >>= << <<= MULTIPLY BY THE BASE B (10) '
                }
              ]
            },
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DIVIDE BY THE BASE B (/10_B) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END : OPERATORS >> >>= << <<=. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : "OPERATORS" REM_B^n AND M_REM_B^n REMAINDER BY THE BASE B (%10_B) '
                }
              ]
            },
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : OPERATORS | & |= &=. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'REMAINDER BY THE BASE B (%10_B) END : "OPERATORS" REM_B^n AND M_REM_B^n '
                }
              ]
            },
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END : OPERATORS | & |= &=. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::pair< dig_t, pfx_rat_reg_digs_t >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr std::pair< dig_t, pfx_rat_reg_digs_t >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr std::array< pfx_rat_reg_digs_t, 2 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr pfx_rat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const pfx_rat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t &'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'dig_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_submax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_Bp1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_submax',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_pow_n_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_pow_n_B_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr pfx_rat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regi_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'ARRAYS DE ENTEROS QUE SON DE AYUDA. '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr reg_ints_t< LE+LF >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regi_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr reg_ints_t< LE+LF >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regi_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr reg_ints_t< LE+LF >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regi_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr reg_ints_t< LE+LF >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regi_pow_n_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr reg_ints_t< LE+LF >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regi_pow_n_B_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr reg_ints_t< LE+LF >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'normalize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DE NORMALIZACION A LA BASE B DE UN ARGUMENTOS EN UN PACK DE ENTEROS CUALQUIERA INTERNA '
                }
              ]
            },
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'digits_pow_i',
                type => 'Ints_type ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cuenta_0s_desde_IZDA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_ints_t< LE+LF > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cuenta_0s_desde_DRCHA',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_ints_t< LE+LF > &'
              }
            ]
          }
        ]
      },
      private_members => {
        members => [
          {
            kind => 'variable',
            name => 'm_dc',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_t'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::nat_reg_digs_t',
      kind => 'struct',
      base => [
        {
          name => 'NumRepr::reg_digs_t< UINT_T, B, L >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'nat_reg_digs_t.hpp'
      },
      template_parameters => [
        {
          type => 'uint_type_for_radix_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        },
        {
          type => 'size_t',
          declaration_name => 'L',
          definition_name => 'L'
        }
      ],
      all_members => [
        {
          name => 'add',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'assign',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'base_const_ref_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'base_cpy_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'base_N_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'base_ref_cthis',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'base_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'base_this',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'begin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'by_index',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'C_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'C_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'cat_inv',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'cbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'const_base_this',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'const_by_index',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'copy_arg_N',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'copy_arg_N',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'cp_base_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cp_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cp_cthis_at',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cpy_by_index',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'cpy_data',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cr_base_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cr_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cr_cthis_at',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'crbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'crend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'data',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'data',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'empty',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'end',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'fill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'get_type_template_string_id_token',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'index_of_MSDig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_any_B_pow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_B_pow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_B_pow_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_filled_of',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_filled_of_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_filled_of_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'm_add',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'm_mer_B',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'm_mer_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'm_rem_B',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'm_rem_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'm_sub',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'make_base_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'max_size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'mC_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'mC_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'mer_B',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'mer_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'move_arg_N',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'move_arg_N',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'mult',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'nat_reg_N_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'normalize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator Int_Type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator!',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator%',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator%',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator&',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator&',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator*',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator*=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator++',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator+=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator--',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator-=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator/',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator<<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator>>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator|',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator|',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator|=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'operator|=',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'postdecrement',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'postincrement',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'predecrement',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'preincrement',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'r_base_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'r_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'r_cthis_at',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'rbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_N_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'regd_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'regd_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'regd_base_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'regd_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'regd_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'rem_B',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'rem_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'rend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'res_base_N_op_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'res_base_op_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'res_N_op_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'res_op_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'reverse',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_0',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_1',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_Bm1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_dig',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_dig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_fill_1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_fill_1',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_fill_Bm1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_fill_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_fill_dig',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_fill_dig',
          virtualness => 'non_virtual',
          protection => 'public',
          ambiguity_scope => 'NumRepr::reg_digs_t::',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_interval_0',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_0',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_Bm1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_Bm1',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_dig',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_dig',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'set_interval_dig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'SIG_SINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'SIG_UINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'size_of_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sub',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'subregister',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'subrepr',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'sui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'swap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'to_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'SIG_UINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename type_traits::sig_UInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'SIG_SINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename type_traits::sig_SInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t< UINT_T, B >'
          },
          {
            kind => 'typedef',
            name => 'base_N_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'reg_digs_t< UINT_T, B, N >'
          },
          {
            kind => 'typedef',
            name => 'base_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_N_t< L >'
          },
          {
            kind => 'typedef',
            name => 'res_base_N_op_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename auxiliary_types::result_operation_t< base_N_t< N >, op, N >'
          },
          {
            kind => 'typedef',
            name => 'res_base_op_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename auxiliary_types::result_operation_t< base_t, op, L >'
          },
          {
            kind => 'typedef',
            name => 'nat_reg_N_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'nat_reg_digs_t< UINT_T, B, N >'
          },
          {
            kind => 'typedef',
            name => 'res_N_op_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename auxiliary_types::result_operation_t< nat_reg_N_digs_t< N >, op, N >'
          },
          {
            kind => 'typedef',
            name => 'res_op_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename auxiliary_types::result_operation_t< nat_reg_digs_t, op, L >'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR DEFECTO. '
                }
              ]
            },
            detailed => {},
            type => 'consteval',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR LISTA DE DIGITOS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::initializer_list< dig_t > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR ARGUMENTOS DIGITOS SIN LIMITE: DEDUCE EL TIPO. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'const Ts &...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'const_base_this',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const base_t *const',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_cpy_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr base_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_const_ref_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const base_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'const_by_index',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ix',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cpy_by_index',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ix',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'copy_arg_N',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS FUNCION DELEGADA PARA COPIA DE UN ARRAY DEL MISMO TAMANO O UN TAMANO CUALQUIERA "N" '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'move_arg_N',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DELEGADA PARA MOVER DE UN ARRAY DEL MISMO TAMANO O UN TAMANO CUALQUIERA "N" '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'copy_arg_N',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DELEGADA PARA COPIA DE UN NAT_REG_N_DIGS_T DEL MISMO TAMANO O UN TAMANO CUALQUIERA "N" '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'move_arg_N',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DELEGADA PARA MOVER DE UN NAT_REG_N_DIGS_T DEL MISMO TAMANO O UN TAMANO CUALQUIERA "N" '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_N_digs_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA DESDE UN ARRAY DE DIGITOS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR MOVIMIENTO DESDE UN ARRAY DE DIGITOS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END : CONSTRUCTOR COPIA/MOVIMIENTO DESDE UN ARRAY DE DIGITOS. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA DESDE ARGUMENTOS ENTEROS SIN LIMITE : DEDUCE EL TIPO '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig_pow_i',
                type => 'Ints_type ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA POR REFERENCIA CONSTANTE. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'nat_reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR POR MOVIMIENTO. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_N_digs_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA REFERENCIA CONST '
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'yes'
                },
                {
                  type => 'text',
                  content => 'NO'
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'no'
                },
                {
                  type => 'text',
                  content => ' COPIABLE DESDE BASE_N_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA REFERENCIA DESDE BASE_N_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA MOVIMIENTO DESDE BASE_N_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA REFERENCIA EN LA QUE SE PUEDE COPIAR. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR MOVIMIENTO. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'nat_reg_N_digs_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA EN LA QUE '
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'yes'
                },
                {
                  type => 'text',
                  content => 'NO'
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'no'
                },
                {
                  type => 'text',
                  content => ' SE PUEDE COPIAR. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE LIMPIEZA A CERO DEL NAT_REG_DIGS_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE LIMPIEZA A B-1 DEL NAT_REG_DIGS_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_dig',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE LIMPIEZA A VALOR DIG_T DEL NAT_REG_DIGS_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_0 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_Bm1 EN [N_0 , N_1) DEL NAT_REG_DIGS_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_dig',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG EN [N_0 , N_1) DEL NAT_REG_DIGS_T. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN DIGITO (CONVERSION) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN ENTERO CONVERSION A LA BASE B DEL OBJETO ARG DE TIPO INT_TYPE '
                }
              ]
            },
            type => 'constexpr nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_Type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SUBREPR => SUB REPRESENTACION. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'NAT_REG_N_T<L+M> NAT_REG_T::CAT(NAT_REG_N_T<M>) NAT_REG_N_T<L+M> NAT_REG_T::CAT_INV(NAT_REG_N_T<M>) NAT_REG_N_T<L+1> NAT_REG_T::CAT(DIG_T) NAT_REG_N_T<L+1> NAT_REG_T::CAT_INV(DIG_T) '
                }
              ]
            },
            type => 'constexpr nat_reg_N_digs_t< N+L >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_N_digs_t< L+1 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_N_digs_t< N+L >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat_inv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_N_digs_t< L+1 >',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'subrepr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_N_digs_t< iend-ibegin >',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator Int_Type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERADOR COMPARACION SPACESHIP C++20. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::strong_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERADOR COMPARACION SPACESHIP C++20. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::weak_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERADOR COMPARACION SPACESHIP C++20. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::weak_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'idx',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'idx',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr Int_Type',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'idx',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator++',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator--',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'int'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END : OPERATORS >> >>= << <<= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : OPERATORS | & |= &= '
                }
              ]
            },
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator/',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DIVISION BY A DIGIT. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'REMAINDER BY A DIGIT. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const nat_reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TO DO. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TO DO '
                }
              ]
            },
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator+',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator*',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator%',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr nat_reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t &'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'regd_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCIONES INMEDIATAS QUE NOS DAN CONSTANTES DEL TIPO DE LA ACTUAL CLASE SE HACE CREANDO UNA VARIABLE RVALUE TEMPORAL CON LA FUNCION HOMOLOGA PARA BASE_T '
                }
              ]
            },
            type => 'static consteval nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_pow_n_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_pow_n_B_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval nat_reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN BASE_T. '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr const base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              },
              {
                declaration_name => 'arg',
                type => 'Int_Type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_add',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END : OPERATORS | & |= &=. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACIONES BINARIAS CON/SIN TIPO RESULTADO OPERACIONES BINARIAS BASE_T @ DIG_T OPERATOR BASE_T += DIG_T CON NOMBRE M_ADDITION '
                }
              ]
            },
            type => 'static constexpr auto',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              },
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sub',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERATOR BASE_T -= DIG_T CON NOMBRE M_SUB. '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr const base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              },
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'add',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const base_t &'
              },
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'sub',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const base_t &'
              },
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'base_this',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr base_t *const',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_ref_cthis',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'by_index',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ix',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'predecrement',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'postdecrement',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mult',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACIONES \'@\'(REG_DIGS_T,DIG_T)->RESULT_TYPE<\'@\'> \'@\' = MULT '
                }
              ]
            },
            type => 'constexpr auto',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'dig_t'
              }
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'set_0',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_Bm1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_dig',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              },
              {
                declaration_name => 'd',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_fill_dig',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              },
              {
                declaration_name => 'd',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_fill_1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_fill_Bm1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_0',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_0 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T<N> '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_Bm1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_Bm1 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T<N> '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_dig',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T<N> '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_N_t< N > &'
              },
              {
                declaration_name => 'dig',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_0',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_0 DEL ARRAY DESDE [N_0 , N_1) EN BASE_T ESPECIALIZACION PARA N==L '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_Bm1',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_Bm1 DEL ARRAY DESDE [N_0 , N_1) EN BASE_T ESPECIALIZACION PARA N==L '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_dig',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG DEL ARRAY DESDE [N_0 , N_1) EN BASE_T ESPECIALIZACION PARA N==L '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              },
              {
                declaration_name => 'dig',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'preincrement',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '< PREINCREMENT(OBJ) == ++OBJ SOLO QUE DEVUELVE CARRY TAMBIÉN PREINCREMENT(OBJ) -> CONDICIONALMENTE BIEN RES_BASE_OP_T (con CARRY), BIEN BASE_T (sin CARRY) < result_content_low result_content_high carry borrow result_content_quotient result_content_remainder good_result '
                }
              ]
            },
            type => 'static constexpr auto',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'postincrement',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr auto',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'rem_B',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'BEGIN : OPERATORS >> >>= << <<= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'MULTIPLY BY THE BASE B (10) << <<= DIVIDE BY THE BASE B (10) >> >>= REMAINDER BY THE BASE B (10) REM_B_N M_REM_B_N MULTIPLICATIVE CARRY BY THE BASE B (10) MER_B_N M_MER_B_N '
                }
              ]
            },
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const base_t &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_rem_B',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr const base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mer_B',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const base_t &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_mer_B',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr const base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'base_t &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::pack2array',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'typename...',
          declaration_name => 'Ts',
          definition_name => 'Ts'
        }
      ],
      all_members => [
        {
          name => 'array_type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        },
        {
          name => 'elem_type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        },
        {
          name => 'for_each',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        },
        {
          name => 'for_each_impl',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        },
        {
          name => 'pack_size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2array'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'array_type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< typename pack2tuple< Ts... >::elem_type< 0 >,(sizeof...(Ts)) >'
          },
          {
            kind => 'typedef',
            name => 'elem_type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename pack2tuple< Ts... >::elem_type< 0 >'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr array_type',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'Ts &&...'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'pack_size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr elem_type',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'Ts &&...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'for_each_impl',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'ESTA FUNCION AUXILIAR ES NECESARIA PARA UNA POSTERIOR EXPANSION DEL PARAMETER PACK '
                }
              ]
            },
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'iarray',
                type => 'array_type &'
              },
              {
                declaration_name => 'args',
                type => 'const Ts...'
              },
              {
                type => 'std::index_sequence< I... >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'for_each',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'iarray',
                type => 'array_type &'
              },
              {
                declaration_name => 'args',
                type => 'const Ts...'
              }
            ]
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'END: TEMPLATE GENERICO Y SUS ESPECIALIZACIONES. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'utilities::pack2tuple',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'typename...',
          declaration_name => 'Ts',
          definition_name => 'Ts'
        }
      ],
      all_members => [
        {
          name => 'elem_type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2tuple'
        },
        {
          name => 'get',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2tuple'
        },
        {
          name => 'operator()',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2tuple'
        },
        {
          name => 'pack_size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2tuple'
        },
        {
          name => 'tuple_type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::pack2tuple'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'tuple_type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::tuple< Ts... >'
          },
          {
            kind => 'typedef',
            name => 'elem_type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::tuple_element< K, tuple_type >::type'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'operator()',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr tuple_type',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'Ts &&...'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'pack_size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr unsigned',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'get',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr elem_type< J >::type',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'Ts &&...'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'template<class type_0, class type_1, ... , class type_Nm1> struct apilamiento_de_tipos_t { type_0 obj_0; type_1 obj_1; ...... ..... type_Nm1 obj_Nm1; }; example: apilamiento_de_tipos<int,std::string,double> objeto{1,"abc",2.98105}; objeto.obj_0 == 1; objeto.obj_1 == "abc"; objeto.obj_Nm1 == 2.98105; A partir del estandar de C++11 template<class ...type_i> struct apilamiento_de_tipos_t { type_0 obj_0; // sabemos type_i pero no type_0 type_1 obj_1; // sabemos type_i pero no type_1 ...... ..... type_Nm1 obj_Nm1;// sabemos type_i pero no type_Nm1 }; type_i es un PACK tipo std::tupla<class ... Ts>; '
          }
        ]
      }
    },
    {
      name => 'utilities::special::pow_B_to_E_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'NumRepr::usint_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        },
        {
          type => 'NumRepr::usint_t',
          declaration_name => 'Exp',
          definition_name => 'Exp'
        }
      ],
      all_members => [
        {
          name => 'base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t'
        },
        {
          name => 'exponent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t'
        }
      ],
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(Base)'
          },
          {
            kind => 'variable',
            name => 'exponent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(Exp)'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= base*(pow_B_to_E_t<base,exponent-1>::value)'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'FORMA ANTIGUA PERO SEGURA DE CONSEGUIR POTENCIAS DE UNA BASE EN COMPILE TIME. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'utilities::special::pow_B_to_E_t< Base, 0 >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'NumRepr::usint_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        }
      ],
      all_members => [
        {
          name => 'base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 0 >'
        },
        {
          name => 'exponent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 0 >'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 0 >'
        }
      ],
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(Base)'
          },
          {
            kind => 'variable',
            name => 'exponent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(0)'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(1)'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::special::pow_B_to_E_t< Base, 1 >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'NumRepr::usint_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        }
      ],
      all_members => [
        {
          name => 'base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 1 >'
        },
        {
          name => 'exponent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 1 >'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 1 >'
        }
      ],
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(Base)'
          },
          {
            kind => 'variable',
            name => 'exponent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(1)'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= base'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::special::pow_B_to_E_t< Base, 2 >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'NumRepr::usint_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        }
      ],
      all_members => [
        {
          name => 'base',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 2 >'
        },
        {
          name => 'exponent',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 2 >'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::pow_B_to_E_t< Base, 2 >'
        }
      ],
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(Base)'
          },
          {
            kind => 'variable',
            name => 'exponent',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= static_cast<NumRepr::uint128_t>(2)'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr NumRepr::uint128_t',
            initializer => '= base*base'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::reg_digs_t',
      kind => 'struct',
      base => [
        {
          name => 'std::array',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      derived => [
        {
          name => 'NumRepr::nat_reg_digs_t< UINT_T, B, L >',
          virtualness => 'non_virtual',
          protection => 'public'
        }
      ],
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'reg_digs_t.hpp'
      },
      template_parameters => [
        {
          type => 'uint_type_for_radix_c',
          declaration_name => 'UINT_T',
          definition_name => 'UINT_T'
        },
        {
          type => 'UINT_T',
          declaration_name => 'B',
          definition_name => 'B'
        },
        {
          type => 'size_t',
          declaration_name => 'L',
          definition_name => 'L'
        }
      ],
      all_members => [
        {
          name => 'back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'back',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'base_N_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'base_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'base_this',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'begin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'C_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'C_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cat',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'const_base_this',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'copy_arg_N',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cp_base_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cp_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cp_cthis_at',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cpy_data',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cr_base_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cr_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'cr_cthis_at',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'crbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'crend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'data',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'data',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_Bm2',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'dig_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'empty',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'end',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'fill',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'front',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'get_type_template_string_id_token',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'index_of_MSDig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_any_B_pow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_B_pow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_B_pow_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_filled_of',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_filled_of_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_filled_of_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'is_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'm_mer_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'm_rem_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'make_base_t',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'max_size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'mC_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'mC_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'mer_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'move_arg_N',
          virtualness => 'non_virtual',
          protection => 'private',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'normalize',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator Int_Type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator!',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator!=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator&',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator&=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator-',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<<',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator<=>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator==',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>>',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator>>=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator[]',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator|',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'operator|=',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'r_base_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'r_cthis',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'r_cthis_at',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'rbegin',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reg_N_digs_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_N_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_base_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_pow_n_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'regd_pow_n_B_m1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'rem_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'rend',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'res_base_N_op_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'res_base_op_t',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'reverse',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_dig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_fill_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_fill_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_fill_dig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_interval_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_interval_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'set_interval_dig',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'SIG_SINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'SIG_UINT_T',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'size',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'size_of_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ssi_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'subregister',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'sui_Bp1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'swap',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'to_type_template_string_id',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_B',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        },
        {
          name => 'ui_Bm1',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::reg_digs_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t< UINT_T, B >'
          },
          {
            kind => 'typedef',
            name => 'base_N_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< dig_t, N >'
          },
          {
            kind => 'typedef',
            name => 'base_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_N_t< L >'
          },
          {
            kind => 'typedef',
            name => 'reg_N_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'reg_digs_t< UINT_T, B, N >'
          },
          {
            kind => 'typedef',
            name => 'SIG_UINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename type_traits::sig_UInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'SIG_SINT_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename type_traits::sig_SInt_for_UInt_t< UINT_T >'
          },
          {
            kind => 'typedef',
            name => 'res_base_N_op_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename auxiliary_types::result_operation_t< base_N_t< N >, op, N >'
          },
          {
            kind => 'typedef',
            name => 'res_base_op_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename auxiliary_types::result_operation_t< base_t, op, L >'
          }
        ]
      },
      public_methods => {
        members => [
          {
            kind => 'function',
            name => 'const_base_this',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'devolucion de punteros a la clase base '
                }
              ]
            },
            detailed => {},
            type => 'const base_t *const',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_this',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_t *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'r_base_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'devolucion de referencias a la clase base '
                }
              ]
            },
            detailed => {},
            type => 'base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cr_base_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'devolucion de copia de la clase base '
                }
              ]
            },
            detailed => {},
            type => 'const base_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cp_base_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'base_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'r_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'devolucion de referencias de la clase actual '
                }
              ]
            },
            detailed => {},
            type => 'reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cr_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const reg_digs_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cp_cthis',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'devolucion de copia de la clase actual '
                }
              ]
            },
            detailed => {},
            type => 'reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cp_cthis_at',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'devoluciones por referencias y por copia de los elementos '
                }
              ]
            },
            detailed => {},
            type => 'dig_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'k',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'r_cthis_at',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'k',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cr_cthis_at',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'const dig_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'k',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'begin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'En este bloque hacemos esta clase wrapper como si fuese una clase derivada de base_t Para esto replicamos y sobrecargamos cada una de las funciones por defecto de std::array Nota: lo anterior se escribio cuando no era clase derivada sino un wrapper. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cbegin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'end',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cend',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rbegin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'crbegin',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'rend',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'crend',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'max_size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'empty',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'front',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'front',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t const &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'back',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'back',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t const &',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'fill',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'value',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'swap',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'other',
                type => 'base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reverse',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructores de '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => '. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructor por defecto (rellena de '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e',
                  content => 'dig_t(0)'
                },
                {
                  type => 'text',
                  content => ' todo el array) '
                }
              ]
            },
            type => 'consteval',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructor por lista de digitos utilizando la función make_base_t. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const std::initializer_list< dig_t > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructor por argumentos tipo '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => ': deduce el tipo. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'args',
                type => 'const Ts &...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR COPIA DESDE EL TIPO BASE. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONSTRUCTOR MOVIMIENTO DESDE EL TIPO BASE. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'base_t &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructor copia desde un array cualquiera de dígitos '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => ' (usando copy_arg_N<N>) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructor por movimiento desde un array cualquiera de dígitos '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => ' (usando move_arg_N<N>) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'reg_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary="Constructor copia desde una sucesión de objetos enteros variádica, normalizándolos"> '
                }
              ]
            },
            type => 'constexpr',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig_pow_i',
                type => 'Ints_type ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Sobrecarga del operador copia. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA REFERENCIA CONST '
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'yes'
                },
                {
                  type => 'text',
                  content => 'NO'
                },
                {
                  type => 'style',
                  style => 'italic',
                  enable => 'no'
                },
                {
                  type => 'text',
                  content => ' COPIABLE DESDE REG_N_DIGS_T EN LA IZQUIERDA '
                }
              ]
            },
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR COPIA REFERENCIA DESDE REG_N_DIGS_T EN LA IZQUIERDA '
                }
              ]
            },
            type => 'constexpr reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'reg_N_digs_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION ASIGNACION POR MOVIMIENTO DESDE REGS_N_DIGS_T EN LA QUE NO SE PUEDE COPIAR '
                }
              ]
            },
            type => 'constexpr const base_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'reg_N_digs_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN DIGITO (CONVERSION) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN REG_DIGS_T '
                }
              ]
            },
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'Int_Type'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator Int_Type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SE PODRÍA HACER PARA UINT128_T. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Algunas Conversiones '
                }
              ]
            },
            type => 'constexpr',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'data',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary=" sobrecarga de las funciones miembro : "> constexpr const dig_t* '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a29f49611f98ff0f0d0f4bf0c989d26f5',
                  content => 'data() const '
                },
                {
                  type => 'text',
                  content => 'noexcept;'
                },
                {
                  type => 'parbreak'
                },
                {
                  return => [
                  ]
                }
              ]
            },
            type => 'constexpr const dig_t *const',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'cpy_data',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr decltype(auto)',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary="Sobrecarga del const dig_t & operator[](size_t) const"> '
                }
              ]
            },
            detailed => {},
            type => 'constexpr const dig_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ix',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator[]',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary="Sobrecarga del dig_t & operator[](size_t)"> '
                }
              ]
            },
            detailed => {},
            type => 'constexpr dig_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ix',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Funciones que ponen a constantes (constexpr) los objetos base_t. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  templateparam => [
                    {
                      parameters => [
                        {
                          name => 'size_t'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  type => 'text',
                  content => '<nontypeparam name="N"></nontypeparam> '
                },
                {
                  params => [
                    {
                      parameters => [
                        {
                          name => 'this'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  return => [
                  ]
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_dig',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'd',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_fill_dig',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'd',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'set_fill_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_fill_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '"Funciones que ponen a constantes(constexpr) los objetos un subintervalo
o subrango de base_t cualquiera" '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  templateparam => [
                    {
                      parameters => [
                        {
                          name => 'size_t'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  type => 'text',
                  content => '<nontypeparam name="N_i"></nontypeparam> <nontypeparam name="N_pf"></nontypeparam> '
                },
                {
                  params => [
                    {
                      parameters => [
                        {
                          name => 'this'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  return => [
                  ]
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_0 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T<N> '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG_Bm1 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T<N> '
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'set_interval_dig',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERACION DE PONER A VALOR DIG DEL ARRAY DESDE [N_0 , N_1) EN BASE_T summary="Funciones comparativas con constantes tipo constexpr"> param name="this">'
                },
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'returns="bool">'
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_Bp1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_B_pow_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_B_pow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_any_B_pow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_filled_of_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_filled_of_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'is_filled_of',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'd',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'subregister',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TAKE A SUBREGISTER OF A REGISTER OF DIGITS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_N_digs_t<(ibegin< iend)?(iend-ibegin):(ibegin-iend)>',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERADORES ARITMETICOS '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c',
                  content => 'C_B()'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2',
                  content => 'C_Bm1()'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb',
                  content => 'mC_B()'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a',
                  content => 'mC_Bm1()'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac',
                  content => 'operator!()'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a',
                  content => 'operator-()'
                },
                {
                  type => 'text',
                  content => ' '
                }
              ]
            },
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'mC_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator!',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'A partir de aquí no he hecho las sustituciones de const '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => ' & cthis{*this}; / '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => ' & cthis{*this}; / '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => ' cthis{*this}; Por las correspondientes funciones '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1afc0773b25c6a84010530c389efcc4e5b',
                  content => 'cr_cthis()'
                },
                {
                  type => 'text',
                  content => ' / '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a8dd53a3977033363ff15a88026eedf5b',
                  content => 'r_cthis()'
                },
                {
                  type => 'text',
                  content => ' / '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a6b20297d05753f752cbf21d212c5cd4c',
                  content => 'cp_cthis()'
                },
                {
                  type => 'text',
                  content => ' '
                }
              ]
            },
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator-',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERATORS >> >>= << <<= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'MULTIPLY BY THE BASE B (10) << <<= DIVIDE BY THE BASE B (10) >> >>= REMAINDER BY THE BASE B (10) REM_B_N M_REM_B_N MULTIPLICATIVE CARRY BY THE BASE B (10) MER_B_N M_MER_B_N '
                }
              ]
            },
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TODO TO DO VOY POR AQUI CON EL TEMA DE LOS CTHIS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const base_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'index_of_MSDig',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'NOS DEVUELVE EL ÍNDICE DEL DÍGITO NO 0 DE POTENCIA DE B MAS GRANDE NOS DEVUELVE 0 SI ES UN DÍGITO NO 0 NOS DEVUELVE -1 SI ES EL DÍGITO 0 CUALQUIER OTRO CASO NOS DARÁ MAYOR QUE 0 '
                }
              ]
            },
            type => 'constexpr int64_t',
            const => 'yes',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'COMPARACIONES ENTRE BASE_T Y DIG_T EN FORMA BASE_T @ DIG_T. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOBRECARGA DE LOS OPERADORES DE COMPARACION Y ORDEN '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const dig_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator==',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'COMPARACIONES ENTRE REG_DIGS_T Y REG_N_DIGS_T HETEROGENEOS EN GENERAL EN FORMA REG_DIGS_T @ REG_N_DIGS_T<M> '
                }
              ]
            },
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator!=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERADOR COMPARACION SPACESHIP C++20. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::strong_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<=>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'OPERADOR COMPARACION SPACESHIP C++20. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr std::weak_ordering',
            const => 'yes',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const dig_t &'
              }
            ]
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'dig_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_Bm2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval dig_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sui_Bp1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ssi_Bp1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval SIG_SINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_N_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. '
                }
              ]
            },
            detailed => {},
            type => 'static consteval base_N_t< N >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_N_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_N_t< N >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_N_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_N_t< N >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_N_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_N_t< N >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_N_pow_n_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_N_t< N >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_N_pow_n_B_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_N_t< N >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T<L> DONDE BASE_T == BASE_N_T<L> TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. '
                }
              ]
            },
            detailed => {},
            type => 'static consteval base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_pow_n_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_base_pow_n_B_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'IDEM QUE ANTES PERO CON LA CLASE DERIVADA, LA ACTUAL TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. '
                }
              ]
            },
            detailed => {},
            type => 'static consteval reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_pow_n_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'regd_pow_n_B_m1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'normalize',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary="Funcion de normalizacion a dig_t (dígitos base B) que construye un objeto de tipo ">'
                },
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary="base_t desde una sucesion variadica de enteros cualquiera">'
                },
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<function name="normalize"></function> '
                },
                {
                  params => [
                    {
                      parameters => [
                        {
                          name => 'Ints_type ... digits_pow_i'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  type => 'text',
                  content => '<returns="base_t">'
                }
              ]
            },
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'digits_pow_i',
                type => 'Ints_type ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_DIGS_T CAT(REG_DIGS_T) '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC FUNCTIONS : CONCATENATE REGISTERS AND DIGITS reg_digs_t<1> '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8',
                  content => 'cat(dig_t)'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => '<1+1> '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649',
                  content => 'cat(dig_t,dig_t)'
                },
                {
                  type => 'text',
                  content => ' '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => ' cat(reg_digs_t) <M> reg_N_digs_t<L+M> cat(reg_digs_t,reg_N_digs_t<M>) reg_N_digs_t<L+1> cat(reg_digs_t,dig_t) reg_N_digs_t<1+L> cat(dig_t,reg_digs_t) reg_N_digs_t<sizeof...(dig_pack)> cat(dig_t ... dig_pack) VARIADIC PACK '
                }
              ]
            },
            type => 'static constexpr reg_digs_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC <M> REG_N_DIGS_T<L+M> CAT(REG_DIGS_T,REG_N_DIGS_T<M>) '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr reg_N_digs_t< L+M >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_N_digs_t< M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_DIGS_T<L+1> CAT(REG_DIGS_T,DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr reg_N_digs_t< L+1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t &'
              },
              {
                declaration_name => 'rarg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'REG_N_DIGS_T<1+L> CAT(DIG_T,REG_DIGS_T) '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr reg_N_digs_t< 1+L >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_N_DIGS_T<1> CAT(DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr reg_N_digs_t< 1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_N_DIGS_T<1+1> CAT(DIG_T,DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'static constexpr reg_N_digs_t< 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t'
              },
              {
                declaration_name => 'rarg',
                type => 'dig_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_N_DIGS_T<SIZEOF...(DIG_PACK)> CAT(DIG_T,DIG_T ... DIG_PACK) VARIADIC '
                }
              ]
            },
            type => 'static constexpr reg_N_digs_t< 1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig0',
                type => 'T0'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_N_DIGS_T<L+1+(SIZEOF...(DIG_PACK))> CAT(REG_DIGS_T,DIG_T,DIG_T ... DIG_PACK) VARIADIC '
                }
              ]
            },
            type => 'static constexpr reg_N_digs_t< L+1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t'
              },
              {
                declaration_name => 'dig',
                type => 'T'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_N_DIGS_T<L+1+(SIZEOF...(DIG_PACK))> CAT(DIG_T,DIG_T ... DIG_PACK,REG_DIGS_T) VARIADIC '
                }
              ]
            },
            type => 'static constexpr reg_N_digs_t< L+1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig',
                type => 'T'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              },
              {
                declaration_name => 'rarg',
                type => 'reg_digs_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'cat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC REG_N_DIGS_T<SIZE_T N,SIZE_T ... N_PACK> CAT(REG_N_DIGS_T<N> LARG,
                REG_N_DIGS_T<N_PACK> ... RARG_PACK
        ) VARIADIC PACK '
                }
              ]
            },
            type => 'static constexpr reg_N_digs_t< N+(...+(N_pack))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_N_digs_t< N >'
              },
              {
                declaration_name => 'rarg_pack',
                type => 'reg_N_digs_t< N_pack > ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_type_template_string_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'el parser/lexer del '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t',
                  content => 'reg_digs_t'
                },
                {
                  type => 'text',
                  content => ' '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Funciones de ayuda para '
                }
              ]
            },
            type => 'static bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'in',
                type => 'std::string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'to_type_template_string_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static std::string',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'size_of_type_template_string_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'get_type_template_string_id_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION GENERICA QUE CONSIGUE EL TOKEN TYPE PARA LA OBTENCION DEL OBJETO CORRESPONDIENTE POR TECLADO '
                }
              ]
            },
            type => 'static bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              }
            ]
          }
        ]
      },
      private_methods => {
        members => [
          {
            kind => 'function',
            name => 'copy_arg_N',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Constructor por Copia/Movimiento desde una sucesión variadica de dígitos '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => '. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Función miembro (delegada) para copiar un objeto tipo base_t desde una referencia constante a un array cualquiera de '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<function name="copy_arg_N"></function> '
                },
                {
                  params => [
                    {
                      parameters => [
                        {
                          name => 'const base_N_t<N> & arg'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  type => 'text',
                  content => '<returns="void">'
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const base_N_t< N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'move_arg_N',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Función miembro (delegada) para mover un objeto tipo base_t desde una referencia derecha a un array cualquiera de '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1dig__t',
                  content => 'dig_t'
                },
                {
                  type => 'text',
                  content => '. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<function name="copy_arg_N"></function> '
                },
                {
                  params => [
                    {
                      parameters => [
                        {
                          name => 'const base_N_t<N> & arg'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  type => 'text',
                  content => '<returns="void">'
                }
              ]
            },
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'base_N_t< N > &&'
              }
            ]
          },
          {
            kind => 'function',
            name => 'data',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<summary=" sobrecarga de las funciones miembro : "> constexpr dig_t* '
                },
                {
                  type => 'url',
                  link => 'struct_num_repr_1_1reg__digs__t_1a19a5a18b4db93320f0b9060aada7c146',
                  content => 'data()'
                },
                {
                  type => 'text',
                  content => ' noexcept;'
                },
                {
                  type => 'parbreak'
                },
                {
                  return => [
                  ]
                }
              ]
            },
            type => 'constexpr dig_t *',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      private_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'make_base_t',
            virtualness => 'non_virtual',
            protection => 'private',
            static => 'yes',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'Funcion miembro para generar un objeto tipo base_t y devolverlo desde un std::initializer_list<dig_t> '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '<function name="make_base_t"></function> '
                },
                {
                  params => [
                    {
                      parameters => [
                        {
                          name => 'const std::initializer_list<dig_t>& larg'
                        }
                      ],
                      doc => [
                      ]
                    }
                  ]
                },
                {
                  type => 'text',
                  content => '<returns="rarg : base_t">'
                }
              ]
            },
            type => 'static constexpr base_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const std::initializer_list< dig_t > &'
              }
            ]
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'DEFINCION DE template<uint128_t Radix> register_of_digits_t{};. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t',
      kind => 'struct',
      inner => [
      ],
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'binop_e',
          declaration_name => 'oper',
          definition_name => 'oper'
        }
      ],
      all_members => [
      ],
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'auxiliary types for digit type and its operations '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::add >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        }
      ],
      all_members => [
        {
          name => 'carry',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::add >'
        },
        {
          name => 'content',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::add >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'content',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'carry',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::div >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        }
      ],
      all_members => [
        {
          name => 'no_div_by_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::div >'
        },
        {
          name => 'quotient',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::div >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'quotient',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'no_div_by_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::fediv >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        }
      ],
      all_members => [
        {
          name => 'no_div_by_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::fediv >'
        },
        {
          name => 'quotient',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::fediv >'
        },
        {
          name => 'remainder',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::fediv >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'quotient',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'remainder',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'no_div_by_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::mult >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        }
      ],
      all_members => [
        {
          name => 'high_content',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::mult >'
        },
        {
          name => 'low_content',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::mult >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'low_content',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'high_content',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::rem >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        }
      ],
      all_members => [
        {
          name => 'no_div_by_0',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::rem >'
        },
        {
          name => 'remainder',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::rem >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'remainder',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'no_div_by_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::sub >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        }
      ],
      all_members => [
        {
          name => 'borrow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::sub >'
        },
        {
          name => 'content',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::sub >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'content',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'borrow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t',
      kind => 'struct',
      inner => [
      ],
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'binop_e',
          declaration_name => 'oper',
          definition_name => 'oper'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::add, N >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
        {
          name => 'carry',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::add, N >'
        },
        {
          name => 'good_result',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::add, N >'
        },
        {
          name => 'result_content_low',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::add, N >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'result_content_low',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'carry',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'good_result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::div, N >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
        {
          name => 'good_result',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::div, N >'
        },
        {
          name => 'result_content_quotient',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::div, N >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'result_content_quotient',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'good_result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::fediv, N >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
        {
          name => 'good_result',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::fediv, N >'
        },
        {
          name => 'result_content_quotient',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::fediv, N >'
        },
        {
          name => 'result_content_remainder',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::fediv, N >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'result_content_quotient',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'result_content_remainder',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'good_result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::mult, N >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
        {
          name => 'good_result',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::mult, N >'
        },
        {
          name => 'result_content_high',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::mult, N >'
        },
        {
          name => 'result_content_low',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::mult, N >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'result_content_low',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'result_content_high',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'good_result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::rem, N >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
        {
          name => 'good_result',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::rem, N >'
        },
        {
          name => 'result_content_remainder',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::rem, N >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'result_content_remainder',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'good_result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::sub, N >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'auxiliary_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'size_t',
          declaration_name => 'N',
          definition_name => 'N'
        }
      ],
      all_members => [
        {
          name => 'borrow',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::sub, N >'
        },
        {
          name => 'good_result',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::sub, N >'
        },
        {
          name => 'result_content_low',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::sub, N >'
        }
      ],
      public_members => {
        members => [
          {
            kind => 'variable',
            name => 'result_content_low',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::array< T, N >'
          },
          {
            kind => 'variable',
            name => 'borrow',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'T'
          },
          {
            kind => 'variable',
            name => 'good_result',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::special::tuple_builder_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'std::int64_t',
          declaration_name => 'IntObj_ct',
          definition_name => 'IntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'BeginIntObj_ct',
          definition_name => 'BeginIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'EndIntObj_ct',
          definition_name => 'EndIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        },
        {
          type => 'template< std::int64_t, std::int64_t > class',
          declaration_name => 'Funct_tt',
          definition_name => 'Funct_tt'
        }
      ],
      all_members => [
        {
          name => 'begin_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t'
        },
        {
          name => 'build',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t'
        },
        {
          name => 'end_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t'
        },
        {
          name => 'unit',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'build',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'unit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '= static_cast<std::int64_t>(1)'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '{IntObj_ct}'
          },
          {
            kind => 'variable',
            name => 'begin_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '{BeginIntObj_ct}'
          },
          {
            kind => 'variable',
            name => 'end_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '{EndIntObj_ct}'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'TEMPLATE GENERAL. '
          }
        ]
      },
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'OBTENER UNA TUPLA EN TIEMPO DE COMPILACION DONDE CADA POSICION ESTA INICIALIZADA PERO CON UNA LLAMADA DISTINTA A FUNCION POR CADA INDICE '
          }
        ]
      }
    },
    {
      name => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'std::int64_t',
          declaration_name => 'BeginIntObj_ct',
          definition_name => 'BeginIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'EndIntObj_ct',
          definition_name => 'EndIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        },
        {
          type => 'template< std::int64_t, std::int64_t > class',
          declaration_name => 'Funct_tt',
          definition_name => 'Funct_tt'
        }
      ],
      all_members => [
        {
          name => 'begin_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'build',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'end_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'unit',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'build',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'unit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr type',
            initializer => '= 1'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr type',
            initializer => '{BeginIntObj_ct}'
          },
          {
            kind => 'variable',
            name => 'begin_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr type',
            initializer => '{BeginIntObj_ct}'
          },
          {
            kind => 'variable',
            name => 'end_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr type',
            initializer => '{EndIntObj_ct}'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'ESPECIALIZACION DONDE INTOBJ_CT == BEGININTOBJ_CT. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'std::int64_t',
          declaration_name => 'BeginIntObj_ct',
          definition_name => 'BeginIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'EndIntObj_ct',
          definition_name => 'EndIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        },
        {
          type => 'template< std::int64_t, std::int64_t > class',
          declaration_name => 'Funct_tt',
          definition_name => 'Funct_tt'
        }
      ],
      all_members => [
        {
          name => 'begin_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'build',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'end_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'type',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'unit',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'type',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          }
        ]
      },
      public_static_methods => {
        members => [
          {
            kind => 'function',
            name => 'build',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static consteval decltype(auto)',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'unit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '= static_cast<std::int64_t>(1)'
          },
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '{EndIntObj_ct-unit}'
          },
          {
            kind => 'variable',
            name => 'begin_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '{BeginIntObj_ct}'
          },
          {
            kind => 'variable',
            name => 'end_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr std::int64_t',
            initializer => '{EndIntObj_ct}'
          }
        ]
      },
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'ESPECIALIZACION DONDE INTOBJ_CT == ENDINTOBJ_CT-1. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'utilities::special::tuple_user_constructor_t',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'std::int64_t',
          declaration_name => 'BeginIntObj_ct',
          definition_name => 'BeginIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'EndIntObj_ct',
          definition_name => 'EndIntObj_ct'
        },
        {
          type => 'std::int64_t',
          declaration_name => 'Base',
          definition_name => 'Base'
        },
        {
          type => 'template< std::int64_t, std::int64_t > class',
          declaration_name => 'Funct_tt',
          definition_name => 'Funct_tt'
        }
      ],
      all_members => [
        {
          name => 'value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'utilities::special::tuple_user_constructor_t'
        }
      ],
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr auto',
            initializer => '=
		tuple_builder_t<
				BeginIntObj_ct,
				BeginIntObj_ct,
				EndIntObj_ct,
				Base,
				Funct_tt
		>::build()'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix',
      kind => 'struct',
      inner => [
      ],
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'T',
          declaration_name => 'Radix',
          definition_name => 'Radix'
        }
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'integral_c',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'T',
          declaration_name => 'Radix',
          definition_name => 'Radix'
        }
      ],
      all_members => [
        {
          name => 'uint_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        },
        {
          name => 'uint_value_0_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        },
        {
          name => 'uint_value_1_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        },
        {
          name => 'uint_value_2_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        },
        {
          name => 'uint_value_3_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        },
        {
          name => 'uint_value_4_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        },
        {
          name => 'UIntType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'UIntType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< uint_value<=uint_value_0_max, uchint_t, std::conditional_t< uint_value<=uint_value_1_max, usint_t, std::conditional_t< uint_value<=uint_value_2_max, uint_t, std::conditional_t< uint_value<=uint_value_3_max, ulint_t, std::conditional_t< uint_value<=uint_value_4_max, ullint_t, uint128_t > > > > >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'uint_value_0_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(maxbase<uchint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_1_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(maxbase<usint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_2_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(maxbase<uint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_3_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(maxbase<ulint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_4_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(maxbase<ullint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(Radix)'
          }
        ]
      },
      brief => {},
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'DEFINICION PARA ESPECIALIZACION TYPE_TRAITS::UINT_TYPE_FOR_RADIX FOR RADIX VALID '
          }
        ]
      }
    },
    {
      name => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult',
      kind => 'struct',
      inner => [
      ],
      template_parameters => [
        {
          type => 'typename T'
        },
        {
          type => 'T',
          declaration_name => 'Radix',
          definition_name => 'Radix'
        }
      ],
      all_members => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >',
      kind => 'struct',
      inner => [
      ],
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'integral_c',
          declaration_name => 'T',
          definition_name => 'T'
        },
        {
          type => 'T',
          declaration_name => 'Radix',
          definition_name => 'Radix'
        }
      ],
      all_members => [
        {
          name => 'uint_value',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        },
        {
          name => 'uint_value_0_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        },
        {
          name => 'uint_value_1_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        },
        {
          name => 'uint_value_2_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        },
        {
          name => 'uint_value_3_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        },
        {
          name => 'uint_value_4_max',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        },
        {
          name => 'UIntType',
          virtualness => 'non_virtual',
          protection => 'public',
          scope => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        }
      ],
      public_typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'UIntType',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::conditional_t< uint_value<=uint_value_0_max, uchint_t, std::conditional_t< uint_value<=uint_value_1_max, usint_t, std::conditional_t< uint_value<=uint_value_2_max, uint_t, std::conditional_t< uint_value<=uint_value_3_max, ulint_t, std::conditional_t< uint_value<=uint_value_4_max, ullint_t, uint128_t > > > > >'
          }
        ]
      },
      public_static_members => {
        members => [
          {
            kind => 'variable',
            name => 'uint_value_0_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(sqrt_max<uchint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_1_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(sqrt_max<usint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_2_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(sqrt_max<uint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_3_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(sqrt_max<ulint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value_4_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(sqrt_max<ullint_t>())'
          },
          {
            kind => 'variable',
            name => 'uint_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'yes',
            brief => {},
            detailed => {},
            type => 'static constexpr ullint_t',
            initializer => '= static_cast<ullint_t>(Radix)'
          }
        ]
      },
      brief => {},
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'DEFINICION PARA ESPECIALIZACION TYPE_TRAITS::UINT_TYPE_FOR_RADIX_WITH_CONTAINS_MULT_RESULT FOR RADIX VALID '
          }
        ]
      }
    }
  ],
  concepts => [
    {
      name => 'NumRepr::type_traits::arith_integral_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename IntT'
        }
      ],
      initializer => 'template<typename IntT>
concept NumRepr::type_traits::arith_integral_c =  	std::is_arithmetic_v<IntT>	&&
                            std::is_integral_v<IntT>',
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'TYPE_TRAITS AND CONCEPTS. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::arith_natural_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename NatIntT'
        }
      ],
      initializer => 'template<typename NatIntT>
concept NumRepr::type_traits::arith_natural_c =    std::is_arithmetic_v<NatIntT>   &&
														std::is_unsigned_v<NatIntT>     &&
														std::is_integral_v<NatIntT>',
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::char_type_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename CharT'
        }
      ],
      initializer => 'template<typename CharT>
concept NumRepr::type_traits::char_type_c =  std::is_same_v<CharT,char> 						||
											std::is_same_v<CharT,signed char> 		||
											std::is_same_v<CharT,unsigned char> 	||
											std::is_same_v<CharT,wchar_t>',
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::integral_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename INT_T'
        }
      ],
      initializer => 'template<typename INT_T>
concept NumRepr::type_traits::integral_c =  is_integral_type_v<INT_T>',
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::signed_integral_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename SINT_T'
        }
      ],
      initializer => 'template<typename SINT_T>
concept NumRepr::type_traits::signed_integral_c =  is_signed_type_v<SINT_T>',
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'CONCEPT FOR SIGNED INTEGRAL TYPES. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::uint_type_for_radix_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename UINT_T'
        }
      ],
      initializer => 'template<typename UINT_T>
concept NumRepr::type_traits::uint_type_for_radix_c =  is_uint_type_for_radix_v<UINT_T>',
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'CONCEPT FOR UNSIGNED INTEGRAL TYPES VALID FOR THE RADIX. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::unsigned_integral_c',
      includes => {
        local => 'no',
        name => 'basic_types.hpp'
      },
      template_parameters => [
        {
          type => 'typename UINT_T'
        }
      ],
      initializer => 'template<typename UINT_T>
concept NumRepr::type_traits::unsigned_integral_c =  is_unsigned_type_v<UINT_T>',
      brief => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'CONCEPT FOR UNSIGNED INTEGRAL TYPES. '
          }
        ]
      },
      detailed => {}
    },
    {
      name => 'utilities::all_are_the_same_type_c',
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'typename...',
          declaration_name => 'Ts',
          definition_name => 'Ts'
        }
      ],
      initializer => 'template<typename... Ts>
concept utilities::all_are_the_same_type_c =  requires(Ts...) {
	for_each_same_type<Ts...>::are_same_type_v;
}',
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::there_is_one_or_more_c',
      includes => {
        local => 'no',
        name => 'utilities.hpp'
      },
      template_parameters => [
        {
          type => 'typename...',
          declaration_name => 'Ts',
          definition_name => 'Ts'
        }
      ],
      initializer => 'template<typename... Ts>
concept utilities::there_is_one_or_more_c =  requires(Ts...) {
	((sizeof...(Ts))>0);
}',
      brief => {},
      detailed => {}
    }
  ],
  namespaces => [
    {
      name => 'details',
      classes => [
        {
          name => 'details::cp_delete'
        },
        {
          name => 'details::cp_delete< 0u >'
        },
        {
          name => 'details::cp_delete< 1u >'
        },
        {
          name => 'details::cp_delete< 2u >'
        },
        {
          name => 'details::cp_delete< aT, T, std::numeric_limits< uchint >::max()>'
        },
        {
          name => 'details::cp_new'
        },
        {
          name => 'details::cp_new< 0u >'
        },
        {
          name => 'details::cp_new< 1u >'
        },
        {
          name => 'details::cp_new< 2 >'
        },
        {
          name => 'details::cp_new< aT, T, std::numeric_limits< uchint >::max()>'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr',
      classes => [
        {
          name => 'NumRepr::base_num_t'
        },
        {
          name => 'NumRepr::dig_t'
        },
        {
          name => 'NumRepr::nat_rat_fixed_reg_t'
        },
        {
          name => 'NumRepr::nat_reg_digs_t'
        },
        {
          name => 'NumRepr::reg_digs_t'
        }
      ],
      namespaces => [
        {
          name => 'NumRepr::auxiliary_functions'
        },
        {
          name => 'NumRepr::auxiliary_types'
        },
        {
          name => 'NumRepr::detail'
        },
        {
          name => 'NumRepr::lex'
        },
        {
          name => 'NumRepr::type_traits'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'chint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'NUEVOS NOMBRES PARA LOS ENTEROS O PARECIDOS. '
                }
              ]
            },
            detailed => {},
            type => 'char'
          },
          {
            kind => 'typedef',
            name => 'schint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed char'
          },
          {
            kind => 'typedef',
            name => 'ssint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed short int'
          },
          {
            kind => 'typedef',
            name => 'sint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed int'
          },
          {
            kind => 'typedef',
            name => 'slint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed long int'
          },
          {
            kind => 'typedef',
            name => 'sllint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed long long int'
          },
          {
            kind => 'typedef',
            name => 'uchint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'typedef',
            name => 'usint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short int'
          },
          {
            kind => 'typedef',
            name => 'uint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned int'
          },
          {
            kind => 'typedef',
            name => 'ulint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned long int'
          },
          {
            kind => 'typedef',
            name => 'ullint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned long long int'
          },
          {
            kind => 'typedef',
            name => 'uint128_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => '__uint128_t'
          },
          {
            kind => 'typedef',
            name => 'sint128_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => '__int128_t'
          },
          {
            kind => 'typedef',
            name => 'size_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::size_t'
          },
          {
            kind => 'typedef',
            name => 'sint8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int8_t'
          },
          {
            kind => 'typedef',
            name => 'sint16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int16_t'
          },
          {
            kind => 'typedef',
            name => 'sint32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int32_t'
          },
          {
            kind => 'typedef',
            name => 'sint64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          },
          {
            kind => 'typedef',
            name => 'int8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int8_t'
          },
          {
            kind => 'typedef',
            name => 'int16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int16_t'
          },
          {
            kind => 'typedef',
            name => 'int32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int32_t'
          },
          {
            kind => 'typedef',
            name => 'int64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          },
          {
            kind => 'typedef',
            name => 'fast8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast8_t'
          },
          {
            kind => 'typedef',
            name => 'fast16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast16_t'
          },
          {
            kind => 'typedef',
            name => 'fast32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast32_t'
          },
          {
            kind => 'typedef',
            name => 'fast64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast64_t'
          },
          {
            kind => 'typedef',
            name => 'least8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least8_t'
          },
          {
            kind => 'typedef',
            name => 'least16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least16_t'
          },
          {
            kind => 'typedef',
            name => 'least32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least32_t'
          },
          {
            kind => 'typedef',
            name => 'least64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least64_t'
          },
          {
            kind => 'typedef',
            name => 'uint8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint8_t'
          },
          {
            kind => 'typedef',
            name => 'uint16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint16_t'
          },
          {
            kind => 'typedef',
            name => 'uint32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint32_t'
          },
          {
            kind => 'typedef',
            name => 'uint64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint64_t'
          },
          {
            kind => 'typedef',
            name => 'ufast8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast8_t'
          },
          {
            kind => 'typedef',
            name => 'ufast16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast16_t'
          },
          {
            kind => 'typedef',
            name => 'ufast32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast32_t'
          },
          {
            kind => 'typedef',
            name => 'ufast64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast64_t'
          },
          {
            kind => 'typedef',
            name => 'uleast8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least8_t'
          },
          {
            kind => 'typedef',
            name => 'uleast16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least16_t'
          },
          {
            kind => 'typedef',
            name => 'uleast32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least32_t'
          },
          {
            kind => 'typedef',
            name => 'uleast64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least64_t'
          },
          {
            kind => 'typedef',
            name => 'intmax_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::intmax_t'
          },
          {
            kind => 'typedef',
            name => 'uintmax_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uintmax_t'
          },
          {
            kind => 'typedef',
            name => 'digit_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOLO HAY QUE DECLARAR digit_t<2> o digit_t<10> o ... '
                }
              ]
            },
            detailed => {},
            type => 'dig_t< type_traits::TypeFromIntNumber_t< static_cast< uint128_t >(B)>, static_cast< type_traits::TypeFromIntNumber_t< static_cast< uint128_t >(B)> >(static_cast< uint128_t >(B)) >'
          },
          {
            kind => 'typedef',
            name => 'register_of_digits_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'reg_digs_t< type_traits::TypeFromIntNumber_t< B >, static_cast< type_traits::TypeFromIntNumber_t< B > >(B), L >'
          },
          {
            kind => 'typedef',
            name => 'register_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'reg_digs_t< TypeFromIntNumber_t< static_cast< uint128_t >(B)>, static_cast< TypeFromIntNumber_t< static_cast< uint128_t >(B)> >(static_cast< uint128_t >(B)), L >'
          }
        ]
      },
      enums => {
        members => [
          {
            kind => 'enum',
            name => 'sign_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'vminus',
                initializer => '= true',
                brief => {},
                detailed => {}
              },
              {
                name => 'vplus',
                initializer => '= false',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'sign_funct_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'INTRODUCIDO. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'vzero',
                initializer => '= 0',
                brief => {},
                detailed => {}
              },
              {
                name => 'vminus',
                initializer => '= -1',
                brief => {},
                detailed => {}
              },
              {
                name => 'vplus',
                initializer => '= +1',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'dig_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'BINnat',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'BCDnat',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'BCDexc3',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'BCDaitk',
                initializer => '=3',
                brief => {},
                detailed => {}
              },
              {
                name => 'johnson_n',
                initializer => '=4',
                brief => {},
                detailed => {}
              },
              {
                name => 'biquinario',
                initializer => '=5',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'num_type_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'A INTRODUCIR. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'natural',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'entero',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'racional',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'real',
                initializer => '=3',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'nat_num_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'YA INTRODUCIDO, PERO NO EXPLICITAMENTE NI COMPLETAMENTE. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'natural',
                initializer => '=false',
                brief => {},
                detailed => {}
              },
              {
                name => 'exc_n',
                initializer => '=true',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'int_num_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOLO NATURAL. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'int_CB',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'int_CBm1',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'int_MS',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'int_EXC_n',
                initializer => '=3',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'rat_num_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'EN C_B YA QUEDA EN MS. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'pair_num_den',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'fxd_pt',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'flt_pt',
                initializer => '=2',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'binop_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'add',
                brief => {},
                detailed => {}
              },
              {
                name => 'sub',
                brief => {},
                detailed => {}
              },
              {
                name => 'mult',
                brief => {},
                detailed => {}
              },
              {
                name => 'div',
                brief => {},
                detailed => {}
              },
              {
                name => 'rem',
                brief => {},
                detailed => {}
              },
              {
                name => 'fediv',
                brief => {},
                detailed => {}
              },
              {
                name => 'other',
                brief => {},
                detailed => {}
              }
            ]
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'Char2Sign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ch',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Int2Sign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nu',
                type => 'IntT'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Int2SignFunct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_funct_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nu',
                type => 'IntT'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Nat2SignFunct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_funct_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nu',
                type => 'NatIntT'
              }
            ]
          },
          {
            kind => 'function',
            name => 'pot_max_base_B_en_Int_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr ullint',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'num_digs_max_base_B_en_Int_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr ullint',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'max_base_B_en_Int_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr ullint',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEFINCION DE template<uint128_t Radix> digito_t{};. '
                }
              ]
            },
            detailed => {},
            type => 'consteval dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'dig_t< UINT_T, Base > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'dig_t< UINT_T, Base >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'pfx_rat_reg_digs_t< Int_Type, Base, Length > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< Int_Type, Base, Long > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_nat_reg_digs_type_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'ESPECIALIZACIONES PARA NAT_REG_DIGS. '
                }
              ]
            },
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'in',
                type => 'std::string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'to_nat_reg_digs_type_string',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::string',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'size_of_nat_reg_digs_type_string_idT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TODO ESTA VERSION + VERSION CON TRATAMIENTO DE ERRORES EN RUNTIME '
                }
              ]
            },
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'nat_reg_digs_t< Int_Type, Base, Length > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t< Int_Type, Base, Long > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N> CONCAT(BASE_N_T<N>) '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N> CONCAT(BASE_N_T<N>) STATIC BASE_N_T<N+M> CONCAT(BASE_N_T<N>,BASE_N_T<M>) STATIC BASE_N_T<N+1> CONCAT(BASE_N_T<N>,DIG_T) STATIC BASE_N_T<1+M> CONCAT(DIG_T,BASE_N_T<M>) STATIC BASE_N_T<1> CONCAT(DIG_T) STATIC BASE_N_T<1+1> CONCAT(DIG_T,DIG_T) STATIC BASE_N_T<SIZEOF...(DIG_PACK)> CONCAT(DIG_T...DIG_PACK) VARIADIC PACK '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UInt_t, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N+M> CONCAT(BASE_N_T<N>,BASE_N_T<M>) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, N+M >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UInt_t, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UInt_t, B, M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N+1> CONCAT(BASE_N_T<N>,DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, N+1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UInt_t, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'dig_t< UInt_t, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<1+M> CONCAT(DIG_T,BASE_N_T<M>) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, 1+M >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t< UInt_t, B >'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UInt_t, B, M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<1> CONCAT(DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, 1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t< UInt_t, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<1+1> CONCAT(DIG_T,DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t< UInt_t, B >'
              },
              {
                declaration_name => 'rarg',
                type => 'dig_t< UInt_t, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<SIZEOF...(DIG_PACK)> CONCAT(DIG_T,DIG_T ... DIG_PACK) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, 1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig0',
                type => 'T0'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N+1+(SIZEOF...(DIG_PACK))> CONCAT(BASE_N_T<N>,DIG_T,DIG_T ... DIG_PACK) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, N+1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UInt_t, B, N >'
              },
              {
                declaration_name => 'dig',
                type => 'T'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<M+1+(SIZEOF...(DIG_PACK))> CONCAT(DIG_T,DIG_T ... DIG_PACK,BASE_N_T<M>) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, M+1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig',
                type => 'T'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              },
              {
                declaration_name => 'rarg',
                type => 'reg_digs_t< UInt_t, B, M >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<SIZE_T N,SIZE_T ... N_PACK> CONCAT(BASE_N_T<N> LARG,BASE_N_T<N_PACK> ... RARG_PACK) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, N+(...+(N_pack))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UInt_t, B, N >'
              },
              {
                declaration_name => 'rarg_pack',
                type => 'reg_digs_t< UInt_t, B, N_pack > ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_incr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TODO 31/12/2022. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sum_digs_carryin1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'left',
                type => 'dig_t< UINT_T, B > &'
              },
              {
                declaration_name => 'right',
                type => 'dig_t< UINT_T, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sum_digs_carryin0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'left',
                type => 'dig_t< UINT_T, B > &'
              },
              {
                declaration_name => 'right',
                type => 'dig_t< UINT_T, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_units_divB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '< PRECONDITIONS : ARG != 0 AND ARG != 1 > '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCIONES DE IMPLEMENTACION DE LA DIVISION ENTRE DOS REGISTROS DE DIGITOS BEGIN POSTCONDICION RET[N-1] == (DIG_1() | DIG_0()) POSTCONDICION RET[N-1] == DIG_1() => RET[N-2,0] == REGD_N_0() HAY QUE VER SI ES POTENCIA DE B : is_any_B_pow '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_units_divB_n',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DE RECURSION PARA LA DIVISION APROX_COC_REM APROXIMA REMAINDER A 2 DIGITOS Y DIVISOR A 1 DIGITO '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_coc_rem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'std::array<SIG_UINT_T,2>{}[0] == COC std::array<SIG_UINT_T,2>{}[1] == REM PRECONDICION DSOR != 0 Y DSOR != 1 FUNCION DE RECURSION PARA LA DIVISION SOBRECARGA DE LA ANTERIOR PARA LA RECURSION QUE NO SEA EL PRIMER CASO '
                }
              ]
            },
            type => 'constexpr std::array< type_traits::sig_UInt_for_UInt_t< UINT_T >, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rem',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'dsor',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_coc_rem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'std::array<SIG_UINT_T,2>{}[0] == COC std::array<SIG_UINT_T,2>{}[1] == REM PRECONDICION DSOR != 0 Y DSOR != 1 '
                }
              ]
            },
            type => 'constexpr std::array< type_traits::sig_UInt_for_UInt_t< UINT_T >, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rem',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'dsor',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'coc_calculado',
                type => 'type_traits::sig_UInt_for_UInt_t< UINT_T >'
              },
              {
                declaration_name => 'rem_calculado',
                type => 'type_traits::sig_UInt_for_UInt_t< UINT_T >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'fediv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCIONES DE IMPLEMENTACION DE LA DIVISION ENTRE DOS REGISTROS DE DIGITOS '
                }
              ]
            },
            type => 'constexpr std::array< reg_digs_t< UINT_T, B, std::max(N, M)>, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_digit_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION QUE CONSIGUE EL TOKEN DIGITO. '
                }
              ]
            },
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'dig_value',
                type => 'dig_t< UINT_T, B > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_radix_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION QUE CONSIGUE EL TOKEN BASE. '
                }
              ]
            },
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_digit_loop_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'value',
                type => 'reg_digs_t< T, B, L > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'read',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEFINCION DE template<uint128_t Radix> digito_t{};. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOLO HAY QUE DECLARAR digit_t<2> o digit_t<10> o ... '
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'value',
                type => 'reg_digs_t< T, B, L > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOBRECARGA DE ISTREAM Y OSTREAM CON LOS OPERADORES DE DESPLAZAMEINTO. '
                }
              ]
            },
            detailed => {},
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'reg_digs_t< Int_Type, Base, Length > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t< Int_Type, Base, Long > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_UINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_SINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_defecto_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_copia_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_movimiento_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_UINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_SINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_copia_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_movimiento_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_preincrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_postincrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_predecrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_postdecrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_mult_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_mult_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_ediv_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_ediv_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_erem_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_erem_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_multiply',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_multiply_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_edivision',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_edivision_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_prop_C_B_eq_inv_C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_prop_C_Bm1_eq_inv_C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_prop_C_B_minus_1_eq_C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_unary_operator_minus',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_unary_operator_neg',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_functions',
      functions => {
        members => [
          {
            kind => 'function',
            name => 'is_prime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_power_of_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'num',
                type => 'uint128_t'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::auxiliary_types',
      classes => [
        {
          name => 'NumRepr::auxiliary_types::resbinop_t'
        },
        {
          name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::add >'
        },
        {
          name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::div >'
        },
        {
          name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::fediv >'
        },
        {
          name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::mult >'
        },
        {
          name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::rem >'
        },
        {
          name => 'NumRepr::auxiliary_types::resbinop_t< T, binop_e::sub >'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::add, N >'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::div, N >'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::fediv, N >'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::mult, N >'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::rem, N >'
        },
        {
          name => 'NumRepr::auxiliary_types::result_operation_t< T, binop_e::sub, N >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::detail',
      functions => {
        members => [
          {
            kind => 'function',
            name => 'ceilsqrt',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              },
              {
                declaration_name => 'low',
                type => 'size_t'
              },
              {
                declaration_name => 'high',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ceilsqrt',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'find_factor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              },
              {
                declaration_name => 'low',
                type => 'size_t'
              },
              {
                declaration_name => 'high',
                type => 'size_t'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::lex',
      enums => {
        members => [
          {
            kind => 'enum',
            name => 'reglexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'st_00',
                initializer => '= 0',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_01',
                initializer => '= 1',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_02',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_03',
                initializer => '=3',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_04',
                initializer => '= 4',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_05',
                initializer => '= 5',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_06',
                initializer => '= 6',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_07',
                initializer => '= 7',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_08',
                initializer => '=8',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_09',
                initializer => '=9',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_10',
                initializer => '=10',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_11',
                initializer => '=11',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_12',
                initializer => '=12',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_13',
                initializer => '=13',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'sintaxerrlexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'st_err_00',
                initializer => '= 256',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_01',
                initializer => '= 257',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_02',
                initializer => '= 258',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_03',
                initializer => '= 259',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_04',
                initializer => '= 260',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_05',
                initializer => '= 261',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_06',
                initializer => '= 262',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_07',
                initializer => '= 263',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_08',
                initializer => '= 264',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_09',
                initializer => '= 265',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_10',
                initializer => '= 266',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_11',
                initializer => '= 267',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_12',
                initializer => '= 268',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_13',
                initializer => '= 269',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'semerrlexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'st_sem_00',
                initializer => '= 4096',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_01',
                initializer => '= 4097',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_02',
                initializer => '= 4098',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_03',
                initializer => '= 4099',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_04',
                initializer => '= 4100',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_05',
                initializer => '= 4101',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_06',
                initializer => '= 4102',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_07',
                initializer => '= 4103',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_08',
                initializer => '= 4104',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_09',
                initializer => '= 4105',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_10',
                initializer => '= 4106',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_11',
                initializer => '= 4107',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_12',
                initializer => '= 4108',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_13',
                initializer => '= 4109',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'lexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'reg_00',
                initializer => '=  0',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_01',
                initializer => '=  1',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_02',
                initializer => '=  2',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_03',
                initializer => '=  3',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_04',
                initializer => '=  4',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_05',
                initializer => '=  5',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_06',
                initializer => '=  6',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_07',
                initializer => '=  7',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_08',
                initializer => '=  8',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_09',
                initializer => '=  9',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_10',
                initializer => '= 10',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_11',
                initializer => '= 11',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_12',
                initializer => '= 12',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_13',
                initializer => '= 13',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_00',
                initializer => '= 256',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_01',
                initializer => '= 257',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_02',
                initializer => '= 258',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_03',
                initializer => '= 259',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_04',
                initializer => '= 260',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_05',
                initializer => '= 261',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_06',
                initializer => '= 262',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_07',
                initializer => '= 263',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_08',
                initializer => '= 264',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_09',
                initializer => '= 265',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_10',
                initializer => '= 266',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_11',
                initializer => '= 267',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_12',
                initializer => '= 268',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_13',
                initializer => '= 269',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_00',
                initializer => '= 4096',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_01',
                initializer => '= 4097',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_02',
                initializer => '= 4098',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_03',
                initializer => '= 4099',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_04',
                initializer => '= 4100',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_05',
                initializer => '= 4101',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_06',
                initializer => '= 4102',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_07',
                initializer => '= 4103',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_08',
                initializer => '= 4104',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_09',
                initializer => '= 4105',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_10',
                initializer => '= 4106',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_11',
                initializer => '= 4107',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_12',
                initializer => '= 4108',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_13',
                initializer => '= 4109',
                brief => {},
                detailed => {}
              }
            ]
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'is_digit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'digit_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_valid_char',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'char_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_separator',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_end_of_number',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_whitespace',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_end_descriptor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_radix_descriptor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_sign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'sign_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sign_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits',
      namespaces => [
        {
          name => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'sig_UInt_for_UInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO ENTERO PARA EL ACTUAL TIPO NATURAL POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'typename ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< UInt_t >::type'
          },
          {
            kind => 'typedef',
            name => 'sig_SInt_for_UInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO NATURAL PARA EL ACTUAL TIPO ENTERO POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'typename ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< UInt_t >::type'
          },
          {
            kind => 'typedef',
            name => 'sig_UInt_for_SInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO ENTERO PARA EL ACTUAL TIPO ENTERO POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'typename ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< Int_t >::type'
          },
          {
            kind => 'typedef',
            name => 'sig_SInt_for_SInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCIONES PARA DAR CON LOS MAXIMOS NUMEROS QUE CABEN EN UN TIPO Y SIMILARES '
                }
              ]
            },
            type => 'typename ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< SInt_t >::type'
          },
          {
            kind => 'typedef',
            name => 'TypeFromIntNumber_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'QUEREMOS FABRICAR LA METAFUNCION TypeFromIntNumberLTSqrtMaxOfType_t<numero> QUE DEVUELVA EL TIPO ENTERO SIN SIGNO MAS PEQUENO PARA EL NUMERO numero TAL QUE SQRT(TYPE::MAX())>=B-1 '
                }
              ]
            },
            type => 'typename UIntTypeForRadix< decltype(Radix), Radix >::UIntType'
          },
          {
            kind => 'typedef',
            name => 'GreaterTypeFromIntNumber_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename UIntTypeForRadixContainsMultResult< decltype(Radix), Radix >::UIntType'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'clear_ccad',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'char *'
              },
              {
                type => 'usint_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'devCadenaC',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const char *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'T< B >'
              },
              {
                declaration_name => 'long_ccad',
                type => 'std::size_t',
                default_value => '64'
              }
            ]
          },
          {
            kind => 'function',
            name => 'clear_ccad',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr char *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'cad_c',
                type => 'char *'
              },
              {
                declaration_name => 'long_de_cad_c',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'atoull',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr unsigned long long',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'text',
                type => 'char *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'maxbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'submaxbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'minbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'subminbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'monobase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'nobase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'maxdigit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'submaxdigit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digit_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digit_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_geqt_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_leqt_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'suitable_base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'middle_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sqrt_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'QUEREMOS FABRICAR LA METAFUNCION TypeFromIntNumber_t<numero_sin_signo> QUE DEVUELVA EL TIPO ENTERO SIN SIGNO MAS PEQUENO PARA EL NUMERO numero_sin_signo '
                }
              ]
            },
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'nullchar',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr CharT',
            initializer => '{CharT(\'\\0\')}'
          },
          {
            kind => 'variable',
            name => 'is_uint_type_for_radix_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '"CLASS" TYPE TYPE DEFINITION template<typename              int_type,int_type base> class digito<int_type,base> {}; CONCEPT TYPE TYPE DEFINITION template<allowable_base_type_c int_type,int_type base> class digito<int_type,base> {}; METAOPERADOR QUE NOS DA LA ADECUACION DE UN TIPO PARA SER BASE DE UN SISTEMA DE NUMERACION VALE CUALQUIER TIPO UNSIGNED INTEGRAL QUE NO SEA EL MAYOR CONSIDERADO AQUI EL MAYOR CONSIDERADO ES UINT128_T '
                }
              ]
            },
            type => 'constexpr bool',
            initializer => '= std::is_unsigned_v<UINT_T> && (! std::is_same_v<UINT_T,uint128_t>)'
          },
          {
            kind => 'variable',
            name => 'is_unsigned_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES UNSIGNED VALEN LOS QUE VALEN PARA RADIX MAS LOS TIPO MAS GRANDES POR LO TANTO UINT128_T SE CONSIDERA UN UNSIGNED INTEGRAL TYPE '
                }
              ]
            },
            type => 'constexpr bool',
            initializer => '=
			is_uint_type_for_radix_v<UINT_T>	|| std::is_same_v<UINT_T,uint128_t>'
          },
          {
            kind => 'variable',
            name => 'is_signed_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES SIGNED. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr bool',
            initializer => '= std::is_signed_v<SINT_T>'
          },
          {
            kind => 'variable',
            name => 'is_integral_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADOR QUE NOS DA SI UN TIPO ES INTEGRAL. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr bool',
            initializer => '= std::is_integral_v<INT_TYPE>'
          },
          {
            kind => 'variable',
            name => 'eq_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADORES DE COMPARACION DE CAPACIDAD DE INTEGERS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr bool',
            initializer => '= (sizeof(T) == sizeof(S))'
          },
          {
            kind => 'variable',
            name => 'gt_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            initializer => '= (sizeof(T) > sizeof(S))'
          },
          {
            kind => 'variable',
            name => 'lt_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            initializer => '= (sizeof(T) < sizeof(S))'
          },
          {
            kind => 'variable',
            name => 'ge_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            initializer => '= gt_sz_v<T,S>||eq_sz_v<T,S>'
          },
          {
            kind => 'variable',
            name => 'le_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO NATURAL PARA EL ACTUAL TIPO NATURAL POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'constexpr bool',
            initializer => '= lt_sz_v<T,S>||eq_sz_v<T,S>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction',
      classes => [
        {
          name => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_for_greater_suitable_type_deduction::UIntTypeForRadixContainsMultResult< T, Radix >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction',
      classes => [
        {
          name => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_for_suitable_type_deduction::UIntTypeForRadix< T, Radix >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt',
      classes => [
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uchint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< uint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ulint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< ullint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< usint_t >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt',
      classes => [
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< schint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< slint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< sllint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< ssint_t >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt',
      classes => [
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< schint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint128_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< slint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< sllint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< ssint_t >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt',
      classes => [
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uchint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< uint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ulint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< ullint_t >'
        },
        {
          name => 'NumRepr::type_traits::ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< usint_t >'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'std',
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities',
      classes => [
        {
          name => 'utilities::for_each_same_type'
        },
        {
          name => 'utilities::for_each_same_type< Head_t >'
        },
        {
          name => 'utilities::local_void_t'
        },
        {
          name => 'utilities::pack2array'
        },
        {
          name => 'utilities::pack2tuple'
        }
      ],
      namespaces => [
        {
          name => 'utilities::special'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'uintspair',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< UINT_T, 2 >'
          },
          {
            kind => 'typedef',
            name => 'uintspairlist',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< uintspair< UINT_T >, B >'
          },
          {
            kind => 'typedef',
            name => 'uintspairtbl',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< uintspairlist< UINT_T, B >, B >'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'assign_with_order',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dest',
                type => 'auto &'
              },
              {
                declaration_name => 'args',
                type => 'const Ts &...'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities::special',
      classes => [
        {
          name => 'utilities::special::pow_B_to_E_t'
        },
        {
          name => 'utilities::special::pow_B_to_E_t< Base, 0 >'
        },
        {
          name => 'utilities::special::pow_B_to_E_t< Base, 1 >'
        },
        {
          name => 'utilities::special::pow_B_to_E_t< Base, 2 >'
        },
        {
          name => 'utilities::special::tuple_builder_t'
        },
        {
          name => 'utilities::special::tuple_builder_t< BeginIntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'utilities::special::tuple_builder_t< EndIntObj_ct-1, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt >'
        },
        {
          name => 'utilities::special::tuple_user_constructor_t'
        }
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'Base_pow_to_Size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FORMA SENCILLA DE CONSEGUIR POTENCIAS DE UNA BASE EN COMPILE TIME. '
                }
              ]
            },
            detailed => {},
            type => 'consteval NumRepr::uint128_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ctf_helper',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'std::index_sequence< Is... >'
              },
              {
                declaration_name => 't',
                type => 'std::tuple< Ts... > const &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ct_for',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 't',
                type => 'std::tuple< Ts... > const &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'conversion_to_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONVERSION DE REGISTRO DE DIGITOS A ENTERO EN TIEMPO DE COMPILACION. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr NumRepr::uint128_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const A &'
              }
            ]
          }
        ]
      },
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'Pow_B2L_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr NumRepr::uint128_t',
            initializer => '= pow_B_to_E_t<Base,Exp>::value'
          },
          {
            kind => 'variable',
            name => 'tuple_constr_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            initializer => '=
	tuple_user_constructor_t<
			BeginIntObj_ct,
			EndIntObj_ct,
			Base,
			Funct_tt
	>::build()'
          }
        ]
      },
      brief => {},
      detailed => {
        doc => [
          {
            type => 'parbreak'
          },
          {
            type => 'text',
            content => 'LA LLAMADA "REAL" ES '
          },
          {
            type => 'preformatted',
            content => '            assign_with_order(dest,args...);
'
          },
          {
            type => 'text',
            content => ' donde los "args" son de tipo "Ts" (que es uno solo, todos iguales entre si) '
          }
        ]
      }
    }
  ],
  files => [
    {
      name => 'auxiliary_functions.hpp',
      includes => [
        {
          name => 'auxiliary_types.hpp',
          ref => 'auxiliary__types_8hpp'
        }
      ],
      included_by => [
        {
          name => 'dig_t.hpp',
          ref => 'dig__t_8hpp'
        }
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'Char2Sign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'ch',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Int2Sign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nu',
                type => 'IntT'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Int2SignFunct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_funct_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nu',
                type => 'IntT'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Nat2SignFunct',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr sign_funct_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'nu',
                type => 'NatIntT'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ceilsqrt',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              },
              {
                declaration_name => 'low',
                type => 'size_t'
              },
              {
                declaration_name => 'high',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ceilsqrt',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'find_factor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              },
              {
                declaration_name => 'low',
                type => 'size_t'
              },
              {
                declaration_name => 'high',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_prime',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_power_of_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'num',
                type => 'uint128_t'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'auxiliary_types.hpp',
      includes => [
        {
          name => 'basic_types.hpp',
          ref => 'basic__types_8hpp'
        }
      ],
      included_by => [
        {
          name => 'auxiliary_functions.hpp',
          ref => 'auxiliary__functions_8hpp'
        },
        {
          name => 'dig_t.hpp',
          ref => 'dig__t_8hpp'
        },
        {
          name => 'lexer_parser.hpp',
          ref => 'lexer__parser_8hpp'
        }
      ],
      enums => {
        members => [
          {
            kind => 'enum',
            name => 'sign_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'vminus',
                initializer => '= true',
                brief => {},
                detailed => {}
              },
              {
                name => 'vplus',
                initializer => '= false',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'sign_funct_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'INTRODUCIDO. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'vzero',
                initializer => '= 0',
                brief => {},
                detailed => {}
              },
              {
                name => 'vminus',
                initializer => '= -1',
                brief => {},
                detailed => {}
              },
              {
                name => 'vplus',
                initializer => '= +1',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'dig_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'BINnat',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'BCDnat',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'BCDexc3',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'BCDaitk',
                initializer => '=3',
                brief => {},
                detailed => {}
              },
              {
                name => 'johnson_n',
                initializer => '=4',
                brief => {},
                detailed => {}
              },
              {
                name => 'biquinario',
                initializer => '=5',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'num_type_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'A INTRODUCIR. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'natural',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'entero',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'racional',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'real',
                initializer => '=3',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'nat_num_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'YA INTRODUCIDO, PERO NO EXPLICITAMENTE NI COMPLETAMENTE. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'natural',
                initializer => '=false',
                brief => {},
                detailed => {}
              },
              {
                name => 'exc_n',
                initializer => '=true',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'int_num_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOLO NATURAL. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'int_CB',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'int_CBm1',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'int_MS',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'int_EXC_n',
                initializer => '=3',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'rat_num_format_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'EN C_B YA QUEDA EN MS. '
                }
              ]
            },
            detailed => {},
            values => [
              {
                name => 'pair_num_den',
                initializer => '=0',
                brief => {},
                detailed => {}
              },
              {
                name => 'fxd_pt',
                initializer => '=1',
                brief => {},
                detailed => {}
              },
              {
                name => 'flt_pt',
                initializer => '=2',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'binop_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'add',
                brief => {},
                detailed => {}
              },
              {
                name => 'sub',
                brief => {},
                detailed => {}
              },
              {
                name => 'mult',
                brief => {},
                detailed => {}
              },
              {
                name => 'div',
                brief => {},
                detailed => {}
              },
              {
                name => 'rem',
                brief => {},
                detailed => {}
              },
              {
                name => 'fediv',
                brief => {},
                detailed => {}
              },
              {
                name => 'other',
                brief => {},
                detailed => {}
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'base_num_t.hpp',
      includes => [
        {
          name => 'int_reg_digs_t.hpp',
          ref => 'int__reg__digs__t_8hpp'
        }
      ],
      included_by => [
        {
          name => 'nat_num_t.hpp',
          ref => 'nat__num__t_8hpp'
        }
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'pot_max_base_B_en_Int_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr ullint',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'num_digs_max_base_B_en_Int_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr ullint',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'max_base_B_en_Int_T',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr ullint',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'basic_types.hpp',
      includes => [
        {
          name => 'istream'
        },
        {
          name => 'cinttypes'
        },
        {
          name => 'type_traits'
        },
        {
          name => 'optional'
        },
        {
          name => 'compare'
        },
        {
          name => 'concepts'
        },
        {
          name => 'iostream'
        },
        {
          name => 'cstring'
        },
        {
          name => 'string'
        },
        {
          name => 'sstream'
        },
        {
          name => 'fstream'
        },
        {
          name => 'array'
        },
        {
          name => 'vector'
        },
        {
          name => 'list'
        },
        {
          name => 'map'
        },
        {
          name => 'climits'
        },
        {
          name => 'numeric'
        },
        {
          name => 'limits'
        },
        {
          name => 'cmath'
        },
        {
          name => 'iterator'
        },
        {
          name => 'functional'
        }
      ],
      included_by => [
        {
          name => 'auxiliary_types.hpp',
          ref => 'auxiliary__types_8hpp'
        },
        {
          name => 'utilities.hpp',
          ref => 'utilities_8hpp'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'chint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'NUEVOS NOMBRES PARA LOS ENTEROS O PARECIDOS. '
                }
              ]
            },
            detailed => {},
            type => 'char'
          },
          {
            kind => 'typedef',
            name => 'schint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed char'
          },
          {
            kind => 'typedef',
            name => 'ssint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed short int'
          },
          {
            kind => 'typedef',
            name => 'sint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed int'
          },
          {
            kind => 'typedef',
            name => 'slint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed long int'
          },
          {
            kind => 'typedef',
            name => 'sllint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'signed long long int'
          },
          {
            kind => 'typedef',
            name => 'uchint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned char'
          },
          {
            kind => 'typedef',
            name => 'usint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned short int'
          },
          {
            kind => 'typedef',
            name => 'uint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned int'
          },
          {
            kind => 'typedef',
            name => 'ulint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned long int'
          },
          {
            kind => 'typedef',
            name => 'ullint_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned long long int'
          },
          {
            kind => 'typedef',
            name => 'uint128_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => '__uint128_t'
          },
          {
            kind => 'typedef',
            name => 'sint128_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => '__int128_t'
          },
          {
            kind => 'typedef',
            name => 'size_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::size_t'
          },
          {
            kind => 'typedef',
            name => 'sint8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int8_t'
          },
          {
            kind => 'typedef',
            name => 'sint16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int16_t'
          },
          {
            kind => 'typedef',
            name => 'sint32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int32_t'
          },
          {
            kind => 'typedef',
            name => 'sint64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          },
          {
            kind => 'typedef',
            name => 'int8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int8_t'
          },
          {
            kind => 'typedef',
            name => 'int16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int16_t'
          },
          {
            kind => 'typedef',
            name => 'int32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int32_t'
          },
          {
            kind => 'typedef',
            name => 'int64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int64_t'
          },
          {
            kind => 'typedef',
            name => 'fast8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast8_t'
          },
          {
            kind => 'typedef',
            name => 'fast16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast16_t'
          },
          {
            kind => 'typedef',
            name => 'fast32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast32_t'
          },
          {
            kind => 'typedef',
            name => 'fast64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_fast64_t'
          },
          {
            kind => 'typedef',
            name => 'least8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least8_t'
          },
          {
            kind => 'typedef',
            name => 'least16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least16_t'
          },
          {
            kind => 'typedef',
            name => 'least32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least32_t'
          },
          {
            kind => 'typedef',
            name => 'least64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::int_least64_t'
          },
          {
            kind => 'typedef',
            name => 'uint8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint8_t'
          },
          {
            kind => 'typedef',
            name => 'uint16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint16_t'
          },
          {
            kind => 'typedef',
            name => 'uint32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint32_t'
          },
          {
            kind => 'typedef',
            name => 'uint64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint64_t'
          },
          {
            kind => 'typedef',
            name => 'ufast8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast8_t'
          },
          {
            kind => 'typedef',
            name => 'ufast16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast16_t'
          },
          {
            kind => 'typedef',
            name => 'ufast32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast32_t'
          },
          {
            kind => 'typedef',
            name => 'ufast64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_fast64_t'
          },
          {
            kind => 'typedef',
            name => 'uleast8_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least8_t'
          },
          {
            kind => 'typedef',
            name => 'uleast16_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least16_t'
          },
          {
            kind => 'typedef',
            name => 'uleast32_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least32_t'
          },
          {
            kind => 'typedef',
            name => 'uleast64_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uint_least64_t'
          },
          {
            kind => 'typedef',
            name => 'intmax_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::intmax_t'
          },
          {
            kind => 'typedef',
            name => 'uintmax_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::uintmax_t'
          },
          {
            kind => 'typedef',
            name => 'sig_UInt_for_UInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO ENTERO PARA EL ACTUAL TIPO NATURAL POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'typename ugly_details_UInt_for_UInt::__sig_UInt_for_UInt_t< UInt_t >::type'
          },
          {
            kind => 'typedef',
            name => 'sig_SInt_for_UInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO NATURAL PARA EL ACTUAL TIPO ENTERO POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'typename ugly_details_sig_SInt_for_UInt::__sig_SInt_for_UInt_t< UInt_t >::type'
          },
          {
            kind => 'typedef',
            name => 'sig_UInt_for_SInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO ENTERO PARA EL ACTUAL TIPO ENTERO POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'typename ugly_details_UInt_for_SInt::__sig_UInt_for_SInt_t< Int_t >::type'
          },
          {
            kind => 'typedef',
            name => 'sig_SInt_for_SInt_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCIONES PARA DAR CON LOS MAXIMOS NUMEROS QUE CABEN EN UN TIPO Y SIMILARES '
                }
              ]
            },
            type => 'typename ugly_details_SInt_for_SInt::__sig_SInt_for_SInt_t< SInt_t >::type'
          },
          {
            kind => 'typedef',
            name => 'TypeFromIntNumber_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'QUEREMOS FABRICAR LA METAFUNCION TypeFromIntNumberLTSqrtMaxOfType_t<numero> QUE DEVUELVA EL TIPO ENTERO SIN SIGNO MAS PEQUENO PARA EL NUMERO numero TAL QUE SQRT(TYPE::MAX())>=B-1 '
                }
              ]
            },
            type => 'typename UIntTypeForRadix< decltype(Radix), Radix >::UIntType'
          },
          {
            kind => 'typedef',
            name => 'GreaterTypeFromIntNumber_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename UIntTypeForRadixContainsMultResult< decltype(Radix), Radix >::UIntType'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'clear_ccad',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'char *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'char *'
              },
              {
                type => 'usint_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'devCadenaC',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const char *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'T< B >'
              },
              {
                declaration_name => 'long_ccad',
                type => 'std::size_t',
                default_value => '64'
              }
            ]
          },
          {
            kind => 'function',
            name => 'clear_ccad',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr char *',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'cad_c',
                type => 'char *'
              },
              {
                declaration_name => 'long_de_cad_c',
                type => 'std::size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'atoull',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr unsigned long long',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'text',
                type => 'char *'
              }
            ]
          },
          {
            kind => 'function',
            name => 'maxbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'submaxbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'minbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'subminbase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'monobase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'nobase',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'maxdigit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'submaxdigit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digit_0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'digit_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_geqt_2',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'base_leqt_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'suitable_base',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval bool',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'middle_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'sqrt_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'QUEREMOS FABRICAR LA METAFUNCION TypeFromIntNumber_t<numero_sin_signo> QUE DEVUELVA EL TIPO ENTERO SIN SIGNO MAS PEQUENO PARA EL NUMERO numero_sin_signo '
                }
              ]
            },
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'nullchar',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr CharT',
            initializer => '{CharT(\'\\0\')}'
          },
          {
            kind => 'variable',
            name => 'is_uint_type_for_radix_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '"CLASS" TYPE TYPE DEFINITION template<typename              int_type,int_type base> class digito<int_type,base> {}; CONCEPT TYPE TYPE DEFINITION template<allowable_base_type_c int_type,int_type base> class digito<int_type,base> {}; METAOPERADOR QUE NOS DA LA ADECUACION DE UN TIPO PARA SER BASE DE UN SISTEMA DE NUMERACION VALE CUALQUIER TIPO UNSIGNED INTEGRAL QUE NO SEA EL MAYOR CONSIDERADO AQUI EL MAYOR CONSIDERADO ES UINT128_T '
                }
              ]
            },
            type => 'constexpr bool',
            initializer => '= std::is_unsigned_v<UINT_T> && (! std::is_same_v<UINT_T,uint128_t>)'
          },
          {
            kind => 'variable',
            name => 'is_unsigned_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES UNSIGNED VALEN LOS QUE VALEN PARA RADIX MAS LOS TIPO MAS GRANDES POR LO TANTO UINT128_T SE CONSIDERA UN UNSIGNED INTEGRAL TYPE '
                }
              ]
            },
            type => 'constexpr bool',
            initializer => '=
			is_uint_type_for_radix_v<UINT_T>	|| std::is_same_v<UINT_T,uint128_t>'
          },
          {
            kind => 'variable',
            name => 'is_signed_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADOR QUE NOS DA SI UN TIPO INTEGRAL ES SIGNED. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr bool',
            initializer => '= std::is_signed_v<SINT_T>'
          },
          {
            kind => 'variable',
            name => 'is_integral_type_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADOR QUE NOS DA SI UN TIPO ES INTEGRAL. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr bool',
            initializer => '= std::is_integral_v<INT_TYPE>'
          },
          {
            kind => 'variable',
            name => 'eq_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAOPERADORES DE COMPARACION DE CAPACIDAD DE INTEGERS. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr bool',
            initializer => '= (sizeof(T) == sizeof(S))'
          },
          {
            kind => 'variable',
            name => 'gt_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            initializer => '= (sizeof(T) > sizeof(S))'
          },
          {
            kind => 'variable',
            name => 'lt_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            initializer => '= (sizeof(T) < sizeof(S))'
          },
          {
            kind => 'variable',
            name => 'ge_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr bool',
            initializer => '= gt_sz_v<T,S>||eq_sz_v<T,S>'
          },
          {
            kind => 'variable',
            name => 'le_sz_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'METAFUNCION : DA EL SIGUIENTE TIPO NATURAL PARA EL ACTUAL TIPO NATURAL POR ESPECIALIZACION EXPLICITA '
                }
              ]
            },
            type => 'constexpr bool',
            initializer => '= lt_sz_v<T,S>||eq_sz_v<T,S>'
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'dig_t.hpp',
      includes => [
        {
          name => 'auxiliary_functions.hpp',
          ref => 'auxiliary__functions_8hpp'
        },
        {
          name => 'auxiliary_types.hpp',
          ref => 'auxiliary__types_8hpp'
        },
        {
          name => 'lexer_parser.hpp',
          ref => 'lexer__parser_8hpp'
        }
      ],
      included_by => [
        {
          name => 'int_num_t.hpp',
          ref => 'int__num__t_8hpp'
        },
        {
          name => 'memory_handler.hpp',
          ref => 'memory__handler_8hpp'
        },
        {
          name => 'reg_digs_t.hpp',
          ref => 'reg__digs__t_8hpp'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'digit_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOLO HAY QUE DECLARAR digit_t<2> o digit_t<10> o ... '
                }
              ]
            },
            detailed => {},
            type => 'dig_t< type_traits::TypeFromIntNumber_t< static_cast< uint128_t >(B)>, static_cast< type_traits::TypeFromIntNumber_t< static_cast< uint128_t >(B)> >(static_cast< uint128_t >(B)) >'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'ui_1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'consteval UINT_T',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'dig_max',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEFINCION DE template<uint128_t Radix> digito_t{};. '
                }
              ]
            },
            detailed => {},
            type => 'consteval dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'dig_t< UINT_T, Base > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'dig_t< UINT_T, Base >'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'int_num_t.hpp',
      includes => [
        {
          name => 'dig_t.hpp',
          ref => 'dig__t_8hpp'
        },
        {
          name => 'int_reg_digs_t.hpp',
          ref => 'int__reg__digs__t_8hpp'
        },
        {
          name => 'nat_num_t.hpp',
          ref => 'nat__num__t_8hpp'
        }
      ],
      included_by => [
      ],
      enums => {
        members => [
          {
            kind => 'enum',
            name => 'forma_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'noraw',
                brief => {},
                detailed => {}
              },
              {
                name => 'raw',
                brief => {},
                detailed => {}
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'int_reg_digs_t.hpp',
      includes => [
        {
          name => 'nat_reg_digs_t.hpp',
          ref => 'nat__reg__digs__t_8hpp'
        }
      ],
      included_by => [
        {
          name => 'base_num_t.hpp',
          ref => 'base__num__t_8hpp'
        },
        {
          name => 'int_num_t.hpp',
          ref => 'int__num__t_8hpp'
        },
        {
          name => 'nat_rat_fixed_reg_t.hpp',
          ref => 'nat__rat__fixed__reg__t_8hpp'
        }
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'lexer_parser.hpp',
      includes => [
        {
          name => 'auxiliary_types.hpp',
          ref => 'auxiliary__types_8hpp'
        }
      ],
      included_by => [
        {
          name => 'dig_t.hpp',
          ref => 'dig__t_8hpp'
        },
        {
          name => 'reg_digs_t.hpp',
          ref => 'reg__digs__t_8hpp'
        }
      ],
      enums => {
        members => [
          {
            kind => 'enum',
            name => 'reglexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'st_00',
                initializer => '= 0',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_01',
                initializer => '= 1',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_02',
                initializer => '=2',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_03',
                initializer => '=3',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_04',
                initializer => '= 4',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_05',
                initializer => '= 5',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_06',
                initializer => '= 6',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_07',
                initializer => '= 7',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_08',
                initializer => '=8',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_09',
                initializer => '=9',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_10',
                initializer => '=10',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_11',
                initializer => '=11',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_12',
                initializer => '=12',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_13',
                initializer => '=13',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'sintaxerrlexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'st_err_00',
                initializer => '= 256',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_01',
                initializer => '= 257',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_02',
                initializer => '= 258',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_03',
                initializer => '= 259',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_04',
                initializer => '= 260',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_05',
                initializer => '= 261',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_06',
                initializer => '= 262',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_07',
                initializer => '= 263',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_08',
                initializer => '= 264',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_09',
                initializer => '= 265',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_10',
                initializer => '= 266',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_11',
                initializer => '= 267',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_12',
                initializer => '= 268',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_err_13',
                initializer => '= 269',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'semerrlexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'st_sem_00',
                initializer => '= 4096',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_01',
                initializer => '= 4097',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_02',
                initializer => '= 4098',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_03',
                initializer => '= 4099',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_04',
                initializer => '= 4100',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_05',
                initializer => '= 4101',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_06',
                initializer => '= 4102',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_07',
                initializer => '= 4103',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_08',
                initializer => '= 4104',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_09',
                initializer => '= 4105',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_10',
                initializer => '= 4106',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_11',
                initializer => '= 4107',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_12',
                initializer => '= 4108',
                brief => {},
                detailed => {}
              },
              {
                name => 'st_sem_13',
                initializer => '= 4109',
                brief => {},
                detailed => {}
              }
            ]
          },
          {
            kind => 'enum',
            name => 'lexst_e',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            values => [
              {
                name => 'reg_00',
                initializer => '=  0',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_01',
                initializer => '=  1',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_02',
                initializer => '=  2',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_03',
                initializer => '=  3',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_04',
                initializer => '=  4',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_05',
                initializer => '=  5',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_06',
                initializer => '=  6',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_07',
                initializer => '=  7',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_08',
                initializer => '=  8',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_09',
                initializer => '=  9',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_10',
                initializer => '= 10',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_11',
                initializer => '= 11',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_12',
                initializer => '= 12',
                brief => {},
                detailed => {}
              },
              {
                name => 'reg_13',
                initializer => '= 13',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_00',
                initializer => '= 256',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_01',
                initializer => '= 257',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_02',
                initializer => '= 258',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_03',
                initializer => '= 259',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_04',
                initializer => '= 260',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_05',
                initializer => '= 261',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_06',
                initializer => '= 262',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_07',
                initializer => '= 263',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_08',
                initializer => '= 264',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_09',
                initializer => '= 265',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_10',
                initializer => '= 266',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_11',
                initializer => '= 267',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_12',
                initializer => '= 268',
                brief => {},
                detailed => {}
              },
              {
                name => 'err_13',
                initializer => '= 269',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_00',
                initializer => '= 4096',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_01',
                initializer => '= 4097',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_02',
                initializer => '= 4098',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_03',
                initializer => '= 4099',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_04',
                initializer => '= 4100',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_05',
                initializer => '= 4101',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_06',
                initializer => '= 4102',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_07',
                initializer => '= 4103',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_08',
                initializer => '= 4104',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_09',
                initializer => '= 4105',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_10',
                initializer => '= 4106',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_11',
                initializer => '= 4107',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_12',
                initializer => '= 4108',
                brief => {},
                detailed => {}
              },
              {
                name => 'sem_13',
                initializer => '= 4109',
                brief => {},
                detailed => {}
              }
            ]
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'is_digit',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'digit_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_valid_char',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'char_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_separator',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_end_of_number',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_whitespace',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_end_descriptor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_radix_descriptor',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'is_sign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          },
          {
            kind => 'function',
            name => 'sign_value',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'sign_e',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                definition_name => 'in',
                type => 'char'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'memory_handler.hpp',
      includes => [
        {
          name => 'dig_t.hpp',
          ref => 'dig__t_8hpp'
        }
      ],
      included_by => [
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'par_dir_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::pair< uchint, uchint >'
          },
          {
            kind => 'typedef',
            name => 'func_refn2digs_prim_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::map< std::string, par_dir_t >'
          },
          {
            kind => 'typedef',
            name => 'func_refdig_prim_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::map< std::string, par_dir_t >'
          },
          {
            kind => 'typedef',
            name => 'INT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'long long int'
          },
          {
            kind => 'typedef',
            name => 'UINT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'unsigned long long int'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'construye_matriz_de_variables',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'aT **',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'matd',
                type => 'aT **'
              }
            ]
          },
          {
            kind => 'function',
            name => 'destruye_matriz_de_variables',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'matd',
                type => 'aT **'
              }
            ]
          },
          {
            kind => 'function',
            name => 'construye_matriz_de_variables< INT, INT >',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'INT **',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'matd',
                type => 'INT **'
              }
            ]
          },
          {
            kind => 'function',
            name => 'destruye_matriz_de_variables< INT, INT >',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'matd',
                type => 'INT **'
              }
            ]
          },
          {
            kind => 'function',
            name => 'construye_matriz_de_variables< UINT, UINT >',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'UINT **',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'matd',
                type => 'UINT **'
              }
            ]
          },
          {
            kind => 'function',
            name => 'destruye_matriz_de_variables< UINT, UINT >',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'matd',
                type => 'UINT **'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'nat_num_t.hpp',
      includes => [
        {
          name => 'base_num_t.hpp',
          ref => 'base__num__t_8hpp'
        }
      ],
      included_by => [
        {
          name => 'int_num_t.hpp',
          ref => 'int__num__t_8hpp'
        }
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'istream &'
              },
              {
                declaration_name => 'arg',
                type => 'nat_num_t< Base > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const nat_num_t< Base > &'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'nat_rat_fixed_reg_t.hpp',
      includes => [
        {
          name => 'int_reg_digs_t.hpp',
          ref => 'int__reg__digs__t_8hpp'
        },
        {
          name => 'utilities.hpp',
          ref => 'utilities_8hpp'
        }
      ],
      included_by => [
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'pfx_rat_reg_digs_t< Int_Type, Base, Length > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const pfx_rat_reg_digs_t< Int_Type, Base, Long > &'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'nat_rat_num_t.hpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'nat_reg_digs_t.hpp',
      includes => [
        {
          name => 'reg_digs_t.hpp',
          ref => 'reg__digs__t_8hpp'
        },
        {
          name => 'utilities.hpp',
          ref => 'utilities_8hpp'
        }
      ],
      included_by => [
        {
          name => 'int_reg_digs_t.hpp',
          ref => 'int__reg__digs__t_8hpp'
        },
        {
          name => 'pruebas_dig_t.cpp',
          ref => 'pruebas__dig__t_8cpp'
        }
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'is_nat_reg_digs_type_id',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'ESPECIALIZACIONES PARA NAT_REG_DIGS. '
                }
              ]
            },
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'in',
                type => 'std::string'
              }
            ]
          },
          {
            kind => 'function',
            name => 'to_nat_reg_digs_type_string',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::string',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'size_of_nat_reg_digs_type_string_idT',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'size_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TODO ESTA VERSION + VERSION CON TRATAMIENTO DE ERRORES EN RUNTIME '
                }
              ]
            },
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'nat_reg_digs_t< Int_Type, Base, Length > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const nat_reg_digs_t< Int_Type, Base, Long > &'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'pruebas_dig_t.cpp',
      includes => [
        {
          name => 'utilities.hpp',
          ref => 'utilities_8hpp'
        },
        {
          name => 'nat_reg_digs_t.hpp',
          ref => 'nat__reg__digs__t_8hpp'
        },
        {
          name => 'typeinfo'
        }
      ],
      included_by => [
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'trisums_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::tuple< std::int64_t, std::int64_t, std::int64_t >'
          },
          {
            kind => 'typedef',
            name => 'result_test_binop_con_asignacion',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::vector< trisums_t >'
          },
          {
            kind => 'typedef',
            name => 'retorno_de_test_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::tuple< bool, result_test_binop_con_asignacion, result_test_binop_con_asignacion >'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'conversion_to_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr NumRepr::uint128_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'NumRepr::register_of_digits_t< B, L > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'test_suma_con_asignacion',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'retorno_de_test_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'main',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'int',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'rat_fixed_reg_t.hpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'rat_num_t.hpp',
      includes => [
      ],
      included_by => [
      ],
      brief => {},
      detailed => {}
    },
    {
      name => 'reg_digs_t.hpp',
      includes => [
        {
          name => 'dig_t.hpp',
          ref => 'dig__t_8hpp'
        },
        {
          name => 'utilities.hpp',
          ref => 'utilities_8hpp'
        },
        {
          name => 'lexer_parser.hpp',
          ref => 'lexer__parser_8hpp'
        }
      ],
      included_by => [
        {
          name => 'nat_reg_digs_t.hpp',
          ref => 'nat__reg__digs__t_8hpp'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'register_of_digits_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'reg_digs_t< type_traits::TypeFromIntNumber_t< B >, static_cast< type_traits::TypeFromIntNumber_t< B > >(B), L >'
          },
          {
            kind => 'typedef',
            name => 'register_digs_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'reg_digs_t< TypeFromIntNumber_t< static_cast< uint128_t >(B)>, static_cast< TypeFromIntNumber_t< static_cast< uint128_t >(B)> >(static_cast< uint128_t >(B)), L >'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N> CONCAT(BASE_N_T<N>) '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N> CONCAT(BASE_N_T<N>) STATIC BASE_N_T<N+M> CONCAT(BASE_N_T<N>,BASE_N_T<M>) STATIC BASE_N_T<N+1> CONCAT(BASE_N_T<N>,DIG_T) STATIC BASE_N_T<1+M> CONCAT(DIG_T,BASE_N_T<M>) STATIC BASE_N_T<1> CONCAT(DIG_T) STATIC BASE_N_T<1+1> CONCAT(DIG_T,DIG_T) STATIC BASE_N_T<SIZEOF...(DIG_PACK)> CONCAT(DIG_T...DIG_PACK) VARIADIC PACK '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UInt_t, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N+M> CONCAT(BASE_N_T<N>,BASE_N_T<M>) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, N+M >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UInt_t, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UInt_t, B, M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N+1> CONCAT(BASE_N_T<N>,DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, N+1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UInt_t, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'dig_t< UInt_t, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<1+M> CONCAT(DIG_T,BASE_N_T<M>) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, 1+M >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t< UInt_t, B >'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UInt_t, B, M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<1> CONCAT(DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, 1 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t< UInt_t, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<1+1> CONCAT(DIG_T,DIG_T) '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UInt_t, B, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'dig_t< UInt_t, B >'
              },
              {
                declaration_name => 'rarg',
                type => 'dig_t< UInt_t, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<SIZEOF...(DIG_PACK)> CONCAT(DIG_T,DIG_T ... DIG_PACK) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, 1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig0',
                type => 'T0'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<N+1+(SIZEOF...(DIG_PACK))> CONCAT(BASE_N_T<N>,DIG_T,DIG_T ... DIG_PACK) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, N+1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UInt_t, B, N >'
              },
              {
                declaration_name => 'dig',
                type => 'T'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<M+1+(SIZEOF...(DIG_PACK))> CONCAT(DIG_T,DIG_T ... DIG_PACK,BASE_N_T<M>) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, M+1+(sizeof ...(Ts))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dig',
                type => 'T'
              },
              {
                declaration_name => 'dig_pack',
                type => 'Ts ...'
              },
              {
                declaration_name => 'rarg',
                type => 'reg_digs_t< UInt_t, B, M >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'concat',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'STATIC BASE_N_T<SIZE_T N,SIZE_T ... N_PACK> CONCAT(BASE_N_T<N> LARG,BASE_N_T<N_PACK> ... RARG_PACK) VARIADIC '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UInt_t, B, N+(...+(N_pack))>',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UInt_t, B, N >'
              },
              {
                declaration_name => 'rarg_pack',
                type => 'reg_digs_t< UInt_t, B, N_pack > ...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_rem_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_mer_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'n',
                type => 'size_t'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator|',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&=',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr const reg_digs_t< UINT_T, B, N > &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator&',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_incr',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'TODO 31/12/2022. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rarg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sum_digs_carryin1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'left',
                type => 'dig_t< UINT_T, B > &'
              },
              {
                declaration_name => 'right',
                type => 'dig_t< UINT_T, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sum_digs_carryin0',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'left',
                type => 'dig_t< UINT_T, B > &'
              },
              {
                declaration_name => 'right',
                type => 'dig_t< UINT_T, B >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'm_sum',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr dig_t< UINT_T, B >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_units_divB',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => '< PRECONDITIONS : ARG != 0 AND ARG != 1 > '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCIONES DE IMPLEMENTACION DE LA DIVISION ENTRE DOS REGISTROS DE DIGITOS BEGIN POSTCONDICION RET[N-1] == (DIG_1() | DIG_0()) POSTCONDICION RET[N-1] == DIG_1() => RET[N-2,0] == REGD_N_0() HAY QUE VER SI ES POTENCIA DE B : is_any_B_pow '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_units_divB_n',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION DE RECURSION PARA LA DIVISION APROX_COC_REM APROXIMA REMAINDER A 2 DIGITOS Y DIVISOR A 1 DIGITO '
                }
              ]
            },
            type => 'constexpr reg_digs_t< UINT_T, B, N >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_coc_rem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'std::array<SIG_UINT_T,2>{}[0] == COC std::array<SIG_UINT_T,2>{}[1] == REM PRECONDICION DSOR != 0 Y DSOR != 1 FUNCION DE RECURSION PARA LA DIVISION SOBRECARGA DE LA ANTERIOR PARA LA RECURSION QUE NO SEA EL PRIMER CASO '
                }
              ]
            },
            type => 'constexpr std::array< type_traits::sig_UInt_for_UInt_t< UINT_T >, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rem',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'dsor',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'aprox_coc_rem',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'std::array<SIG_UINT_T,2>{}[0] == COC std::array<SIG_UINT_T,2>{}[1] == REM PRECONDICION DSOR != 0 Y DSOR != 1 '
                }
              ]
            },
            type => 'constexpr std::array< type_traits::sig_UInt_for_UInt_t< UINT_T >, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'rem',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'dsor',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'coc_calculado',
                type => 'type_traits::sig_UInt_for_UInt_t< UINT_T >'
              },
              {
                declaration_name => 'rem_calculado',
                type => 'type_traits::sig_UInt_for_UInt_t< UINT_T >'
              }
            ]
          },
          {
            kind => 'function',
            name => 'fediv',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'END. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCIONES DE IMPLEMENTACION DE LA DIVISION ENTRE DOS REGISTROS DE DIGITOS '
                }
              ]
            },
            type => 'constexpr std::array< reg_digs_t< UINT_T, B, std::max(N, M)>, 2 >',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'larg',
                type => 'const reg_digs_t< UINT_T, B, N > &'
              },
              {
                declaration_name => 'rarg',
                type => 'const reg_digs_t< UINT_T, B, M > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_digit_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION QUE CONSIGUE EL TOKEN DIGITO. '
                }
              ]
            },
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'dig_value',
                type => 'dig_t< UINT_T, B > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_radix_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FUNCION QUE CONSIGUE EL TOKEN BASE. '
                }
              ]
            },
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'get_digit_loop_token',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'value',
                type => 'reg_digs_t< T, B, L > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'read',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'DEFINCION DE template<uint128_t Radix> digito_t{};. '
                }
              ]
            },
            detailed => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOLO HAY QUE DECLARAR digit_t<2> o digit_t<10> o ... '
                }
              ]
            },
            type => 'bool',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'value',
                type => 'reg_digs_t< T, B, L > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator>>',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'SOBRECARGA DE ISTREAM Y OSTREAM CON LOS OPERADORES DE DESPLAZAMEINTO. '
                }
              ]
            },
            detailed => {},
            type => 'std::istream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'is',
                type => 'std::istream &'
              },
              {
                declaration_name => 'arg',
                type => 'reg_digs_t< Int_Type, Base, Length > &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'operator<<',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'std::ostream &',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'os',
                type => 'std::ostream &'
              },
              {
                declaration_name => 'arg',
                type => 'const reg_digs_t< Int_Type, Base, Long > &'
              }
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'test_dig_t.hpp',
      includes => [
        {
          name => 'pardigs_t.hpp'
        }
      ],
      included_by => [
      ],
      functions => {
        members => [
          {
            kind => 'function',
            name => 'display_constr_UINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_SINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_defecto_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_copia_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_constr_movimiento_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_UINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_SINT_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_copia_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_assign_movimiento_dig_t',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_preincrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_postincrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_predecrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_postdecrement',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_mult_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_mult_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_ediv_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_ediv_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_erem_assign',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_erem_assign_uint',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_add_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_substract_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_multiply',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_multiply_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_edivision',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_edivision_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_operator_C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_prop_C_B_eq_inv_C_B',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_prop_C_Bm1_eq_inv_C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_prop_C_B_minus_1_eq_C_Bm1',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_unary_operator_minus',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'display_unary_operator_neg',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          }
        ]
      },
      brief => {},
      detailed => {}
    },
    {
      name => 'utilities.hpp',
      includes => [
        {
          name => 'tuple'
        },
        {
          name => 'array'
        },
        {
          name => 'basic_types.hpp',
          ref => 'basic__types_8hpp'
        }
      ],
      included_by => [
        {
          name => 'nat_rat_fixed_reg_t.hpp',
          ref => 'nat__rat__fixed__reg__t_8hpp'
        },
        {
          name => 'nat_reg_digs_t.hpp',
          ref => 'nat__reg__digs__t_8hpp'
        },
        {
          name => 'pruebas_dig_t.cpp',
          ref => 'pruebas__dig__t_8cpp'
        },
        {
          name => 'reg_digs_t.hpp',
          ref => 'reg__digs__t_8hpp'
        }
      ],
      typedefs => {
        members => [
          {
            kind => 'typedef',
            name => 'uintspair',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< UINT_T, 2 >'
          },
          {
            kind => 'typedef',
            name => 'uintspairlist',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< uintspair< UINT_T >, B >'
          },
          {
            kind => 'typedef',
            name => 'uintspairtbl',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'typename std::array< uintspairlist< UINT_T, B >, B >'
          }
        ]
      },
      functions => {
        members => [
          {
            kind => 'function',
            name => 'assign_with_order',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'dest',
                type => 'auto &'
              },
              {
                declaration_name => 'args',
                type => 'const Ts &...'
              }
            ]
          },
          {
            kind => 'function',
            name => 'Base_pow_to_Size',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'FORMA SENCILLA DE CONSEGUIR POTENCIAS DE UNA BASE EN COMPILE TIME. '
                }
              ]
            },
            detailed => {},
            type => 'consteval NumRepr::uint128_t',
            const => 'no',
            volatile => 'no',
            parameters => [
            ]
          },
          {
            kind => 'function',
            name => 'ctf_helper',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                type => 'std::index_sequence< Is... >'
              },
              {
                declaration_name => 't',
                type => 'std::tuple< Ts... > const &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'ct_for',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr void',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 't',
                type => 'std::tuple< Ts... > const &'
              }
            ]
          },
          {
            kind => 'function',
            name => 'conversion_to_int',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {
              doc => [
                {
                  type => 'parbreak'
                },
                {
                  type => 'text',
                  content => 'CONVERSION DE REGISTRO DE DIGITOS A ENTERO EN TIEMPO DE COMPILACION. '
                }
              ]
            },
            detailed => {},
            type => 'constexpr NumRepr::uint128_t',
            const => 'no',
            volatile => 'no',
            parameters => [
              {
                declaration_name => 'arg',
                type => 'const A &'
              }
            ]
          }
        ]
      },
      variables => {
        members => [
          {
            kind => 'variable',
            name => 'Pow_B2L_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr NumRepr::uint128_t',
            initializer => '= pow_B_to_E_t<Base,Exp>::value'
          },
          {
            kind => 'variable',
            name => 'tuple_constr_v',
            virtualness => 'non_virtual',
            protection => 'public',
            static => 'no',
            brief => {},
            detailed => {},
            type => 'constexpr auto',
            initializer => '=
	tuple_user_constructor_t<
			BeginIntObj_ct,
			EndIntObj_ct,
			Base,
			Funct_tt
	>::build()'
          }
        ]
      },
      brief => {},
      detailed => {}
    }
  ],
  groups => [
  ],
  pages => [
  ]
};
1;
