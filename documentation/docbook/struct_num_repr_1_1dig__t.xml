<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1dig__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::dig_t&lt; UINT_T, B &gt;</title>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;dig_t.hpp&gt;</computeroutput>
</para>
Diagrama de colaboración para NumRepr::dig_t&lt; UINT_T, B &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> = sig_UInt_for_UInt_t&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> = sig_SInt_for_UInt_t&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link> = std::array&lt; UINT_T, 2 &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a1051e56dae889dea37c0fc56c629ef47">digspair</link> = std::array&lt; <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>, 2 &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9">uintspairlist</link> = std::array&lt; <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link>, B &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1dig__t_1a66b00dc8a233028c0b8af1d6c8c968df">uintspairtbl</link> = std::array&lt; <link linkend="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9">uintspairlist</link>, B &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1dig__t_1ad0179be562c80f204f00fa63ee87f595">resbinop_t</link> = <link linkend="_struct_num_repr_1_1auxiliary__types_1_1resbinop__t">auxiliary_types::resbinop_t</link>&lt; <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>, op &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1aafdbf9ec2e1c2c693053bddc9c3da18b">operator UINT_T</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const UINT_T &amp; <link linkend="_struct_num_repr_1_1dig__t_1a41f650033f842a57e20462acf2d56bd3">get</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a98f3c67f12b327b29cb7dd956979aa6b">operator SIG_UINT_T</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a11aa8890a01df04bb8c78e36b1671bcb">operator SIG_SINT_T</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t_1aad3081cc834a2404026c745da3a19624">operator()</link> () const noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a6a88c25f113c10a3e960dff6bc83209d">dig_t</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1af0449bb155f32b9f4d0a77616be964f5">dig_t</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;) noexcept=default</para>

<para>CONSTRUCTOR COPIA POR REFERENCIA. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t_1a0271247936d99587c10e4e7f793eca59">dig_t</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;&amp;) noexcept=default</para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ae1e378970227631d984b568c6e87aea9">operator=</link> (const Int_t &amp;a) noexcept</para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN INT_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a2c7df43b2672d12d58b0170564b65067">operator=</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;) noexcept=default</para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN DIG_T. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1acd2c86722aea84ff8caa599f46143096">operator=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;&amp;) noexcept=default</para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE MOVIMIENTO DESDE UN DIG_T. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1aecc930e8cb3dbc3ede5beeff11ef77ee">is_unit</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a48f6d7f54f227eaf337438fccd8b9ff4">is_0_divisor</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1aa62606aacfd127f2670db23a727e1689">mult_inv</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1aaad1f6b6c362bb8b79e308d8dbd3623e">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aadb521540be446f8f6affbe08593f521">operator&amp;=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a3794e0222d9b563c1692006bba0af83e">operator|</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp;arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ab917ba177adf7c56596f814db3bc3e26">operator|=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::unsigned_integral_c UIntType&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1abcc6416630883d3061eb2cc4a2b19b6d">operator^=</link> (UIntType exp) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::unsigned_integral_c UIntType&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a38d52e65a990092a76e803e16e918fb7">operator^</link> (UIntType exp) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a16d0da2599654bff077fbeca82c74935">operator==</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a47635d2d0ec4782ae299ee8d120e3382">operator!=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a2e48d921d1562d835c6fe6804ab2ec29">operator&gt;=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1afefef1d7905f1b427805fed3bac47b6f">operator&gt;</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1acdc26317d35ccf448bf50bc5aa8a88e2">operator&lt;=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a541d4e253f487b533befc4b36db15b37">operator&lt;</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> a) const noexcept</para>
</listitem>
            <listitem><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1dig__t_1a6c213b8f2f95f130cd8557f4d910e645">operator&lt;=&gt;</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> rhs) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a98120e7f67bdd81793d79f21df596840">operator==</link> (Int_t rhs) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1dig__t_1ab70884cd01554850ffe4d26a86dc72e0">operator&lt;=&gt;</link> (Int_t rhs) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aba27e3396b7ed8788f2cfe819f4d4bb3">operator+=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ae24ff79c3041e20d742037441037d2b3">operator+=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aaea951b73ed6db7bbddace9d937e65e1">operator-=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a8ccb0b59a15564ffb2b293664267d5ec">operator-=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a4a8206b542cb7f4b6346f8958757b977">operator*=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a168a6f67f18e796f8873a0e6c2333d54">operator*=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1ae6090e4504d28bdd974c7366150a5eaa">operator/=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a2ae86f82c15b23402ab0893d841e9f9f">operator/=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a6c7356a5ae3558ef870ec13760e4cb8a">operator%=</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a2c84aafb21be9d9cdbe35758bc44d98b">operator%=</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aaa1f4b500974e6fd56e680e03f29b2c2">operator++</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a8870447b3f8ce7bd2a9119b6f7d4530c">operator++</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a760f7426a2aa1c3633499eb30faa47bc">operator--</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a8c9932459b63c42c16f18da0e6b72b86">operator--</link> (int) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a0b75235bdbf8643db99997e9ecbb41fe">operator+</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1ac0fdb16b6029708a28c6db50eb5cf71d">operator-</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a13f9599ed8b248ba17c973f9044123da">operator*</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1af8bbcb61605057ec7caee066cec098d3">operator/</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a81c124dfd1f9bec0d42a33229279d4c6">operator%</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a00c1f1363179d60534b4c673ca1e1ca1">operator+</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a4acce2a25030ead690d375a1953d8882">operator-</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a1914890e81afe75f7d090ff87ce82f22">operator*</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1ac0d386b51a9b2d64547d64b98f903ef2">operator/</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1aef688b2a7dffda3d612f59446753074a">operator%</link> (Int_type arg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1abfd426bf39f6c5e0421a0fa532e1d886">operator!</link> () const noexcept</para>

<para>EN BASE B, B-1-m_d ES EL COMPL_Bm1(m_d) </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a4d310043a6574e445b13cea0f7096690">operator-</link> () const noexcept</para>

<para>EN BASE B, B-m_d ES EL COMPL_B(m_d) </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a3d6a5c0e1d8a4719d58a476cfb68c960">C_Bm1</link> () const noexcept</para>

<para>&quot;C_Bm1&quot; es identico a &quot;operator!()&quot; </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a946d999d39a25dda024a06800ac57f70">C_B</link> () const noexcept</para>

<para>&quot;C_B&quot; es identico a &quot;operator-()&quot; </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1aeaabd19b772acd490a224d21840165cf">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t_1a08ec2a242e2d81958e5b23970c16aab1">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c">is_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a3097efc035d69810593924081fe87698">is_0or1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a3f3fbeaf6b33d1715bbd18a32c9d786b">is_not_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a8186108a31cd8a25848f0269a7d19a7c">is_not_0</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1aacae804f80074c18f9ab9a84bd53b39b">is_not_0or1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a19ae3d827774be2550c60549edc3ae3d">is_max</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a2d4a4f29c85ef23b35177e09805a1267">is_not_max</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b">is_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd">is_not_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a0d1b5c435478eeb51b1d36c08219c977">is_submax</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ae28b04497aa71b7888dc079539210d3c">is_maxorsubmax</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a6c4fba7ed06b49210ef5ff28df23a668">is_Bm1orBm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ae5720040b223b5af4cebe8e0978b23fa">is_not_maxorsubmax</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a6ef1aa06ecb5f66b634124209f18cb2e">is_not_Bm1orBm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a266fc7e7e6b7c792fa3781163a83742b">is_not_submax</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a8f6e6f45df7dc5326ff1006bf5bebd10">is_Bm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1a7b1616ba435215cc41468ae13696a369">is_not_Bm2</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1af27980a6204664a1333284ba9c60d316">is_not_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ad54d97fbbe203e3aecaf937df2600ba2">is_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1ad5a111737f792b6ae0bf54153e4a8b17">is_far_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1dig__t_1af91d529a5c32bcc62d02b4700713b512">is_near_maxormin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr std::string <link linkend="_struct_num_repr_1_1dig__t_1a485ebeb8d32500ce824d6e88e02f4eba">to_string</link> () const noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>template&lt;UINT_T n, UINT_T m&gt; <?linebreak?>requires ((n&lt;B)&amp;&amp;(m&lt;B))</para><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link> <link linkend="_struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5">mult</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval bool <link linkend="_struct_num_repr_1_1dig__t_1a2e4a2d001d8b4a6e97639da50e33d3cb">is_prime</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a4295924ee3603c94ef1f1c7d83976be8">dig_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a2f8231e5cfedba8aaef0a404ca8df5d5">dig_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a85fa7ae1435069ddd1b87658c97a5856">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a326196de3bd9537e5c23df66440b8a56">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a73c90f6b9bab2442e884cc30b0af258f">ui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a7cdf0d9df3dedb75f66d4d7eda2e2da5">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1aaac3a2d93ea02d4860644ede5dc38506">ui_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a815d56d548d1572c87630f311d8b49e9">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a9684eea2c5657f412de910eea97817c7">sui_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a9df237777f14cf1ebc8d550a885260ff">sui_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1aeb3cb9d0b23b1c211dff853083a6fe83">sui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a43a4e505e240a8f1ad75f5ad5f8d1353">sui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1ae5704d076a53f9416a1b943df75b9179">ssi_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1ae42291bd38bbbaffa802f75d6a1baeab">ssi_max</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a73855570e049a9b032a7a49587fb6d90">ssi_submax</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1a287219a289b34f6f682e318b3ca1f92c">ssi_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t_1af8eebfebac403516d028ecce97b98d63">ssi_1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_t&gt; </para><para>static constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t_1a879e2a4684c282b6449f23a262c91ce3">normaliza</link> (Int_t arg) noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t_1a081c0bf1162ff858903c226cb48b08e8">sum_carry</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg_1, <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> arg_2) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt;<?linebreak?>requires (suitable_base&lt;UINT_T,B&gt;())<?linebreak?>struct NumRepr::dig_t&lt; UINT_T, B &gt;</title></simplesect>

<para>&lt; WRAPPER PARA UN TIPO UINT_T QUE UNSIGNED_INTEGRAL_T&lt;UINT_T&gt; SE SOBRECARGAN LOS OPERADORES ARITMETICOS PARA ARITMETICA MODULAR DIG_T = SUMA Y MULTIPLICACION CIRCULAR (MODULAR CON MOD B) </para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a1051e56dae889dea37c0fc56c629ef47"/><section>
    <title>digspair</title>
<indexterm><primary>digspair</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>digspair</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::digspair =  std::array&lt;<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>,2&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad0179be562c80f204f00fa63ee87f595"/><section>
    <title>resbinop_t</title>
<indexterm><primary>resbinop_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>resbinop_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::resbinop_t =  <link linkend="_struct_num_repr_1_1auxiliary__types_1_1resbinop__t">auxiliary_types::resbinop_t</link>&lt;<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>,op&gt;</computeroutput></para>
<para>BEGIN : CONSTRUCCION DE LAS TABLAS DE MULTIPLICAR ESTATICAS PARA TODA LA CLASE </para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38"/><section>
    <title>SIG_SINT_T</title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">::SIG_SINT_T</link> =  sig_SInt_for_UInt_t&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a"/><section>
    <title>SIG_UINT_T</title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">::SIG_UINT_T</link> =  sig_UInt_for_UInt_t&lt;UINT_T&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb"/><section>
    <title>uintspair</title>
<indexterm><primary>uintspair</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>uintspair</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::uintspair =  std::array&lt;UINT_T,2&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9"/><section>
    <title>uintspairlist</title>
<indexterm><primary>uintspairlist</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>uintspairlist</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::uintspairlist =  std::array&lt;<link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link>,B&gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a66b00dc8a233028c0b8af1d6c8c968df"/><section>
    <title>uintspairtbl</title>
<indexterm><primary>uintspairtbl</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>uintspairtbl</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::uintspairtbl =  std::array&lt;<link linkend="_struct_num_repr_1_1dig__t_1a018d699b224ca5c7f35dfc5ed5882df9">uintspairlist</link>,B&gt;</computeroutput></para></section>
</section>
<section>
<title>Documentación del constructor y destructor</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68"/><section>
    <title>dig_t()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt; CONSTRUCTORES CONSTRUCTOR POR DEFECTO NORMALIZA ES UNA FUNCION QUE BASICAMENTE SI ENTRA 1524 DEVUELVE 1524B TENIENDO EN CUENTA TIPOS Y SIGNOS </para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6a88c25f113c10a3e960dff6bc83209d"/><section>
    <title>dig_t()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>CONSTRUCTOR A PARTIR DE UN ENTERO ARG ARG EQUIV ARG+Z*B DONDE Z ES UN ENTERO EN m_d SOLO QUEREMOS QUE HAYA UN NUMERO ENTRE 0 Y B-1 INCLUSIVES </para>
<programlisting linenumbering="unnumbered">00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d(normaliza&lt;Int_t&gt;(arg))
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af0449bb155f32b9f4d0a77616be964f5"/><section>
    <title>dig_t()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA POR REFERENCIA. </para>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a0271247936d99587c10e4e7f793eca59"/><section>
    <title>dig_t()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">::dig_t</link> (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp;&amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR POR MOVIMIENTO. </para>
</para>
</section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a946d999d39a25dda024a06800ac57f70"/><section>
    <title>C_B()</title>
<indexterm><primary>C_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&quot;C_B&quot; es identico a &quot;operator-()&quot; </para>
</para>
<programlisting linenumbering="unnumbered">00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>((m_d==0)?0:(B-m_d));
00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l01133">NumRepr::display_operator_C_B()</link>, <link linkend="_l01223">NumRepr::display_prop_C_B_eq_inv_C_B()</link> y <link linkend="_l01291">NumRepr::display_prop_C_B_minus_1_eq_C_Bm1()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a946d999d39a25dda024a06800ac57f70_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3d6a5c0e1d8a4719d58a476cfb68c960"/><section>
    <title>C_Bm1()</title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&quot;C_Bm1&quot; es identico a &quot;operator!()&quot; </para>
</para>
<programlisting linenumbering="unnumbered">00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>()-m_d);
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Referenciado por <link linkend="_l01178">NumRepr::display_operator_C_Bm1()</link>, <link linkend="_l01291">NumRepr::display_prop_C_B_minus_1_eq_C_Bm1()</link> y <link linkend="_l01257">NumRepr::display_prop_C_Bm1_eq_inv_C_Bm1()</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a3d6a5c0e1d8a4719d58a476cfb68c960_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3"/><section>
    <title>dig_0()</title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00147 {<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>();}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c"/><section>
    <title>dig_1()</title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00148 {<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(1u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a85fa7ae1435069ddd1b87658c97a5856"/><section>
    <title>dig_Bm1()</title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00145 {<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(B-1u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a326196de3bd9537e5c23df66440b8a56"/><section>
    <title>dig_Bm2()</title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00146 {<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(B-2u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4295924ee3603c94ef1f1c7d83976be8"/><section>
    <title>dig_max()</title>
<indexterm><primary>dig_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00143 {<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(B-1u);};
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2f8231e5cfedba8aaef0a404ca8df5d5"/><section>
    <title>dig_submax()</title>
<indexterm><primary>dig_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>dig_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::dig_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00144 {<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(B-2u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a41f650033f842a57e20462acf2d56bd3"/><section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const UINT_T &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d);&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d"/><section>
    <title>is_0()</title>
<indexterm><primary>is_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>dig_t&lt;uchint,7&gt; a,b,c; a = 5; b = 2; c = 0; !a == 1 is TRUE a.C_Bm1() == 1 is TRUE !b == 4 is TRUE b.C_Bm1() == 4 is TRUE !c == 6 is TRUE c.C_Bm1() == 6 is TRUE -a == 2 is TRUE a.C_B() == 2 is TRUE -b == 5 is TRUE b.C_B() == 5 is TRUE -c == 0 is TRUE c.C_B() == 0 is TRUE a.mC_Bm1() == 1 is TRUE a == 1 is TRUE b.mC_Bm1() == 4 is TRUE b == 4 is TRUE c.mC_Bm1() == 6 is TRUE c == 6 is TRUE a.mC_B() == 2 is TRUE a == 2 is TRUE b.mC_B() == 5 is TRUE b == 5 is TRUE c.mC_B() == 0 is TRUE c == 0 is TRUE </para>
<programlisting linenumbering="unnumbered">00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>());
00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a48f6d7f54f227eaf337438fccd8b9ff4"/><section>
    <title>is_0_divisor()</title>
<indexterm><primary>is_0_divisor</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_0_divisor</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_0_divisor ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;FROM&#32;FINITE&#32;RINGS</emphasis>
00349 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a2e4a2d001d8b4a6e97639da50e33d3cb">is_prime</link>())&#32;{
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link>())&#32;{
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link>())
00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::gcd(B,m_d)!=<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>())
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link> y <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a48f6d7f54f227eaf337438fccd8b9ff4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3097efc035d69810593924081fe87698"/><section>
    <title>is_0or1()</title>
<indexterm><primary>is_0or1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_0or1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_0or1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>())||(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>()));
01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a3097efc035d69810593924081fe87698_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c"/><section>
    <title>is_1()</title>
<indexterm><primary>is_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>());
01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_ac906122dd220e44ed6762896888b8e4c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b"/><section>
    <title>is_Bm1()</title>
<indexterm><primary>is_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7cdf0d9df3dedb75f66d4d7eda2e2da5">ui_Bm1</link>);
01046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6c4fba7ed06b49210ef5ff28df23a668"/><section>
    <title>is_Bm1orBm2()</title>
<indexterm><primary>is_Bm1orBm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_Bm1orBm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_Bm1orBm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b">is_Bm1</link>()&#32;||&#32;<link linkend="_struct_num_repr_1_1dig__t_1a8f6e6f45df7dc5326ff1006bf5bebd10">is_Bm2</link>());
01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03703">is_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a6c4fba7ed06b49210ef5ff28df23a668_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8f6e6f45df7dc5326ff1006bf5bebd10"/><section>
    <title>is_Bm2()</title>
<indexterm><primary>is_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_Bm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1aaac3a2d93ea02d4860644ede5dc38506">ui_Bm2</link>);
01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad5a111737f792b6ae0bf54153e4a8b17"/><section>
    <title>is_far_maxormin()</title>
<indexterm><primary>is_far_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_far_maxormin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_far_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;==&#32;2u)&#32;{
01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a8186108a31cd8a25848f0269a7d19a7c">is_not_0</link>()&#32;&amp;&amp;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd">is_not_Bm1</link>()&#32;&amp;&amp;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a3f3fbeaf6b33d1715bbd18a32c9d786b">is_not_1</link>()&#32;&amp;&amp;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7b1616ba435215cc41468ae13696a369">is_not_Bm2</link>());
01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a19ae3d827774be2550c60549edc3ae3d"/><section>
    <title>is_max()</title>
<indexterm><primary>is_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_max ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>);
01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ad54d97fbbe203e3aecaf937df2600ba2"/><section>
    <title>is_maxormin()</title>
<indexterm><primary>is_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_maxormin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link>()&#32;||&#32;<link linkend="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b">is_Bm1</link>());
01112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link> y <link linkend="_l03703">is_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_ad54d97fbbe203e3aecaf937df2600ba2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae28b04497aa71b7888dc079539210d3c"/><section>
    <title>is_maxorsubmax()</title>
<indexterm><primary>is_maxorsubmax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_maxorsubmax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_maxorsubmax ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a19ae3d827774be2550c60549edc3ae3d">is_max</link>()&#32;||&#32;<link linkend="_struct_num_repr_1_1dig__t_1a0d1b5c435478eeb51b1d36c08219c977">is_submax</link>());
01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af91d529a5c32bcc62d02b4700713b512"/><section>
    <title>is_near_maxormin()</title>
<indexterm><primary>is_near_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_near_maxormin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_near_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;==&#32;2u)&#32;{
01129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link>()&#32;||&#32;<link linkend="_struct_num_repr_1_1dig__t_1a56fcdfa556284892cd7de47c3787d32b">is_Bm1</link>()&#32;||&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c">is_1</link>()&#32;||&#32;<link linkend="_struct_num_repr_1_1dig__t_1a8f6e6f45df7dc5326ff1006bf5bebd10">is_Bm2</link>());
01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>, <link linkend="_l03698">is_1()</link> y <link linkend="_l03703">is_Bm1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_af91d529a5c32bcc62d02b4700713b512_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8186108a31cd8a25848f0269a7d19a7c"/><section>
    <title>is_not_0()</title>
<indexterm><primary>is_not_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>());
01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aacae804f80074c18f9ab9a84bd53b39b"/><section>
    <title>is_not_0or1()</title>
<indexterm><primary>is_not_0or1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_0or1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_0or1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(&#32;!&#32;<link linkend="_struct_num_repr_1_1dig__t_1a3097efc035d69810593924081fe87698">is_0or1</link>()&#32;);
01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3f3fbeaf6b33d1715bbd18a32c9d786b"/><section>
    <title>is_not_1()</title>
<indexterm><primary>is_not_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>());
01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a3f3fbeaf6b33d1715bbd18a32c9d786b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd"/><section>
    <title>is_not_Bm1()</title>
<indexterm><primary>is_not_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7cdf0d9df3dedb75f66d4d7eda2e2da5">ui_Bm1</link>);
01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6ef1aa06ecb5f66b634124209f18cb2e"/><section>
    <title>is_not_Bm1orBm2()</title>
<indexterm><primary>is_not_Bm1orBm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_Bm1orBm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_Bm1orBm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd">is_not_Bm1</link>()&#32;&amp;&amp;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7b1616ba435215cc41468ae13696a369">is_not_Bm2</link>());
01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7b1616ba435215cc41468ae13696a369"/><section>
    <title>is_not_Bm2()</title>
<indexterm><primary>is_not_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_Bm2 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1aaac3a2d93ea02d4860644ede5dc38506">ui_Bm2</link>);
01100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2d4a4f29c85ef23b35177e09805a1267"/><section>
    <title>is_not_max()</title>
<indexterm><primary>is_not_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_max ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>);
01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af27980a6204664a1333284ba9c60d316"/><section>
    <title>is_not_maxormin()</title>
<indexterm><primary>is_not_maxormin</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_maxormin</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_maxormin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a8186108a31cd8a25848f0269a7d19a7c">is_not_0</link>()&#32;&amp;&amp;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a87c025873db95eaf29108ce9c9245dfd">is_not_Bm1</link>());
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae5720040b223b5af4cebe8e0978b23fa"/><section>
    <title>is_not_maxorsubmax()</title>
<indexterm><primary>is_not_maxorsubmax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_maxorsubmax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_maxorsubmax ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a2d4a4f29c85ef23b35177e09805a1267">is_not_max</link>()&#32;&amp;&amp;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a266fc7e7e6b7c792fa3781163a83742b">is_not_submax</link>());
01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a266fc7e7e6b7c792fa3781163a83742b"/><section>
    <title>is_not_submax()</title>
<indexterm><primary>is_not_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_not_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_not_submax ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a73c90f6b9bab2442e884cc30b0af258f">ui_submax</link>);
01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2e4a2d001d8b4a6e97639da50e33d3cb"/><section>
    <title>is_prime()</title>
<indexterm><primary>is_prime</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_prime</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_prime ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>dig_t&lt;uchint,10&gt; digito{4}; digito() devuelve un 4 de tipo uchint </para>
<programlisting linenumbering="unnumbered">00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_num_repr_1_1auxiliary__functions_1a6a368b190a18264af00c59b164dc1096">auxiliary_functions::is_prime</link>(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(B));
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l00105">NumRepr::auxiliary_functions::is_prime()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a2e4a2d001d8b4a6e97639da50e33d3cb_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a0d1b5c435478eeb51b1d36c08219c977"/><section>
    <title>is_submax()</title>
<indexterm><primary>is_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_submax ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d&#32;==&#32;<link linkend="_struct_num_repr_1_1dig__t_1a73c90f6b9bab2442e884cc30b0af258f">ui_submax</link>);
01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aecc930e8cb3dbc3ede5beeff11ef77ee"/><section>
    <title>is_unit()</title>
<indexterm><primary>is_unit</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>is_unit</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::is_unit ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>a y b son digitos; a = std::move(b); a es identico a b; en b puede no queda nada; </para>
<programlisting linenumbering="unnumbered">00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;FROM&#32;FINITE&#32;RINGS</emphasis>
00325 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a2e4a2d001d8b4a6e97639da50e33d3cb">is_prime</link>())&#32;{
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_num_repr_1_1dig__t_1adbf9db5f202d5b71069c34b1ea57cf4d">is_0</link>())&#32;{
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c">is_1</link>())
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::gcd(B,&#32;m_d)&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>())
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l03693">is_0()</link>, <link linkend="_l03698">is_1()</link> y <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aecc930e8cb3dbc3ede5beeff11ef77ee_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a08ec2a242e2d81958e5b23970c16aab1"/><section>
    <title>mC_B()</title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d==0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d=(B-m_d));
00968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aeaabd19b772acd490a224d21840165cf"/><section>
    <title>mC_Bm1()</title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d=(<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>()-m_d);
00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5"/><section>
    <title>mult()</title>
<indexterm><primary>mult</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mult</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;UINT_T n, UINT_T m&gt; <?linebreak?>requires ((n&lt;B)&amp;&amp;(m&lt;B))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mult ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;&gt;&#32;type_traits::sqrt_max&lt;UINT_T&gt;())&#32;{
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;sup_n{n};
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;sup_m{m};
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;result{sup_n&#32;*&#32;sup_m};
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;ret_1{result/B};&#32;<emphasis role="comment">//&#32;&quot;DECENAS&quot;</emphasis>
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;ret_0{result%B};&#32;<emphasis role="comment">//&#32;&quot;UNIDADES&quot;</emphasis>
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link>&#32;ret{ret_1,ret_0};
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;result{n&#32;*&#32;m};
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;ret_1{result/B};&#32;<emphasis role="comment">//&#32;&quot;DECENAS&quot;</emphasis>
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;ret_0{result%B};&#32;<emphasis role="comment">//&#32;&quot;UNIDADES&quot;</emphasis>
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ae38e5e04d4c6c8993e3abc8d0e777efb">uintspair</link>&#32;ret{ret_1,ret_0};
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aa62606aacfd127f2670db23a727e1689"/><section>
    <title>mult_inv()</title>
<indexterm><primary>mult_inv</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>mult_inv</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::mult_inv ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;FROM&#32;FINITE&#32;RINGS</emphasis>
00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1aecc930e8cb3dbc3ede5beeff11ef77ee">is_unit</link>())&#32;{
00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1ac906122dd220e44ed6762896888b8e4c">is_1</link>())&#32;{
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a19ae3d827774be2550c60549edc3ae3d">is_max</link>())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a4295924ee3603c94ef1f1c7d83976be8">dig_max</link>();
00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;index(2);&#32;!<link linkend="_struct_num_repr_1_1dig__t_1a19ae3d827774be2550c60549edc3ae3d">is_max</link>();&#32;++index)&#32;{
00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index.is_unit())&#32;{
00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((cthis&#32;*&#32;index).is_1())&#32;{
00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index;
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01183">NumRepr::dig_max()</link> y <link linkend="_l03698">is_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aa62606aacfd127f2670db23a727e1689_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a879e2a4684c282b6449f23a262c91ce3"/><section>
    <title>normaliza()</title>
<indexterm><primary>normaliza</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>normaliza</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>static constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::normaliza (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;Int_t,UINT_T&gt;)&#32;{
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(arg%B);
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_signed_v&lt;Int_t&gt;)&#32;{
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_traits::maxbase&lt;Int_t&gt;()
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_traits::maxbase&lt;SIG_SINT_T&gt;()
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;Int_t&#32;sint_0{0};&#32;<emphasis role="comment">//&#32;ssi_0()</emphasis>
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;Int_t&#32;sint_B{B};&#32;<emphasis role="comment">//&#32;ssi_B()</emphasis>
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Int_t&#32;cparg{arg};
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&lt;sint_0)&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Int_t&#32;coc{(-arg)/sint_B};
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coc&#32;*=&#32;sint_B;
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;+=&#32;coc;
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&lt;0)
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;+=&#32;sint_B;
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&gt;=sint_B)
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;-=&#32;sint_B;
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;%=&#32;sint_B;
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(cparg);
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;sint_0{0};
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;sint_B{B};
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;cparg{arg};
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&lt;sint_0)&#32;{
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;coc{(-arg)/sint_B};
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coc&#32;*=&#32;sint_B;
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;+=&#32;coc;
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&lt;0)
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;+=&#32;sint_B;
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&gt;=sint_B)
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;-=&#32;sint_B;
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;%=&#32;sint_B;
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(cparg);
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(maxbase&lt;Int_t&gt;()&#32;&lt;&#32;maxbase&lt;UINT_T&gt;()&#32;)&#32;{
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;uint_B{B};
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;cparg{arg};
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;&gt;=&#32;uint_B)&#32;{
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;%=&#32;uint_B;
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(cparg);
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;Int_t&#32;uint_B{B};
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Int_t&#32;cparg{arg};
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;&gt;=&#32;uint_B)&#32;{
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cparg&#32;%=&#32;uint_B;
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(cparg);
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a11aa8890a01df04bb8c78e36b1671bcb"/><section>
    <title>operator SIG_SINT_T()</title>
<indexterm><primary>operator SIG_SINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link> <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(m_d);&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a98f3c67f12b327b29cb7dd956979aa6b"/><section>
    <title>operator SIG_UINT_T()</title>
<indexterm><primary>operator SIG_UINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link> <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(m_d);&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aafdbf9ec2e1c2c693053bddc9c3da18b"/><section>
    <title>operator UINT_T()</title>
<indexterm><primary>operator UINT_T</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator UINT_T</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link> UINT_T ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>PARA B=3 2*2 1 COMIENZAN POR 2 B-2 PARA B=4 2*2 2*3 3*4 3 COMIENZAN POR 2 B-2, 3 B-3 PARA B=5 2*2 2*3 2*4 3*3 3*4 4*4 6 COMIENZAN POR 2 B-2, 3 B-3, 4 B-4 PARA B=6 2*2 2*3 2*4 2*5 3*3 3*4 3*5 4*4 4*5 5*5 10 COMIENZAN POR 2 B-2, 3 B-3, 4 B-4, 5 B-5 PARA B=r 2*2 2*(2+1) ... 2*(r-1) r-1 r COMIENZAN POR 2 B-2, 3 B-3, 4 B-4, 5 B-1, ... , r-1 B-r+1 3*3 ... 3*(r-1) r-2 ... (r-1)*(r-1) r-(r-1) <informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 (r-2)r-(r-1)*r/2 + 1 = [2(r-2)-((r-2)+1)]r/2 + 1 = ((r-3)r + 2)/2 = (r^2 - 3r + 2) / 2 </para>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md0">
<title>a r^2 + b r + c</title>

<para>1 = a 9 + b 3 + c 3 = a 16 + b 4 + c </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md1">
<title>6 = a 25 + b 5 + c</title>

<para>1 = a 9 + b 3 + c 2 = a 7 + b 1 </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md2">
<title>5 = a 16 + b 2</title>

<para>1 = a 9 + b 3 + c 2 = a 7 + b </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md3">
<title>1 = a  2</title>

<para>c = 2/2 b = -3/2 </para>
</section>
<section xml:id="_struct_num_repr_1_1dig__t_1autotoc_md4">
<title>a =  1/2</title>

<para>SIZE = (B^2 - 3B + 2)/2 2+3+4+...+B-1 = 1+2+3+4+...+B-1 - 1 = (B-1)B/2 - 2(B-1)/2 = (B^2 - B - 2B +2)/2 = =(B^2-3B+2)/2</para>

<para>FALTARIA HACER SOLO PARA BASES MAYORES QUE 2 CODE NEW USING TYPES : using pair_map = std::pair&lt;uintspair,uintspair&gt;; CODE MULTTABLE: static consteval std::array&lt;pair_map,(B^2 - 3B + 2)/2&gt; multtable{make_multtables()}; CODE FOR MAKE_MULTTABLES(): static consteval std::array&lt;pair_map,(B^2 - 3B + 2)/2&gt; make_multtables() noexcept { std::array&lt;pair_map,(B^2 - 3B + 2)/2&gt; ret; /// ESTO QUE SIGUE HABRIA QUE HACERLO POR UNROOLING LOOP EN COMPILE TIME /// YA QUE IDX E IDY NO SON CONSTANTES EN TIEMPO DE COMPILACION /// LO MEJOR ES HACERLO EN UNA CLASE TEMPLATE POR RECURSION for(size_t idx{2} ; idx &lt; B ; ++idx) { for(size_t idy{idx} ; idy &lt; B ; ++idy) { make_pair(make_array(idx,idy),<link linkend="_struct_num_repr_1_1dig__t_1a61783752fb9fa2c63d85aeb2a386abd5">mult&lt;idx,idy&gt;()</link>); } } } </para>
</section>
<programlisting linenumbering="unnumbered">00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_d;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1abfd426bf39f6c5e0421a0fa532e1d886"/><section>
    <title>operator!()</title>
<indexterm><primary>operator!</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>EN BASE B, B-1-m_d ES EL COMPL_Bm1(m_d) </para>
</para>
<programlisting linenumbering="unnumbered">00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>(<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>()-m_d);
00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a47635d2d0ec4782ae299ee8d120e3382"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_struct_num_repr_1_1dig__t_1abfd426bf39f6c5e0421a0fa532e1d886">::operator!</link>= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((a()&#32;!=&#32;m_d)?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a81c124dfd1f9bec0d42a33229279d4c6"/><section>
    <title>operator%()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator%</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>% (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;%=&#32;arg;
00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aef688b2a7dffda3d612f59446753074a"/><section>
    <title>operator%()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator%</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>% (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;cparg(normaliza&lt;Int_type&gt;(arg));
00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>())
00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;%=&#32;cparg;
00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6c7356a5ae3558ef870ec13760e4cb8a"/><section>
    <title>operator%=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator%=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>%= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>())
00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;%=&#32;arg.m_d;
00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2c84aafb21be9d9cdbe35758bc44d98b"/><section>
    <title>operator%=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator%=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator%=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>%= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;cparg{normaliza&lt;Int_t&gt;(arg)};
00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>())
00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)%=cparg;
00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaad1f6b6c362bb8b79e308d8dbd3623e"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp; (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MENOR: ANDBITWISE NO TIENE POSIBILIDAD DE ERROR </para>
<programlisting linenumbering="unnumbered">00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(((*<emphasis role="keyword">this</emphasis>)&lt;=arg)?(*<emphasis role="keyword">this</emphasis>):arg);
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aadb521540be446f8f6affbe08593f521"/><section>
    <title>operator&amp;=()</title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&amp;= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MENOR HABIENDOLO ASIGNADO ANDBITWISE AND ASSIGN NO TIENE POSIBILIDAD DE ERROR </para>
<programlisting linenumbering="unnumbered">00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;&lt;&#32;(*<emphasis role="keyword">this</emphasis>))
00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;arg;
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aad3081cc834a2404026c745da3a19624"/><section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>() ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_d);&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a13f9599ed8b248ba17c973f9044123da"/><section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;*=&#32;arg;
00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a1914890e81afe75f7d090ff87ce82f22"/><section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>* (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;tmp(normaliza&lt;Int_type&gt;(arg));
00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;*=&#32;tmp;
00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4a8206b542cb7f4b6346f8958757b977"/><section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>*= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;&lt;&#32;type_traits::sqrt_max&lt;UINT_T&gt;())&#32;{
00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;*=&#32;arg.m_d;
00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;%=&#32;B;
00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;tmp{m_d};
00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;*=&#32;arg.m_d;
00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;%=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(B);
00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(tmp);
00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a168a6f67f18e796f8873a0e6c2333d54"/><section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator*=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>*= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Int_t&#32;tmp{normaliza&lt;Int_t&gt;(arg)};
00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_signed_v&lt;Int_t&gt;)
00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(Int_t)&gt;<emphasis role="keyword">sizeof</emphasis>(UINT_T))
00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SIG2_SINT_T&#32;=&#32;type_traits::sig_SInt_for_SInt_t&lt;Int_t&gt;;
00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SIG2_SINT_T&#32;norm_arg{tmp};
00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SIG2_SINT_T&#32;este{m_d};
00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;*=&#32;norm_arg;
00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;%=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>SIG2_SINT_T<emphasis role="keyword">&gt;</emphasis>(B);
00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(este);
00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;norm_arg{tmp};
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;este{m_d};
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;*=&#32;norm_arg;
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;%=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(B);
00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(este);
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(Int_t)&gt;<emphasis role="keyword">sizeof</emphasis>(UINT_T))
00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>SIG2_UINT_T&#32;=&#32;type_traits::sig_UInt_for_UInt_t&lt;Int_t&gt;;
00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SIG2_UINT_T&#32;norm_arg{tmp};
00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SIG2_UINT_T&#32;este{m_d};
00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;*=&#32;norm_arg;
00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;%=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>SIG2_UINT_T<emphasis role="keyword">&gt;</emphasis>(B);
00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(este);
00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;norm_arg{tmp};
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;este{m_d};
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;*=&#32;norm_arg;
00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;%=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(B);
00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(este);
00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a0b75235bdbf8643db99997e9ecbb41fe"/><section>
    <title>operator+()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;+=&#32;arg;
00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a00c1f1363179d60534b4c673ca1e1ca1"/><section>
    <title>operator+()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+ (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;+=&#32;normaliza&lt;Int_type&gt;(arg);
00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaa1f4b500974e6fd56e680e03f29b2c2"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>Tengo serias dudas que la division y el resto euclideo tengan cabida entre los operadores aritmeticos de un tipo <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> DUDA SATISFECHA: TIENEN CABIDA PORQUE EL INVERSO MULTIPLICATIVO ETC. SOLO NOS SIRVE SI ESTUVIERAMOS CONSTRUYENDO NUMEROS DE UN ANILLO FINITO </para>
<programlisting linenumbering="unnumbered">00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d&#32;&lt;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d+=<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>())&#32;&#32;&#32;:
00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d=<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>());
00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);
00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_aaa1f4b500974e6fd56e680e03f29b2c2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8870447b3f8ce7bd2a9119b6f7d4530c"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>++ (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++(*this);
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aba27e3396b7ed8788f2cfe819f4d4bb3"/><section>
    <title>operator+=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;&lt;&#32;type_traits::middle_max&lt;UINT_T&gt;())
00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;+=&#32;arg.m_d;
00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_d&#32;&gt;=&#32;B)
00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;-=&#32;B;
00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;tmp{m_d};
00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;+=&#32;(arg.m_d);
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tmp&gt;=B)
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp&#32;-=&#32;B;
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(tmp);
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae24ff79c3041e20d742037441037d2b3"/><section>
    <title>operator+=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>+= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;&gt;=&#32;type_traits::middle_max&lt;UINT_T&gt;())
00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;arg1{normaliza&lt;Int_t&gt;(arg)};
00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;arg2{m_d};
00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg2+=arg1;
00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg2&#32;&gt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Int_t<emphasis role="keyword">&gt;</emphasis>(B))
00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg2-=<emphasis role="keyword">static_cast&lt;</emphasis>Int_t<emphasis role="keyword">&gt;</emphasis>(B);
00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(arg2);
00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;UINT_T&#32;arg1{normaliza&lt;Int_t&gt;(arg)};
00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;arg2{m_d};
00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg2+=arg1;
00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg2&#32;&gt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Int_t<emphasis role="keyword">&gt;</emphasis>(B))
00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg2-=<emphasis role="keyword">static_cast&lt;</emphasis>Int_t<emphasis role="keyword">&gt;</emphasis>(B);
00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UINT_T<emphasis role="keyword">&gt;</emphasis>(arg2);
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4d310043a6574e445b13cea0f7096690"/><section>
    <title>operator-()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>EN BASE B, B-m_d ES EL COMPL_B(m_d) </para>
</para>
<programlisting linenumbering="unnumbered">00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1aada07ff4de9c24f4824b65107df7ad68">dig_t</link>((m_d==0)?0:(B-m_d));
00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac0fdb16b6029708a28c6db50eb5cf71d"/><section>
    <title>operator-()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;-=&#32;arg;
00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a4acce2a25030ead690d375a1953d8882"/><section>
    <title>operator-()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>- (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;tmp(normaliza&lt;Int_type&gt;(arg));
00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;-=&#32;tmp;
00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a760f7426a2aa1c3633499eb30faa47bc"/><section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;(m_d&#32;&gt;&#32;<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(m_d-<link linkend="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5">ui_1</link>())&#32;&#32;&#32;&#32;:
00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336">ui_max</link>())&#32;&#32;&#32;&#32;&#32;&#32;;
00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(*<emphasis role="keyword">this</emphasis>);
00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
Hace referencia a <link linkend="_l01179">NumRepr::ui_1()</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1dig__t_a760f7426a2aa1c3633499eb30faa47bc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8c9932459b63c42c16f18da0e6b72b86"/><section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-- (int )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--(*this);
00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaea951b73ed6db7bbddace9d937e65e1"/><section>
    <title>operator-=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;cp_dm{m_d};
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_dm-=arg.m_d;
00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp_dm&#32;&lt;&#32;0)
00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_dm&#32;+=&#32;<link linkend="_struct_num_repr_1_1dig__t_1ae5704d076a53f9416a1b943df75b9179">ssi_B</link>();
00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;cp_dm;
00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a8ccb0b59a15564ffb2b293664267d5ec"/><section>
    <title>operator-=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>-= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;tmp{normaliza&lt;Int_t&gt;(arg)};
00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link>&#32;este{m_d};
00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este-=tmp;
00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(este&lt;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(0))
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;este&#32;+=&#32;<link linkend="_struct_num_repr_1_1dig__t_1ae5704d076a53f9416a1b943df75b9179">ssi_B</link>();
00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;este;
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af8bbcb61605057ec7caee066cec098d3"/><section>
    <title>operator/()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>/ (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;/=&#32;arg;
00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ac0d386b51a9b2d64547d64b98f903ef2"/><section>
    <title>operator/()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>/ (Int_type arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;ret(*<emphasis role="keyword">this</emphasis>);
00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;cparg(normaliza&lt;Int_type&gt;(arg));
00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cparg&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>())
00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;/=&#32;cparg;
00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae6090e4504d28bdd974c7366150a5eaa"/><section>
    <title>operator/=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>/= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.m_d&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4">ui_0</link>())
00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;/=&#32;arg.m_d;
00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2ae86f82c15b23402ab0893d841e9f9f"/><section>
    <title>operator/=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator/=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>/= (Int_t arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT_T&#32;cparg{normaliza&lt;Int_t&gt;(arg)};
00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;tmp{cparg};
00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tmp&#32;!=&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>())
00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)/=tmp;
00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a541d4e253f487b533befc4b36db15b37"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt; (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((a()&#32;&gt;&#32;&#32;m_d&#32;)?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1acdc26317d35ccf448bf50bc5aa8a88e2"/><section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((a()&#32;&gt;=&#32;m_d&#32;)?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a6c213b8f2f95f130cd8557f4d910e645"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; rhs) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>SI COMPARAMOS O HACEMOS UNA OPERACION CON UN INT_T SIEMPRE SERA DIG_T @ INT_T -&gt; DIG_T Y NUNCA INT_T @ DIG_T -&gt; ANY_TYPE METODO PROPIO DE C++20 </para>
<programlisting linenumbering="unnumbered">00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_d{m_d};
00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_d{rhs()};
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(
00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(lhs_d&lt;rhs_d)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strong_ordering::less&#32;&#32;&#32;&#32;&#32;&#32;:
00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((lhs_d&gt;rhs_d)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strong_ordering::greater&#32;&#32;&#32;:
00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strong_ordering::equal)
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ab70884cd01554850ffe4d26a86dc72e0"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&lt;=&gt; (Int_t rhs) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>METODO PROPIO DE C++20 ESTABLECEMOS UN ORDEN PARCIAL SOBRE LOS ENTEROS SI a b EN Z ESTANDO EN ESTE AMBITO DE BASE B SI a mod B = b mod B </para>
<programlisting linenumbering="unnumbered">00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;lhs{*<emphasis role="keyword">this</emphasis>};
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;UINT_T&#32;rhs_B{normaliza&lt;Int_t&gt;(rhs)};
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((lhs()&#32;&lt;&#32;rhs_B)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::weak_ordering::less&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(lhs()&#32;&gt;&#32;rhs_B)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::weak_ordering::greater&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::weak_ordering::equivalent
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2c7df43b2672d12d58b0170564b65067"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN DIG_T. </para>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae1e378970227631d984b568c6e87aea9"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (const Int_t &amp; a)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE REFERENCIA CTE DESDE UN INT_T. </para>
</para>

<para>PODEMOS PASAR ARGUMENTOS POR COPIA, REFERENCIA (PUNTEROS) Y MOVIMIENTO COPIA : COPIA EL ARGUMENTO LITERALMENTE PARA PASARLO: EL ORIGINAL INTACTO REFERENCIA: COPIA LA DIRECCION DEL ARGUMENTO (SI ES CONST EL COMPILADOR NO TE DEJA COMPILAR SI LO CAMBIAS) MOVIMIENTO: SI EL ARGUMETO NO SE VA A UTILIZAR MAS SE LE PASA LA PROPIEDAD A LA FUNCION </para>
<programlisting linenumbering="unnumbered">00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;a&#32;!=&#32;&amp;m_d)&#32;{
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_d&#32;=&#32;normaliza&lt;Int_t&gt;(a);
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1acd2c86722aea84ff8caa599f46143096"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp;&amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SOBRECARGA DEL OPERATOR=() MEDIANTE MOVIMIENTO DESDE UN DIG_T. </para>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a16d0da2599654bff077fbeca82c74935"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((a()&#32;==&#32;m_d)?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a98120e7f67bdd81793d79f21df596840"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_t&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>== (Int_t rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;lhs{*<emphasis role="keyword">this</emphasis>};
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(lhs.m_d&#32;==&#32;normaliza&lt;Int_t&gt;(rhs))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1afefef1d7905f1b427805fed3bac47b6f"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt; (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((a()&#32;&lt;&#32;m_d&#32;)?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a2e48d921d1562d835c6fe6804ab2ec29"/><section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>&gt;= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; a) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((a()&#32;&lt;=&#32;m_d)?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a38d52e65a990092a76e803e16e918fb7"/><section>
    <title>operator^()</title>
<indexterm><primary>operator^</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator^</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::unsigned_integral_c UIntType&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>^ (UIntType exp) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;cpthis{*<emphasis role="keyword">this</emphasis>};
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cpthis&#32;^=&#32;exp;
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cpthis;
00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1abcc6416630883d3061eb2cc4a2b19b6d"/><section>
    <title>operator^=()</title>
<indexterm><primary>operator^=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator^=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><computeroutput>template&lt;type_traits::unsigned_integral_c UIntType&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>^= (UIntType exp)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&amp;&#32;cthis{*<emphasis role="keyword">this</emphasis>};
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exp&#32;==&#32;0)&#32;{
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;=&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exp&#32;==&#32;1)&#32;{
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exp&#32;==&#32;2)&#32;{
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;*=&#32;cthis;
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a2f1cc69e474f8f2734aef69506857e18">dig_t</link>&#32;&#32;vthis{*<emphasis role="keyword">this</emphasis>};
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;*=&#32;vthis;
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(UIntType&#32;ix{2}&#32;;&#32;ix&#32;&lt;&#32;exp&#32;;&#32;++ix)&#32;{
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cthis&#32;*=&#32;vthis;
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cthis);
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a3794e0222d9b563c1692006bba0af83e"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>| (const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MAYOR ORBITWISE NO TIENE POSIBILIDAD DE ERROR </para>
<programlisting linenumbering="unnumbered">00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(((*<emphasis role="keyword">this</emphasis>)&gt;=arg)?(*<emphasis role="keyword">this</emphasis>):arg);
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ab917ba177adf7c56596f814db3bc3e26"/><section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;<link linkend="_namespace_num_repr_1aae8203ac76946e39f03d5b06f3fb6d4e">::operator</link>|= (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>DEVOLVER EL MAYOR HABIENDOLO ASIGNADO ORBITWISE AND ASSIGN NO TIENE POSIBILIDAD DE ERROR </para>
<programlisting linenumbering="unnumbered">00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;&gt;&#32;(*<emphasis role="keyword">this</emphasis>))
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*this)&#32;=&#32;arg;
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>);
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a287219a289b34f6f682e318b3ca1f92c"/><section>
    <title>ssi_0()</title>
<indexterm><primary>ssi_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(0u);
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1af8eebfebac403516d028ecce97b98d63"/><section>
    <title>ssi_1()</title>
<indexterm><primary>ssi_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(1u);
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae5704d076a53f9416a1b943df75b9179"/><section>
    <title>ssi_B()</title>
<indexterm><primary>ssi_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(B);
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1ae42291bd38bbbaffa802f75d6a1baeab"/><section>
    <title>ssi_max()</title>
<indexterm><primary>ssi_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1a6593e326ad416014be397174d2be8f38">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(B-1u);
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a73855570e049a9b032a7a49587fb6d90"/><section>
    <title>ssi_submax()</title>
<indexterm><primary>ssi_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ssi_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ssi_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a405e148dab036ec8e5fd14c547061b0f">SIG_SINT_T</link><emphasis role="keyword">&gt;</emphasis>(B-2u);
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aeb3cb9d0b23b1c211dff853083a6fe83"/><section>
    <title>sui_0()</title>
<indexterm><primary>sui_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(0u);
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a43a4e505e240a8f1ad75f5ad5f8d1353"/><section>
    <title>sui_1()</title>
<indexterm><primary>sui_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(1u);
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a815d56d548d1572c87630f311d8b49e9"/><section>
    <title>sui_B()</title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(B);
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a9684eea2c5657f412de910eea97817c7"/><section>
    <title>sui_max()</title>
<indexterm><primary>sui_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(B-1u);
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a9df237777f14cf1ebc8d550a885260ff"/><section>
    <title>sui_submax()</title>
<indexterm><primary>sui_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sui_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1dig__t_1adc093164c56eece2aa8adb2ca2d2968a">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link><emphasis role="keyword">&gt;</emphasis>(B-2u);
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a081c0bf1162ff858903c226cb48b08e8"/><section>
    <title>sum_carry()</title>
<indexterm><primary>sum_carry</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>sum_carry</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::sum_carry (<link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg_1, <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>&lt; UINT_T, B &gt; arg_2)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(B&#32;&lt;=&#32;type_traits::middle_max&lt;UINT_T&gt;())&#32;{
00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((B%2)&#32;==&#32;0)&#32;{
00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;Bdiv2{B/2};
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((arg_1()&#32;&lt;&#32;Bdiv2)&amp;&amp;(arg_2()&#32;&lt;&#32;Bdiv2))&#32;{
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((arg_1()&#32;&gt;=&#32;Bdiv2)&amp;&amp;(arg_2()&#32;&gt;=&#32;Bdiv2))&#32;{
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;arg_1()&#32;&gt;=&#32;B-arg_2()&#32;)&#32;{
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;Bdiv2_1{B/2};
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;UINT_T&#32;Bdiv2_2{(B/2)+1};
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;&#32;&#32;((arg_1()&#32;&lt;&#32;Bdiv2_1)&amp;&amp;(arg_2()&#32;&lt;&#32;Bdiv2_2))
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((arg_1()&#32;&lt;&#32;Bdiv2_2)&amp;&amp;(arg_2()&#32;&lt;&#32;Bdiv2_1))
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((arg_1()&#32;&gt;=&#32;Bdiv2_1)&amp;&amp;(arg_2()&#32;&gt;=&#32;Bdiv2_2))
00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||((arg_1()&#32;&gt;=&#32;Bdiv2_2)&amp;&amp;(arg_2()&#32;&gt;=&#32;Bdiv2_1))
00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;arg_1()&#32;&gt;=&#32;B-arg_2()&#32;)&#32;{
00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((B%2)&#32;==&#32;0)&#32;{
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;Bdiv2{B/2};
00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((arg_1()&#32;&lt;&#32;Bdiv2)&amp;&amp;(arg_2()&#32;&lt;&#32;Bdiv2))&#32;{
00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((arg_1()&#32;&gt;=&#32;Bdiv2)&amp;&amp;(arg_2()&#32;&gt;=&#32;Bdiv2))&#32;{
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;arg_1()&#32;&gt;=&#32;B-arg_2()&#32;)&#32;{
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;Bdiv2_1{B/2};
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp_1a169329f4fc827539fe28d786056373be">SIG_UINT_T</link>&#32;Bdiv2_2{(B/2)+1};
00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;&#32;&#32;((arg_1()&#32;&lt;&#32;Bdiv2_1)&amp;&amp;(arg_2()&#32;&lt;&#32;Bdiv2_2))
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((arg_1()&#32;&lt;&#32;Bdiv2_2)&amp;&amp;(arg_2()&#32;&lt;&#32;Bdiv2_1))
00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((arg_1()&#32;&gt;=&#32;Bdiv2_1)&amp;&amp;(arg_2()&#32;&gt;=&#32;Bdiv2_2))
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||((arg_1()&#32;&gt;=&#32;Bdiv2_2)&amp;&amp;(arg_2()&#32;&gt;=&#32;Bdiv2_1))
00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;arg_1()&#32;&gt;=&#32;B-arg_2()&#32;)&#32;{
00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1a1dc126ef160231a2c2a87a30fdda731c">dig_1</link>();
00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_num_repr_1_1dig__t_1ac6a8ff5406dd59f782f096ea7f2d2da3">dig_0</link>();
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a485ebeb8d32500ce824d6e88e02f4eba"/><section>
    <title>to_string()</title>
<indexterm><primary>to_string</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>to_string</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>constexpr std::string <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::to_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;num{this-&gt;num_to_string()};
01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;ret{<emphasis role="stringliteral">&quot;dig#&quot;</emphasis>+num+<emphasis role="stringliteral">&quot;#&quot;</emphasis>+radix_str()};
01172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a76b5c675bb32de9c1803da4dd804d8e4"/><section>
    <title>ui_0()</title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00154 {<emphasis role="keywordflow">return</emphasis>&#32;UINT_T(0u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7abd8bcb3f0bd6b749488dfad8e56da5"/><section>
    <title>ui_1()</title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00155 {<emphasis role="keywordflow">return</emphasis>&#32;UINT_T(1u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a7cdf0d9df3dedb75f66d4d7eda2e2da5"/><section>
    <title>ui_Bm1()</title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00152 {<emphasis role="keywordflow">return</emphasis>&#32;UINT_T(B-1u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1aaac3a2d93ea02d4860644ede5dc38506"/><section>
    <title>ui_Bm2()</title>
<indexterm><primary>ui_Bm2</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_Bm2</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00153 {<emphasis role="keywordflow">return</emphasis>&#32;UINT_T(B-2u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a91e737faa7255b8706deb3220ceaa336"/><section>
    <title>ui_max()</title>
<indexterm><primary>ui_max</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_max</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_max ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00150 {<emphasis role="keywordflow">return</emphasis>&#32;UINT_T(B-1u);}
</programlisting></section>
<anchor xml:id="_struct_num_repr_1_1dig__t_1a73c90f6b9bab2442e884cc30b0af258f"/><section>
    <title>ui_submax()</title>
<indexterm><primary>ui_submax</primary><secondary>NumRepr::dig_t&lt; UINT_T, B &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::dig_t&lt; UINT_T, B &gt;</primary><secondary>ui_submax</secondary></indexterm>
<computeroutput>template&lt;allowable_base_type_c UINT_T, UINT_T B&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1dig__t">NumRepr::dig_t</link>&lt; UINT_T, B &gt;::ui_submax ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">00151 {<emphasis role="keywordflow">return</emphasis>&#32;UINT_T(B-2u);}
</programlisting></section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_dig__t_8hpp">dig_t.hpp</link></section>
</section>
