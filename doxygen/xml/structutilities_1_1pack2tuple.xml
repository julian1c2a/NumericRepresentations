<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="es">
  <compounddef id="structutilities_1_1pack2tuple" kind="struct" language="C++" prot="public">
    <compoundname>utilities::pack2tuple</compoundname>
    <includes refid="utilities_8hpp" local="no">utilities.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" prot="public" static="no">
        <type>std::tuple&lt; Ts... &gt;</type>
        <definition>using utilities::pack2tuple&lt; Ts &gt;::tuple_type =  std::tuple&lt;Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_type</name>
        <qualifiedname>utilities::pack2tuple::tuple_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="41" column="1" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>K</declname>
            <defname>K</defname>
          </param>
        </templateparamlist>
        <type>typename std::tuple_element&lt; K, <ref refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" kindref="member">tuple_type</ref> &gt;::type</type>
        <definition>using utilities::pack2tuple&lt; Ts &gt;::elem_type =  typename std::tuple_element&lt;K,tuple_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>elem_type</name>
        <qualifiedname>utilities::pack2tuple::elem_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="48" column="1" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structutilities_1_1pack2tuple_1a76afbd16c998332eb4de2986d8ec9cf5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>static constexpr unsigned utilities::pack2tuple&lt; Ts &gt;::pack_size</definition>
        <argsstring>() noexcept</argsstring>
        <name>pack_size</name>
        <qualifiedname>utilities::pack2tuple::pack_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="42" column="27" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structutilities_1_1pack2tuple_1a21099506ee203993b708bd6f4894c82b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>J</declname>
            <defname>J</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" kindref="member">elem_type</ref>&lt; J &gt;::type</type>
        <definition>static constexpr elem_type&lt; J &gt;::type utilities::pack2tuple&lt; Ts &gt;::get</definition>
        <argsstring>(Ts &amp;&amp;...args) noexcept</argsstring>
        <name>get</name>
        <qualifiedname>utilities::pack2tuple::get</qualifiedname>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="50" column="35" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="50" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structutilities_1_1pack2tuple_1a98950abc107a937f1f2aa37871955957" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" kindref="member">tuple_type</ref></type>
        <definition>constexpr tuple_type utilities::pack2tuple&lt; Ts &gt;::operator()</definition>
        <argsstring>(Ts &amp;&amp;...args) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>utilities::pack2tuple::operator()</qualifiedname>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="43" column="22" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="43" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>template&lt;class type_0, class type_1, ... , class type_Nm1&gt; struct apilamiento_de_tipos_t { type_0 obj_0; type_1 obj_1; ...... ..... type_Nm1 obj_Nm1; }; example: apilamiento_de_tipos&lt;int,std::string,double&gt; objeto{1,&quot;abc&quot;,2.98105}; objeto.obj_0 == 1; objeto.obj_1 == &quot;abc&quot;; objeto.obj_Nm1 == 2.98105; A partir del estandar de C++11 template&lt;class ...type_i&gt; struct apilamiento_de_tipos_t { type_0 obj_0; // sabemos type_i pero no type_0 type_1 obj_1; // sabemos type_i pero no type_1 ...... ..... type_Nm1 obj_Nm1;// sabemos type_i pero no type_Nm1 }; type_i es un PACK tipo std::tupla&lt;class ... Ts&gt;; </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>utilities::pack2tuple&lt; Ts &gt;</label>
        <link refid="structutilities_1_1pack2tuple"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="40" column="1" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="40" bodyend="55"/>
    <listofallmembers>
      <member refid="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" prot="public" virt="non-virtual"><scope>utilities::pack2tuple</scope><name>elem_type</name></member>
      <member refid="structutilities_1_1pack2tuple_1a21099506ee203993b708bd6f4894c82b" prot="public" virt="non-virtual"><scope>utilities::pack2tuple</scope><name>get</name></member>
      <member refid="structutilities_1_1pack2tuple_1a98950abc107a937f1f2aa37871955957" prot="public" virt="non-virtual"><scope>utilities::pack2tuple</scope><name>operator()</name></member>
      <member refid="structutilities_1_1pack2tuple_1a76afbd16c998332eb4de2986d8ec9cf5" prot="public" virt="non-virtual"><scope>utilities::pack2tuple</scope><name>pack_size</name></member>
      <member refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" prot="public" virt="non-virtual"><scope>utilities::pack2tuple</scope><name>tuple_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
