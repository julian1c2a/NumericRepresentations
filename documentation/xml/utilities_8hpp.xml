<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="es">
  <compounddef id="utilities_8hpp" kind="file" language="C++">
    <compoundname>utilities.hpp</compoundname>
    <includes local="no">tuple</includes>
    <includes local="no">array</includes>
    <includes refid="basic__types_8hpp" local="yes">basic_types.hpp</includes>
    <includedby refid="nat__rat__fixed__reg__t_8hpp" local="yes">nat_rat_fixed_reg_t.hpp</includedby>
    <includedby refid="nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp" local="yes">nat_reg_digs_t (Copia en conflicto de MSI 2022-11-24).hpp</includedby>
    <includedby refid="nat__reg__digs__t_8hpp" local="yes">nat_reg_digs_t.hpp</includedby>
    <includedby refid="reg__digs__t_8hpp" local="yes">reg_digs_t.hpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>basic_types.hpp</label>
        <link refid="basic__types_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>utilities.hpp</label>
        <link refid="utilities_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="18">
        <label>climits</label>
      </node>
      <node id="21">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>compare</label>
      </node>
      <node id="9">
        <label>concepts</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="23">
        <label>functional</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="22">
        <label>iterator</label>
      </node>
      <node id="20">
        <label>limits</label>
      </node>
      <node id="16">
        <label>list</label>
      </node>
      <node id="17">
        <label>map</label>
      </node>
      <node id="19">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="2">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>base_num_t.hpp</label>
        <link refid="base__num__t_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>int_num_t.hpp</label>
        <link refid="int__num__t_8hpp"/>
      </node>
      <node id="5">
        <label>int_reg_digs_t.hpp</label>
        <link refid="int__reg__digs__t_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>nat_num_t.hpp</label>
        <link refid="nat__num__t_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nat_rat_fixed_reg_t.hpp</label>
        <link refid="nat__rat__fixed__reg__t_8hpp"/>
      </node>
      <node id="3">
        <label>nat_reg_digs_t (Copia en conflicto de MSI 2022-11-24).hpp</label>
        <link refid="nat__reg__digs__t_01_07_copia_01en_01conflicto_01de_01_m_s_i_012022-11-24_08_8hpp"/>
      </node>
      <node id="4">
        <label>nat_reg_digs_t.hpp</label>
        <link refid="nat__reg__digs__t_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pruebas_dig_t.cpp</label>
        <link refid="pruebas__dig__t_8cpp"/>
      </node>
      <node id="9">
        <label>reg_digs_t.hpp</label>
        <link refid="reg__digs__t_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>utilities.hpp</label>
        <link refid="utilities_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structutilities_1_1pack2tuple" prot="public">utilities::pack2tuple</innerclass>
    <innerclass refid="structutilities_1_1local__void__t" prot="public">utilities::local_void_t</innerclass>
    <innerclass refid="structutilities_1_1for__each__same__type" prot="public">utilities::for_each_same_type</innerclass>
    <innerclass refid="structutilities_1_1for__each__same__type_3_01_head__t_01_4" prot="public">utilities::for_each_same_type&lt; Head_t &gt;</innerclass>
    <innerclass refid="structutilities_1_1pack2array" prot="public">utilities::pack2array</innerclass>
    <innernamespace refid="namespaceutilities">utilities</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceutilities_1a42ed6a49f4270d2ecd4103689b1e16ee" prot="public" static="no">
        <templateparamlist>
          <param>
            <type><ref refid="concept_num_repr_1_1type__traits_1_1unsigned__integral__c" kindref="compound">NumRepr::type_traits::unsigned_integral_c</ref></type>
            <declname>UINT_T</declname>
            <defname>UINT_T</defname>
          </param>
        </templateparamlist>
        <type>typename std::array&lt; UINT_T, 2 &gt;</type>
        <definition>using utilities::uintspair = typedef typename std::array&lt;UINT_T,2&gt;</definition>
        <argsstring></argsstring>
        <name>uintspair</name>
        <qualifiedname>utilities::uintspair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="10" column="1" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceutilities_1a19b04f837f493034c4612e5bcb58da22" prot="public" static="no">
        <templateparamlist>
          <param>
            <type><ref refid="concept_num_repr_1_1type__traits_1_1unsigned__integral__c" kindref="compound">NumRepr::type_traits::unsigned_integral_c</ref></type>
            <declname>UINT_T</declname>
            <defname>UINT_T</defname>
          </param>
          <param>
            <type>UINT_T</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
        </templateparamlist>
        <type>typename std::array&lt; uintspair&lt; UINT_T &gt;, B &gt;</type>
        <definition>using utilities::uintspairlist = typedef typename std::array&lt;uintspair&lt;UINT_T&gt;,B&gt;</definition>
        <argsstring></argsstring>
        <name>uintspairlist</name>
        <qualifiedname>utilities::uintspairlist</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="12" column="1" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceutilities_1ab05788cb7517fec011dd7e174edcd6a9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type><ref refid="concept_num_repr_1_1type__traits_1_1unsigned__integral__c" kindref="compound">NumRepr::type_traits::unsigned_integral_c</ref></type>
            <declname>UINT_T</declname>
            <defname>UINT_T</defname>
          </param>
          <param>
            <type>UINT_T</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
        </templateparamlist>
        <type>typename std::array&lt; uintspairlist&lt; UINT_T, B &gt;, B &gt;</type>
        <definition>using utilities::uintspairtbl = typedef typename std::array&lt;uintspairlist&lt;UINT_T,B&gt;,B&gt;</definition>
        <argsstring></argsstring>
        <name>uintspairtbl</name>
        <qualifiedname>utilities::uintspairtbl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="14" column="1" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceutilities_1a2ab88d0a656f1609a891e9ea35ce185e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utilities::assign_with_order</definition>
        <argsstring>(auto &amp;dest, const Ts &amp;... args) noexcept</argsstring>
        <name>assign_with_order</name>
        <qualifiedname>utilities::assign_with_order</qualifiedname>
        <param>
          <type>auto &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>( all_are_the_same_type&lt;Ts...&gt; &amp;&amp; all_are_more_than_zero&lt;Ts...&gt; )    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" line="154" column="6" bodyfile="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp" bodystart="154" bodyend="161"/>
        <references refid="structutilities_1_1pack2array_1acb47f65fafd84139fa3eef8d3a6baedd" compoundref="utilities_8hpp" startline="138" endline="146">utilities::pack2array&lt; Ts &gt;::for_each</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>UTILITIES_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTILITIES_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="basic__types_8hpp" kindref="compound">basic_types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="namespaceutilities" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutilities" kindref="compound">utilities</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;NumRepr::type_traits::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_c<sp/>UINT_T&gt;</highlight></codeline>
<codeline lineno="10" refid="namespaceutilities_1a42ed6a49f4270d2ecd4103689b1e16ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceutilities_1a42ed6a49f4270d2ecd4103689b1e16ee" kindref="member">uintspair</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::array&lt;UINT_T,2&gt;;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;NumRepr::type_traits::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_c<sp/>UINT_T,UINT_T<sp/>B&gt;</highlight></codeline>
<codeline lineno="12" refid="namespaceutilities_1a19b04f837f493034c4612e5bcb58da22" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceutilities_1a19b04f837f493034c4612e5bcb58da22" kindref="member">uintspairlist</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::array&lt;uintspair&lt;UINT_T&gt;,B&gt;;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;NumRepr::type_traits::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_c<sp/>UINT_T,UINT_T<sp/>B&gt;</highlight></codeline>
<codeline lineno="14" refid="namespaceutilities_1ab05788cb7517fec011dd7e174edcd6a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceutilities_1ab05788cb7517fec011dd7e174edcd6a9" kindref="member">uintspairtbl</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::array&lt;uintspairlist&lt;UINT_T,B&gt;,B&gt;;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...Ts&gt;</highlight></codeline>
<codeline lineno="40" refid="structutilities_1_1pack2tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1pack2tuple" kindref="compound">pack2tuple</ref><sp/>{</highlight></codeline>
<codeline lineno="41" refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" kindref="member">tuple_type</ref><sp/>=<sp/>std::tuple&lt;Ts...&gt;;</highlight></codeline>
<codeline lineno="42" refid="structutilities_1_1pack2tuple_1a76afbd16c998332eb4de2986d8ec9cf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2tuple_1a76afbd16c998332eb4de2986d8ec9cf5" kindref="member">pack_size</ref>()<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts));}</highlight></codeline>
<codeline lineno="43" refid="structutilities_1_1pack2tuple_1a98950abc107a937f1f2aa37871955957" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" kindref="member">tuple_type</ref><sp/><ref refid="structutilities_1_1pack2tuple_1a98950abc107a937f1f2aa37871955957" kindref="member">operator()</ref>(Ts&amp;&amp;<sp/>...args)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" kindref="member">tuple_type</ref><sp/><sp/>content<sp/>=<sp/>std::make_tuple(std::forward(args...));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>std::move(content);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="48" refid="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" kindref="member">elem_type</ref><sp/>=<sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;K,tuple_type&gt;::type;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>J&gt;</highlight></codeline>
<codeline lineno="50" refid="structutilities_1_1pack2tuple_1a21099506ee203993b708bd6f4894c82b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" kindref="member">elem_type&lt;J&gt;::type</ref><sp/><ref refid="structutilities_1_1pack2tuple_1a21099506ee203993b708bd6f4894c82b" kindref="member">get</ref>(Ts&amp;&amp;<sp/>...args)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutilities_1_1pack2tuple_1afd663d6d4e140735452241ee6bf13fd9" kindref="member">tuple_type</ref><sp/><sp/>content<sp/>=<sp/>std::make_tuple(std::forward(args...));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutilities_1_1pack2tuple_1a2e0d115ff8a9f1cededeed910472aa38" kindref="member">elem_type&lt;J&gt;</ref><sp/>ret{std::get&lt;J&gt;(std::forward(content))};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"></codeline>
<codeline lineno="73" refid="structutilities_1_1local__void__t" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1local__void__t" kindref="compound">local_void_t</ref><sp/>{};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Head_t,</highlight><highlight class="keyword">class</highlight><highlight class="normal">...Tail_t&gt;</highlight></codeline>
<codeline lineno="75" refid="structutilities_1_1for__each__same__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1for__each__same__type" kindref="compound">for_each_same_type</ref><sp/>{</highlight></codeline>
<codeline lineno="76" refid="structutilities_1_1for__each__same__type_1acf16b98533524aefda115e880faa2baf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1for__each__same__type_1acf16b98533524aefda115e880faa2baf" kindref="member">second_t</ref><sp/>=<sp/>std::tuple_element&lt;0,std::tuple&lt;Tail_t...&gt;&gt;::type;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="structutilities_1_1for__each__same__type_1a10069179aea7ad89090b1e1db8926772" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1for__each__same__type_1a10069179aea7ad89090b1e1db8926772" kindref="member">are_same_type_v</ref><sp/>=<sp/>(</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same_v&lt;Head_t,second_t&gt;)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structutilities_1_1for__each__same__type" kindref="compound">for_each_same_type&lt;Tail_t...&gt;::are_same_type_v</ref>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head_t&gt;</highlight></codeline>
<codeline lineno="84" refid="structutilities_1_1for__each__same__type_3_01_head__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1for__each__same__type" kindref="compound">for_each_same_type</ref>&lt;Head_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="85" refid="structutilities_1_1for__each__same__type_3_01_head__t_01_4_1a628ba9e0ff78e1d0115e23aa8ad22121" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1for__each__same__type_1a10069179aea7ad89090b1e1db8926772" kindref="member">are_same_type_v</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...Ts&gt;</highlight></codeline>
<codeline lineno="88" refid="conceptutilities_1_1all__are__the__same__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptutilities_1_1all__are__the__same__type" kindref="compound">all_are_the_same_type</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Ts...)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for_each_same_type&lt;Ts...&gt;::are_same_type_v;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...Ts&gt;</highlight></codeline>
<codeline lineno="92" refid="conceptutilities_1_1all__are__more__than__zero" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="conceptutilities_1_1all__are__more__than__zero" kindref="compound">all_are_more_than_zero</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Ts...)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts))&gt;0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...Ts&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><sp/>(<ref refid="conceptutilities_1_1all__are__the__same__type" kindref="compound">all_are_the_same_type</ref>&lt;Ts...&gt;&amp;&amp;<ref refid="conceptutilities_1_1all__are__more__than__zero" kindref="compound">all_are_more_than_zero</ref>&lt;Ts...&gt;)</highlight></codeline>
<codeline lineno="99" refid="structutilities_1_1pack2array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array" kindref="compound">pack2array</ref><sp/>{</highlight></codeline>
<codeline lineno="100" refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref><sp/>=<sp/>std::array&lt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2tuple" kindref="compound">pack2tuple</ref>&lt;Ts...&gt;::elem_type&lt;0&gt;,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;;</highlight></codeline>
<codeline lineno="104" refid="structutilities_1_1pack2array_1aa3f4d803238e78c1edb296d5ddc753ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="structutilities_1_1pack2array_1aa3f4d803238e78c1edb296d5ddc753ca" kindref="member">pack_size</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structutilities_1_1pack2array_1ab0ae97c762d1f4ca624ec46d809db6d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref>&amp;&amp;<sp/><ref refid="structutilities_1_1pack2array_1ab0ae97c762d1f4ca624ec46d809db6d9" kindref="member">operator()</ref>(Ts&amp;&amp;<sp/>...args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref><sp/><sp/>content<sp/>=<sp/><ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref>{std::forward(args...)};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>std::move(content);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819" kindref="member">elem_type</ref><sp/>=<sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2tuple" kindref="compound">pack2tuple</ref>&lt;Ts...&gt;::elem_type&lt;0&gt;;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>J&gt;</highlight></codeline>
<codeline lineno="116" refid="structutilities_1_1pack2array_1a771595ff4aaf2523a89c4aed11e5c16c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819" kindref="member">elem_type</ref><sp/><ref refid="structutilities_1_1pack2array_1a771595ff4aaf2523a89c4aed11e5c16c" kindref="member">get</ref>(Ts&amp;&amp;<sp/>...args)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref><sp/><sp/>content<sp/>=<sp/>{std::forward(args...)};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1acfb6243c111b766f9ce1bbfc19e0e819" kindref="member">elem_type</ref><sp/>ret{std::get&lt;J&gt;(std::forward(content))};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(ret);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t...<sp/>I&gt;</highlight></codeline>
<codeline lineno="127" refid="structutilities_1_1pack2array_1adb0fd6868de40dca0ff634ea9de98eee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1adb0fd6868de40dca0ff634ea9de98eee" kindref="member">for_each_impl</ref>(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref>&amp;<sp/>iarray,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...args,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::index_sequence&lt;I...&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>iarray[I]<sp/>=<sp/>std::get&lt;I&gt;(<sp/>std::make_tuple(args...)<sp/>)<sp/>)<sp/>,<sp/>...);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structutilities_1_1pack2array_1acb47f65fafd84139fa3eef8d3a6baedd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structutilities_1_1pack2array_1acb47f65fafd84139fa3eef8d3a6baedd" kindref="member">for_each</ref>(<ref refid="structutilities_1_1pack2array_1a9324c2c8ca1e1161fbbb0c5936d2e671" kindref="member">array_type</ref>&amp;<sp/>iarray,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...args)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size_of_pack{</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args)};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for_each_impl(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iarray,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args...,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_index_sequence&lt;size_of_pack&gt;{}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_are_the_same_type&lt;Ts...&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/>all_are_more_than_zero&lt;Ts...&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="154" refid="namespaceutilities_1a2ab88d0a656f1609a891e9ea35ce185e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutilities_1a2ab88d0a656f1609a891e9ea35ce185e" kindref="member">assign_with_order</ref>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dest<sp/>,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>args</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutilities_1_1pack2array_1acb47f65fafd84139fa3eef8d3a6baedd" kindref="member">pack2array&lt;Ts...&gt;::for_each</ref>(dest,args...);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>UTILITIES_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/julia/Dropbox/GitHub/NumericRepresentations/src/utilities.hpp"/>
  </compounddef>
</doxygen>
