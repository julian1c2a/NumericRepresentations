<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1reg__digs__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</title>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary></indexterm>
<para>

<para>DEFINCION DE template&lt;uint128_t Radix&gt; register_of_digits_t{};. </para>
 
</para>
<para>
<computeroutput>#include &lt;reg_digs_t.hpp&gt;</computeroutput>
</para>
Diagrama de herencias de NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Diagrama de colaboración para NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> = <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&lt; UINT_T, B &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link> = std::array&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> = <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; L &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link> = <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, N &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">type_traits::sig_UInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> = typename <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">type_traits::sig_SInt_for_UInt_t</link>&lt; UINT_T &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1ab04d648f3421732b3103e32a28f28d09">res_base_N_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt;, op, N &gt;</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </para><para>using <link linkend="_struct_num_repr_1_1reg__digs__t_1a410c269c5a379228ee4f9c757cdaace8">res_base_op_t</link> = typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link>, op, L &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos    </title>
        <itemizedlist>
            <listitem><para>const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> *const <link linkend="_struct_num_repr_1_1reg__digs__t_1a5b679caa4dbb16fb6c5cca1f30ba5f66">const_base_this</link> () const noexcept</para>

<para>devolucion de punteros a la clase base </para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t_1a6feafb3a28270bf7a293959e34d168e6">base_this</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aabe906a2378892bb152dba2e3f2a7b5c">r_base_cthis</link> () noexcept</para>

<para>devolucion de referencias a la clase base </para>
</listitem>
            <listitem><para>const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a6adb2fc166cc2a4419f5f86bd282df4f">cr_base_cthis</link> () const noexcept</para>

<para>devolucion de copia de la clase base </para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a813a2fca2665812c80725f66d1e5049f">cp_base_cthis</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a8dd53a3977033363ff15a88026eedf5b">r_cthis</link> () noexcept</para>

<para>devolucion de referencias de la clase actual </para>
</listitem>
            <listitem><para>const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1afc0773b25c6a84010530c389efcc4e5b">cr_cthis</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a6b20297d05753f752cbf21d212c5cd4c">cp_cthis</link> () const noexcept</para>

<para>devolucion de copia de la clase actual </para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af5c56f665da3c6aa1957ae521e74312d">cp_cthis_at</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> k) const noexcept</para>

<para>devoluciones por referencias y por copia de los elementos </para>
</listitem>
            <listitem><para><link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a926b408a1e43d578157164c351ac60c2">r_cthis_at</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> k) noexcept</para>
</listitem>
            <listitem><para>const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a44c0eab2b1465200a4dc0e349dba0b07">cr_cthis_at</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> k) const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a2f8a4ff3bd499089c6440c7992ee13cd">begin</link> () noexcept</para>

<para>En este bloque hacemos esta clase wrapper como si fuese una clase derivada de base_t Para esto replicamos y sobrecargamos cada una de las funciones por defecto de std::array Nota: lo anterior se escribio cuando no era clase derivada sino un wrapper. </para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1aa912c8d96b92e95e0d751f2a4500c436">cbegin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445">end</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a2cc438add79ca50b7ec3a0dcb3b4c6df">cend</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1ae0932422c4f294cd994b0f457af37599">rbegin</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1abfbe9a50e4c844fa73ee64e3de27d4c1">crbegin</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a6a98c20beaf0085e9b75ed6a73b6fac5">rend</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1ab2f586a22c208f2db8981f236be1f8a5">crend</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a7c0ccc82f763ae0b3bf9fd78f218c206">size</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a79ebf142083abdc8dcd44a354f159129">max_size</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a1344b97a93e4af1c28f04d2f8238ee09">empty</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a3746b11d0b23dc5d2bbba1d9cea58a41">front</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a022dc0ba35bb79d3a00d31f6603bcfbe">front</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a5fd5f903aae0b2017103d59e368c71f7">back</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ab3d4db33623c17c1f36712663487df1b">back</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d">fill</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;value) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1aa0d612930f23d7545926c12c6149759b">swap</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8a795f3202b17cb6bc3d4b771d8c6c9eaf">other</link>) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a3acacc33c0ddfe1a24835436f1e9d9f2">reverse</link> () noexcept</para>
</listitem>
            <listitem><para>consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73">reg_digs_t</link> () noexcept</para>

<para>Constructores de <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1af158dcd2b4c5d1cd725810f7b32a6377">reg_digs_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp;arg) noexcept</para>

<para>Constructor por lista de digitos utilizando la función make_base_t. </para>
</listitem>
            <listitem><para>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;&amp;&amp;...)</para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6d5930c7c0f8583b4000a60bd32aa00c">reg_digs_t</link> (const Ts &amp;... args) noexcept</para>

<para>Constructor por argumentos tipo <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>: deduce el tipo. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a5f1afe08bc99f4458f4406fbf8bc4388">reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;rarg) noexcept</para>

<para>CONSTRUCTOR COPIA DESDE EL TIPO BASE. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a667cc7f5b4658b2195c48e794f5c84a6">reg_digs_t</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;&amp;rarg) noexcept</para>

<para>CONSTRUCTOR MOVIMIENTO DESDE EL TIPO BASE. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aaba6b4d99022c55a9b8ca3ce2d62a50c">reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>Constructor copia desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando copy_arg_N&lt;N&gt;) </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1ad86b53a69638c4c1dddbcc396bd8c341">reg_digs_t</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>Constructor por movimiento desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando move_arg_N&lt;N&gt;) </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type))==L)</para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a64366dbe24ccb2e35ba2c4a9c6f1f1f6">reg_digs_t</link> (Ints_type ... dig_pow_i) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a3556d4ba2e14f426e919f1cfcde675fe">operator=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>Sobrecarga del operador copia. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ab18c370a730eae337ebe1e42e554bfb3">operator=</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1add6d93e2ffcc34e57e4698a627d2fd48">operator=</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa424868f7b7f2da2b989b2eb96ed1ed1">operator=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;arg) noexcept</para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1ada84ccdb7769b08b7b91b1dae6452c09">operator=</link> (Int_Type arg) noexcept</para>
</listitem>
            <listitem><para>template&lt;type_traits::integral_c Int_Type&gt; </para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a3ff2a749d367851189bc05a1687a0b22">operator Int_Type</link> () const noexcept</para>

<para>SE PODRÍA HACER PARA UINT128_T. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> *const <link linkend="_struct_num_repr_1_1reg__digs__t_1a29f49611f98ff0f0d0f4bf0c989d26f5">data</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t_1a7838aa779ec4ee589ba738f92786f356">cpy_data</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a81530d3849391d6dbc3c3a17fb486607">operator[]</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ix) const noexcept</para>

<para>&lt;summary=&quot;Sobrecarga del const dig_t &amp; operator[](size_t) const&quot;&gt; </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aaa8d34738ae18ebceb3399ca4df463b8">operator[]</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ix) noexcept</para>

<para>&lt;summary=&quot;Sobrecarga del dig_t &amp; operator[](size_t)&quot;&gt; </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1abc257d67bb67ef69b1a2491e58a705e1">set_0</link> () noexcept</para>

<para>Funciones que ponen a constantes (constexpr) los objetos base_t. </para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a6808c754c084ff40f4d106cf42c6f350">set_1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a635891fe476a0d485b6430eb003c66ff">set_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a9736402ea76979c6f3b550b4e7f8a2f0">set_dig</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a02db587c3f90aadabbde0f92731f622d">set_fill_dig</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a0d7f94d520c14a413858bb3fd2ebae9c">set_fill_1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a8449e0efdd8a69da67e519ee2716c200">set_fill_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_i, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a00ff39c7cca1ca76bfb5c0dd8021841b">set_interval_0</link> () noexcept</para>

<para>&quot;Funciones que ponen a constantes(constexpr) los objetos un subintervalo
o subrango de base_t cualquiera&quot; </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_i, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1af61633115c32e8183d2f606ce5d815fd">set_interval_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_i, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a538c70fae56df59c2ddbe0868f24cdaf">set_interval_dig</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> dig) noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1aeeeab7c383624a617b1ea9a9b83bf43d">is_0</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a2654ba7f2592f7b91f2dad311f33e683">is_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a6142af29fa32e0fa1e0fcccf7f1493e5">is_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a4b713404cbac91d3d972d1b8595bdb40">is_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a15cc6e417db19bb0483b3d81b31bf20d">is_Bp1</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires (n&lt;L)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a435cc68f0dd8a90375404140fc9c8ff8">is_B_pow_m1</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires (n&lt;L-1)</para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1aa9715a437357c3a2a1f79fc7477bb57a">is_B_pow</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a2cc4d03f17f00015a43125e0f5018ef2">is_any_B_pow</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a8f7a8ee6879194fd027b67e20f578474">is_filled_of_1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1ae0ead5a6439ee2a2a9f56dc29353ef60">is_filled_of_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a3a7c58a84c5be2458373bc6083a4e3e9">is_filled_of</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) const</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ibegin, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; L)&amp;&amp;(ibegin != iend))</para><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt;(ibegin&lt; iend)?(iend-ibegin):(ibegin-iend)&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa50d8abff6aa4a71c41fcb31c0441eb2">subregister</link> () const noexcept</para>

<para>TAKE A SUBREGISTER OF A REGISTER OF DIGITS. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a">mC_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb">mC_B</link> () noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2">C_Bm1</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c">C_B</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">operator!</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a">operator-</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a844edc62cc648266e8e9073666b00a87">operator&lt;&lt;</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const noexcept</para>

<para>OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a9847e4f64cf1507ee623d67775eba2df">operator&lt;&lt;=</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) noexcept</para>

<para>TODO TO DO VOY POR AQUI CON EL TEMA DE LOS CTHIS. </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1acda9e6eea4d49b7f6fbbf9c3bec9f7cd">operator&gt;&gt;=</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a91c247827ae9c2c539b5d7089a9fe884">operator&gt;&gt;</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c289fab138512b65681d3c6fa1df2cc">rem_B</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a5826bd193c62e736efdbe0fdd81cb653">m_rem_B</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a9f01e4cb3e143f6a26bd251919afe9d8">mer_B</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a717ff4a829077dbe06174feaa92a22d7">m_mer_B</link> (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1a1b446da3b8751e1c8af8839e1a59b1c5">operator|=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a88399df8a3b2e9f6fa413f5ba8c4147a">operator|</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t_1aebcb3bf7aaf1baa65bd97aeec1e777df">operator&amp;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a20034464834ae81a063a9c8fa4224f45">operator&amp;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) noexcept</para>
</listitem>
            <listitem><para>constexpr <link linkend="_namespace_num_repr_1af5b9445db37f31d3d80a43ad37b03afa">int64_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ae61c65b1123284d829626a91335def03">index_of_MSDig</link> () const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a72a186fd0231cb5140dc75466e628688">operator==</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>

<para>COMPARACIONES ENTRE BASE_T Y DIG_T EN FORMA BASE_T @ DIG_T. </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1ad76a2aa47907fd2f3ec19035c0a926a6">operator!=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a5ecc41aa76ee4b40c1f7480177d701f4">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a84b45a6bb497fbda0a83ac5b58c8a1a6">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1ae9a2c8fbb6a3aa1ed25aee8950b0b10f">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a871e547fbf592d7bf26f82fd019a3e65">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a2d1a40f341324f56e566b838fe888264">operator==</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a369c8486faffc16e8bc798dbce25b101">operator!=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1af6e5280e0fbfa4b07d1a6651cbafa515">operator&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a37b9758878b51f5ed9ebbebc14b41c9c">operator&lt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a869c348238795f848214949bad8445b0">operator&gt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t_1aa68aa5a93f69fcb7a191fec77bb27332">operator&lt;=</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) const noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1reg__digs__t_1a0f39118683e41ccec4e43fc0c3a94f7f">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
            <listitem><para>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1reg__digs__t_1a1598611c9a2c97185a0c0719ed7309de">operator&lt;=&gt;</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp;arg) const noexcept</para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805">dig_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37">dig_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9">dig_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1aae46074f8eb1e11d4856e2efc720e3b4">dig_Bm2</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1aa6b20e53fc72fb5353a27a5db5205ea2">ui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1a1ba13ed518c031c71ccd2aa99292c4f5">ui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1aafcea2323aac8fcedfc0f0780e46df5f">ui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t_1a3d59521dadb20ede37c648c6ec863bda">ui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a869fb55d18546d9f677b47fd1dd1d8bd">sui_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a80e523569503af77fdf36cada4de6700">sui_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a51dd71f63e7ccf1c92adbe3876a5eb19">sui_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1adaa8d7c0417ae7a7e76237ba2d368ede">sui_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af47bb7bcb365e6060f836ec7d53c8565">sui_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ac1cf8584292927fea378bde2e3172fce">ssi_0</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af598442408cf2ed05923092e2ccb7cd2">ssi_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a5e0248eb0b0cef64dcbf5fb87823714e">ssi_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a80fbaa972abc3ee57f5e8561eb4e944d">ssi_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ae6d6e6d6877d2fe389cdbacbaf7a6f63">ssi_Bp1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1ac49dc9af3af62aea5a7dfde9114e6c18">regd_base_N_0</link> () noexcept</para>

<para>PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1adb436e23c7144ee0da3db08cac34c7ed">regd_base_N_1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa001d41637e1a10c1284b5239b37159c">regd_base_N_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1ad9a96eb8b49ed44884da34180b85fe4f">regd_base_N_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a2ef368bdca679fa51aee6d18644b6a12">regd_base_N_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</para><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1af10d7f31743e81babe1c9d542f30f013">regd_base_N_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1affe99648c3d9c6e3e4decac8d4e46ee1">regd_base_0</link> () noexcept</para>

<para>IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T&lt;L&gt; DONDE BASE_T == BASE_N_T&lt;L&gt; TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. </para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a5b1efb8235b79459b15c6f2f84659452">regd_base_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a475a4bf204efd8f87c400575dc49114d">regd_base_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a69d2abd48bd92a58df7f51fc9e7578dd">regd_base_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a55521e5b02fa0a1d56745066e20eab91">regd_base_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a16e44b01fdd4e66c3390c34578f32e2c">regd_base_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ad04bdf9bcccd5c68c414b2cca9e9bc75">regd_0</link> () noexcept</para>

<para>IDEM QUE ANTES PERO CON LA CLASE DERIVADA, LA ACTUAL TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. </para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a9d2524d7b34e2e1b7d98ec3a16ccac67">regd_1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af02f9cc5afcc26fb14077a939c26ce85">regd_Bm1</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a8f86da208d0c9e947caea1a283711414">regd_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1af4fa7fec5b40b63434a86ee594adaed1">regd_pow_n_B</link> () noexcept</para>
</listitem>
            <listitem><para>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a1e76f417daec0f07cb28088baec9fb29">regd_pow_n_B_m1</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;typename ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type)) == L)</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1ab3cfc4aade78a43c2ec975477ba85912">normalize</link> (Ints_type ... digits_pow_i) noexcept</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba">cat</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;arg) noexcept</para>

<para>STATIC REG_DIGS_T CAT(REG_DIGS_T) </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+M &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeaaa5fc1d830756bffaf882156b86896">cat</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;larg, const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp;rarg) noexcept</para>

<para>STATIC &lt;M&gt; REG_N_DIGS_T&lt;L+M&gt; CAT(REG_DIGS_T,REG_N_DIGS_T&lt;M&gt;) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a8e8c64cba0341a3ad057053b346e42bd">cat</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg) noexcept</para>

<para>STATIC REG_DIGS_T&lt;L+1&gt; CAT(REG_DIGS_T,DIG_T) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+L &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a1cdda4f3f9f0ef5c4668901fb0e40b33">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp;rarg) noexcept</para>

<para>REG_N_DIGS_T&lt;1+L&gt; CAT(DIG_T,REG_DIGS_T) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg) noexcept</para>

<para>STATIC REG_N_DIGS_T&lt;1&gt; CAT(DIG_T) </para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 2 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg) noexcept</para>

<para>STATIC REG_N_DIGS_T&lt;1+1&gt; CAT(DIG_T,DIG_T) </para>
</listitem>
            <listitem><para>template&lt;typename T0 , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...)&amp;&amp; (std::is_same_v&lt;T0,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aa542abd7039bf3f0a9c62200a7b944d8">cat</link> (T0 dig0, Ts ... dig_pack) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1adb0296af7bc31546157ad06a67573a22">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> larg, T dig, Ts ... dig_pack) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1ae9ba2cc837d955061093bb0da463e2e6">cat</link> (T dig, Ts ... dig_pack, <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> rarg) noexcept</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ... N_pack&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;((N_pack&gt;0)&amp;&amp;...))</para><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N+(...+(N_pack))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a217ae996ddbff03f35fb3e7c6b24c1dd">cat</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N_pack &gt; ... rarg_pack) noexcept</para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a9328818c1dfd9433ac98d72cdfa8aba5">is_type_template_string_id</link> (std::string in) noexcept</para>

<para>el parser/lexer del <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> </para>
</listitem>
            <listitem><para>static std::string <link linkend="_struct_num_repr_1_1reg__digs__t_1a7d907a0fc450d27d7937370a2209aed6">to_type_template_string_id</link> () noexcept</para>
</listitem>
            <listitem><para>static <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a2ff36f133f6bcf9cd379e54be025a214">size_of_type_template_string_id</link> () noexcept</para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_num_repr_1_1reg__digs__t_1a011d4b57bf296a0e08fff4385eca0e08">get_type_template_string_id_token</link> (std::istream &amp;is)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos privados    </title>
        <itemizedlist>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1ad633ab0410a555ecb68b212149995310">copy_arg_N</link> (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;arg) noexcept</para>

<para>Constructor por Copia/Movimiento desde una sucesión variadica de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </para><para>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t_1a2ea6cd439fd6f88b32a780703794106c">move_arg_N</link> (<link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;&amp;arg) noexcept</para>

<para>Función miembro (delegada) para mover un objeto tipo base_t desde una referencia derecha a un array cualquiera de <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t_1a19a5a18b4db93320f0b9060aada7c146">data</link> () noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos privados estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1aad87f0f5f3bf9825b962e7288d527b96">make_base_t</link> (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp;larg)</para>

<para>Funcion miembro para generar un objeto tipo base_t y devolverlo desde un std::initializer_list&lt;dig_t&gt; </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt;<?linebreak?>requires ((suitable_base&lt;UINT_T,B&gt;())&amp;&amp;(L &gt; 0))<?linebreak?>struct NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</title></simplesect>

<para>DEFINCION DE template&lt;uint128_t Radix&gt; register_of_digits_t{};. </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00015">15</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf"/><section>
    <title>base_N_t</title>
<indexterm><primary>base_N_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_N_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::base_N_t =  std::array&lt;<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>,N&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00022">22</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01"/><section>
    <title>base_t</title>
<indexterm><primary>base_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::base_t =  <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt;L&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00024">24</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e"/><section>
    <title>dig_t</title>
<indexterm><primary>dig_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_t =  <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&lt;UINT_T,B&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00018">18</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0"/><section>
    <title>reg_N_digs_t</title>
<indexterm><primary>reg_N_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_N_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_N_digs_t =  <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt;UINT_T,B,N&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00027">27</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab04d648f3421732b3103e32a28f28d09"/><section>
    <title>res_base_N_op_t</title>
<indexterm><primary>res_base_N_op_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_N_op_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::res_base_N_op_t =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt;N&gt;,op,N&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00081">81</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a410c269c5a379228ee4f9c757cdaace8"/><section>
    <title>res_base_op_t</title>
<indexterm><primary>res_base_op_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>res_base_op_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1af0ffab053045d0f8f4bc9f35a0df1de8">binop_e</link> op&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::res_base_op_t =  typename <link linkend="_struct_num_repr_1_1auxiliary__types_1_1result__operation__t">auxiliary_types::result_operation_t</link>&lt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link>,op,L&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00085">85</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3"/><section>
    <title>SIG_SINT_T</title>
<indexterm><primary>SIG_SINT_T</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_SINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::SIG_SINT_T =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a814fee89586c4dec3ac2c985af201649">type_traits::sig_SInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00078">78</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21"/><section>
    <title>SIG_UINT_T</title>
<indexterm><primary>SIG_UINT_T</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>SIG_UINT_T</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::SIG_UINT_T =  typename <link linkend="_namespace_num_repr_1_1type__traits_1a9a526e626a27cfc6e05712d8b138604b">type_traits::sig_UInt_for_UInt_t</link>&lt;UINT_T&gt;</computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00077">77</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación del constructor y destructor</title>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab93743da3d764bb199f0d93b13247b73"/><section>
    <title>reg_digs_t()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>consteval <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructores de <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>. </para>
</para>

<para>Constructor por defecto (rellena de <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t(0)</link> todo el array) </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00323">323</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af158dcd2b4c5d1cd725810f7b32a6377"/><section>
    <title>reg_digs_t()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por lista de digitos utilizando la función make_base_t. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00370">370</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6d5930c7c0f8583b4000a60bd32aa00c"/><section>
    <title>reg_digs_t()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename ... Ts&gt; <?linebreak?>requires (std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;&amp;&amp;...)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const Ts &amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por argumentos tipo <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>: deduce el tipo. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00379">379</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5f1afe08bc99f4458f4406fbf8bc4388"/><section>
    <title>reg_digs_t()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR COPIA DESDE EL TIPO BASE. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00384">384</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a667cc7f5b4658b2195c48e794f5c84a6"/><section>
    <title>reg_digs_t()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp;&amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>CONSTRUCTOR MOVIMIENTO DESDE EL TIPO BASE. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00387">387</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aaba6b4d99022c55a9b8ca3ce2d62a50c"/><section>
    <title>reg_digs_t()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor copia desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando copy_arg_N&lt;N&gt;) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00463">463</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad86b53a69638c4c1dddbcc396bd8c341"/><section>
    <title>reg_digs_t()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por movimiento desde un array cualquiera de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link> (usando move_arg_N&lt;N&gt;) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00472">472</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a64366dbe24ccb2e35ba2c4a9c6f1f1f6"/><section>
    <title>reg_digs_t()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>reg_digs_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reg_digs_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type))==L)</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reg_digs_t (Ints_type ... dig_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot;Constructor copia desde una sucesión de objetos enteros variádica, normalizándolos&quot;&gt; </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00560">560</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab3d4db33623c17c1f36712663487df1b"/><section>
    <title>back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const  &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::back ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00297">297</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5fd5f903aae0b2017103d59e368c71f7"/><section>
    <title>back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::back ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00295">295</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6feafb3a28270bf7a293959e34d168e6"/><section>
    <title>base_this()</title>
<indexterm><primary>base_this</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>base_this</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::base_this ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00034">34</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2f8a4ff3bd499089c6440c7992ee13cd"/><section>
    <title>begin()</title>
<indexterm><primary>begin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>En este bloque hacemos esta clase wrapper como si fuese una clase derivada de base_t Para esto replicamos y sobrecargamos cada una de las funciones por defecto de std::array Nota: lo anterior se escribio cuando no era clase derivada sino un wrapper. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00267">267</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c"/><section>
    <title>C_B()</title>
<indexterm><primary>C_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01146">1146</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a61e3773ab1f1b47ae335e5c561ca5c6c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2"/><section>
    <title>C_Bm1()</title>
<indexterm><primary>C_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>C_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::C_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01142">1142</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a2fe3516a538c7e83b6827106fd5606c2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1acd5dfd683e4fee83f7561568f809a2ba"/><section>
    <title>cat()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_DIGS_T CAT(REG_DIGS_T) </para>
</para>

<para>STATIC FUNCTIONS : CONCATENATE REGISTERS AND DIGITS reg_digs_t&lt;1&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8">cat(dig_t)</link> <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt;1+1&gt; <link linkend="_struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649">cat(dig_t,dig_t)</link> <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> cat(reg_digs_t) &lt;M&gt; reg_N_digs_t&lt;L+M&gt; cat(reg_digs_t,reg_N_digs_t&lt;M&gt;) reg_N_digs_t&lt;L+1&gt; cat(reg_digs_t,dig_t) reg_N_digs_t&lt;1+L&gt; cat(dig_t,reg_digs_t) reg_N_digs_t&lt;sizeof...(dig_pack)&gt; cat(dig_t ... dig_pack) VARIADIC PACK </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00984">984</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aeaaa5fc1d830756bffaf882156b86896"/><section>
    <title>cat()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+M &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; larg, const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC &lt;M&gt; REG_N_DIGS_T&lt;L+M&gt; CAT(REG_DIGS_T,REG_N_DIGS_T&lt;M&gt;) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00991">991</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8e8c64cba0341a3ad057053b346e42bd"/><section>
    <title>cat()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_DIGS_T&lt;L+1&gt; CAT(REG_DIGS_T,DIG_T) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01003">1003</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a881a503845af0e9c28e2c019262062c8"/><section>
    <title>cat()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_N_DIGS_T&lt;1&gt; CAT(DIG_T) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01025">1025</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1cdda4f3f9f0ef5c4668901fb0e40b33"/><section>
    <title>cat()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+L &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>REG_N_DIGS_T&lt;1+L&gt; CAT(DIG_T,REG_DIGS_T) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01014">1014</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a41c8a71bdf2a6f9b306df55be5136649"/><section>
    <title>cat()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 2 &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>STATIC REG_N_DIGS_T&lt;1+1&gt; CAT(DIG_T,DIG_T) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01030">1030</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1adb0296af7bc31546157ad06a67573a22"/><section>
    <title>cat()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; larg, T dig, Ts ... dig_pack)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;L+1+(SIZEOF...(DIG_PACK))&gt; CAT(REG_DIGS_T,DIG_T,DIG_T ... DIG_PACK) VARIADIC </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01059">1059</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a217ae996ddbff03f35fb3e7c6b24c1dd"/><section>
    <title>cat()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ... N_pack&gt; <?linebreak?>requires ((N&gt;0)&amp;&amp;((N_pack&gt;0)&amp;&amp;...))</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N+(...+(N_pack))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; larg, <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N_pack &gt; ... rarg_pack)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;SIZE_T N,SIZE_T ... N_PACK&gt; CAT(REG_N_DIGS_T&lt;N&gt; LARG,
                REG_N_DIGS_T&lt;N_PACK&gt; ... RARG_PACK
        ) VARIADIC PACK </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01085">1085</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae9ba2cc837d955061093bb0da463e2e6"/><section>
    <title>cat()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename T , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...) &amp;&amp; (std::is_same_v&lt;T,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; L+1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (T dig, Ts ... dig_pack, <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;L+1+(SIZEOF...(DIG_PACK))&gt; CAT(DIG_T,DIG_T ... DIG_PACK,REG_DIGS_T) VARIADIC </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01072">1072</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa542abd7039bf3f0a9c62200a7b944d8"/><section>
    <title>cat()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>cat</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cat</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename T0 , typename ... Ts&gt; <?linebreak?>requires ( ((std::is_same_v&lt;Ts,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;)&amp;&amp;...)&amp;&amp; (std::is_same_v&lt;T0,<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link>&gt;) )</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; 1+(sizeof ...(Ts))&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cat (T0 dig0, Ts ... dig_pack)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>STATIC REG_N_DIGS_T&lt;SIZEOF...(DIG_PACK)&gt; CAT(DIG_T,DIG_T ... DIG_PACK) VARIADIC </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01046">1046</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa912c8d96b92e95e0d751f2a4500c436"/><section>
    <title>cbegin()</title>
<indexterm><primary>cbegin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cbegin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00269">269</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2cc438add79ca50b7ec3a0dcb3b4c6df"/><section>
    <title>cend()</title>
<indexterm><primary>cend</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cend</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00273">273</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5b679caa4dbb16fb6c5cca1f30ba5f66"/><section>
    <title>const_base_this()</title>
<indexterm><primary>const_base_this</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>const_base_this</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> *const <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::const_base_this ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>devolucion de punteros a la clase base </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00030">30</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad633ab0410a555ecb68b212149995310"/><section>
    <title>copy_arg_N()</title>
<indexterm><primary>copy_arg_N</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>copy_arg_N</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::copy_arg_N (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Constructor por Copia/Movimiento desde una sucesión variadica de dígitos <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>. </para>
</para>

<para>Función miembro (delegada) para copiar un objeto tipo base_t desde una referencia constante a un array cualquiera de <link linkend="_struct_num_repr_1_1dig__t">dig_t</link></para>

<para>&lt;function name=&quot;copy_arg_N&quot;&gt;&lt;/function&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>const base_N_t&lt;N&gt; &amp; arg</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;returns=&quot;void&quot;&gt;</para>

<para>&lt; Z &lt; W or Z == W</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00406">406</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a813a2fca2665812c80725f66d1e5049f"/><section>
    <title>cp_base_cthis()</title>
<indexterm><primary>cp_base_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cp_base_cthis</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cp_base_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00046">46</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6b20297d05753f752cbf21d212c5cd4c"/><section>
    <title>cp_cthis()</title>
<indexterm><primary>cp_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cp_cthis</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cp_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>devolucion de copia de la clase actual </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00058">58</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af5c56f665da3c6aa1957ae521e74312d"/><section>
    <title>cp_cthis_at()</title>
<indexterm><primary>cp_cthis_at</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cp_cthis_at</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cp_cthis_at (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> k) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>devoluciones por referencias y por copia de los elementos </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00062">62</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a7838aa779ec4ee589ba738f92786f356"/><section>
    <title>cpy_data()</title>
<indexterm><primary>cpy_data</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cpy_data</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cpy_data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00684">684</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6adb2fc166cc2a4419f5f86bd282df4f"/><section>
    <title>cr_base_cthis()</title>
<indexterm><primary>cr_base_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cr_base_cthis</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cr_base_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>devolucion de copia de la clase base </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00042">42</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1afc0773b25c6a84010530c389efcc4e5b"/><section>
    <title>cr_cthis()</title>
<indexterm><primary>cr_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cr_cthis</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cr_cthis ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00054">54</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a44c0eab2b1465200a4dc0e349dba0b07"/><section>
    <title>cr_cthis_at()</title>
<indexterm><primary>cr_cthis_at</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>cr_cthis_at</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::cr_cthis_at (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> k) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00070">70</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1abfbe9a50e4c844fa73ee64e3de27d4c1"/><section>
    <title>crbegin()</title>
<indexterm><primary>crbegin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>crbegin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::crbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00277">277</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab2f586a22c208f2db8981f236be1f8a5"/><section>
    <title>crend()</title>
<indexterm><primary>crend</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>crend</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::crend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00281">281</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a29f49611f98ff0f0d0f4bf0c989d26f5"/><section>
    <title>data()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>data</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>data</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> *const <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::data ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot; sobrecarga de las funciones miembro : &quot;&gt; constexpr const dig_t* <link linkend="_struct_num_repr_1_1reg__digs__t_1a29f49611f98ff0f0d0f4bf0c989d26f5">data() const </link>noexcept;</para>

<para><formalpara><title>Devuelve</title>

<para></para>
</formalpara>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00679">679</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a19a5a18b4db93320f0b9060aada7c146"/><section>
    <title>data()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>data</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>data</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> * <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::data ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot; sobrecarga de las funciones miembro : &quot;&gt; constexpr dig_t* <link linkend="_struct_num_repr_1_1reg__digs__t_1a19a5a18b4db93320f0b9060aada7c146">data()</link> noexcept;</para>

<para><formalpara><title>Devuelve</title>

<para></para>
</formalpara>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00670">670</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9d37af8b2ce4db142cb55a932d8fd805"/><section>
    <title>dig_0()</title>
<indexterm><primary>dig_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00088">88</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a9d37af8b2ce4db142cb55a932d8fd805_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3c8f7cb71f70468db3ba5ccef33bdd37"/><section>
    <title>dig_1()</title>
<indexterm><primary>dig_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00090">90</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a3c8f7cb71f70468db3ba5ccef33bdd37_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a48a6ce4848e83ccea11c42c2deea38d9"/><section>
    <title>dig_Bm1()</title>
<indexterm><primary>dig_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00092">92</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a48a6ce4848e83ccea11c42c2deea38d9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aae46074f8eb1e11d4856e2efc720e3b4"/><section>
    <title>dig_Bm2()</title>
<indexterm><primary>dig_Bm2</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>dig_Bm2</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::dig_Bm2 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00094">94</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aae46074f8eb1e11d4856e2efc720e3b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1344b97a93e4af1c28f04d2f8238ee09"/><section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>empty</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00288">288</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aae1bd8ec380671dcd31c9d7dcd03d445"/><section>
    <title>end()</title>
<indexterm><primary>end</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00271">271</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0456b2f0f8d879695698974f9f2b325d"/><section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>fill</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::fill (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; value)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00300">300</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a022dc0ba35bb79d3a00d31f6603bcfbe"/><section>
    <title>front()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> const  &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::front ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00293">293</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3746b11d0b23dc5d2bbba1d9cea58a41"/><section>
    <title>front()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::front ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00291">291</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a011d4b57bf296a0e08fff4385eca0e08"/><section>
    <title>get_type_template_string_id_token()</title>
<indexterm><primary>get_type_template_string_id_token</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>get_type_template_string_id_token</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::get_type_template_string_id_token (std::istream &amp; is)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>FUNCION GENERICA QUE CONSIGUE EL TOKEN TYPE PARA LA OBTENCION DEL OBJETO CORRESPONDIENTE POR TECLADO </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01544">1544</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae61c65b1123284d829626a91335def03"/><section>
    <title>index_of_MSDig()</title>
<indexterm><primary>index_of_MSDig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>index_of_MSDig</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_namespace_num_repr_1af5b9445db37f31d3d80a43ad37b03afa">int64_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::index_of_MSDig ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>NOS DEVUELVE EL ÍNDICE DEL DÍGITO NO 0 DE POTENCIA DE B MAS GRANDE NOS DEVUELVE 0 SI ES UN DÍGITO NO 0 NOS DEVUELVE -1 SI ES EL DÍGITO 0 CUALQUIER OTRO CASO NOS DARÁ MAYOR QUE 0 </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01280">1280</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ae61c65b1123284d829626a91335def03_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aeeeab7c383624a617b1ea9a9b83bf43d"/><section>
    <title>is_0()</title>
<indexterm><primary>is_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_0 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00790">790</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aeeeab7c383624a617b1ea9a9b83bf43d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2654ba7f2592f7b91f2dad311f33e683"/><section>
    <title>is_1()</title>
<indexterm><primary>is_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00803">803</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a2654ba7f2592f7b91f2dad311f33e683_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2cc4d03f17f00015a43125e0f5018ef2"/><section>
    <title>is_any_B_pow()</title>
<indexterm><primary>is_any_B_pow</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_any_B_pow</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_any_B_pow ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00934">934</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a4b713404cbac91d3d972d1b8595bdb40"/><section>
    <title>is_B()</title>
<indexterm><primary>is_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00825">825</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa9715a437357c3a2a1f79fc7477bb57a"/><section>
    <title>is_B_pow()</title>
<indexterm><primary>is_B_pow</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires (n&lt;L-1)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00890">890</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a435cc68f0dd8a90375404140fc9c8ff8"/><section>
    <title>is_B_pow_m1()</title>
<indexterm><primary>is_B_pow_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_B_pow_m1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires (n&lt;L)</computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_B_pow_m1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00860">860</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6142af29fa32e0fa1e0fcccf7f1493e5"/><section>
    <title>is_Bm1()</title>
<indexterm><primary>is_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00814">814</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a6142af29fa32e0fa1e0fcccf7f1493e5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a15cc6e417db19bb0483b3d81b31bf20d"/><section>
    <title>is_Bp1()</title>
<indexterm><primary>is_Bp1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_Bp1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_Bp1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00842">842</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3a7c58a84c5be2458373bc6083a4e3e9"/><section>
    <title>is_filled_of()</title>
<indexterm><primary>is_filled_of</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00965">965</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8f7a8ee6879194fd027b67e20f578474"/><section>
    <title>is_filled_of_1()</title>
<indexterm><primary>is_filled_of_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00949">949</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae0ead5a6439ee2a2a9f56dc29353ef60"/><section>
    <title>is_filled_of_Bm1()</title>
<indexterm><primary>is_filled_of_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_filled_of_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_filled_of_Bm1 ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00957">957</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9328818c1dfd9433ac98d72cdfa8aba5"/><section>
    <title>is_type_template_string_id()</title>
<indexterm><primary>is_type_template_string_id</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>is_type_template_string_id</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::is_type_template_string_id (std::string in)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>el parser/lexer del <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> </para>
</para>

<para>Funciones de ayuda para </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01517">1517</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a717ff4a829077dbe06174feaa92a22d7"/><section>
    <title>m_mer_B()</title>
<indexterm><primary>m_mer_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_mer_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_mer_B (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01237">1237</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5826bd193c62e736efdbe0fdd81cb653"/><section>
    <title>m_rem_B()</title>
<indexterm><primary>m_rem_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>m_rem_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::m_rem_B (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01222">1222</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aad87f0f5f3bf9825b962e7288d527b96"/><section>
    <title>make_base_t()</title>
<indexterm><primary>make_base_t</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>make_base_t</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::make_base_t (const std::initializer_list&lt; <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &gt; &amp; larg)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Funcion miembro para generar un objeto tipo base_t y devolverlo desde un std::initializer_list&lt;dig_t&gt; </para>
</para>

<para>&lt;function name=&quot;make_base_t&quot;&gt;&lt;/function&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>const std::initializer_list&lt;dig_t&gt;&amp; larg</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;returns=&quot;rarg : base_t&quot;&gt;</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00334">334</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a79ebf142083abdc8dcd44a354f159129"/><section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>max_size</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::max_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00286">286</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb"/><section>
    <title>mC_B()</title>
<indexterm><primary>mC_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01127">1127</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a459dcc84f5a2ff05f229a2813eeca4eb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a"/><section>
    <title>mC_Bm1()</title>
<indexterm><primary>mC_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mC_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::mC_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERADORES ARITMETICOS <link linkend="_struct_num_repr_1_1reg__digs__t_1a61e3773ab1f1b47ae335e5c561ca5c6c">C_B()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a2fe3516a538c7e83b6827106fd5606c2">C_Bm1()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a459dcc84f5a2ff05f229a2813eeca4eb">mC_B()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1aba51984e457f7e0cd28fa38c3454b38a">mC_Bm1()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">operator!()</link> <link linkend="_struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a">operator-()</link> </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01119">1119</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aba51984e457f7e0cd28fa38c3454b38a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aba51984e457f7e0cd28fa38c3454b38a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9f01e4cb3e143f6a26bd251919afe9d8"/><section>
    <title>mer_B()</title>
<indexterm><primary>mer_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>mer_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::mer_B (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01230">1230</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2ea6cd439fd6f88b32a780703794106c"/><section>
    <title>move_arg_N()</title>
<indexterm><primary>move_arg_N</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>move_arg_N</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::move_arg_N (<link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Función miembro (delegada) para mover un objeto tipo base_t desde una referencia derecha a un array cualquiera de <link linkend="_struct_num_repr_1_1dig__t">dig_t</link>. </para>
</para>

<para>&lt;function name=&quot;copy_arg_N&quot;&gt;&lt;/function&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>const base_N_t&lt;N&gt; &amp; arg</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;returns=&quot;void&quot;&gt;</para>

<para>&lt; Z &lt; W or Z == W</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00435">435</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab3cfc4aade78a43c2ec975477ba85912"/><section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>normalize</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;typename ... Ints_type&gt; <?linebreak?>requires ((sizeof...(Ints_type)) == L)</computeroutput><para><computeroutput>static constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::normalize (Ints_type ... digits_pow_i)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>&lt;summary=&quot;Funcion de normalizacion a dig_t (dígitos base B) que construye un objeto de tipo &quot;&gt;</para>

<para>&lt;summary=&quot;base_t desde una sucesion variadica de enteros cualquiera&quot;&gt;</para>

<para>&lt;function name=&quot;normalize&quot;&gt;&lt;/function&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Ints_type ... digits_pow_i</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;returns=&quot;base_t&quot;&gt;</para>

<para>&lt; CREA UN STD_ARRAY DEL TIPO INT PASADO POR UN PACK DE ARGUMENTOS EL TAMANO ES EL DEL PACK DE ARGUMENTOS PASADO (MENOR O IGUAL QUE L)</para>

<para>&lt; DEVUELVE EL TIPO INTERNO DE ELEMENTO DEL ARRAY ANTERIOR [UN TIPO ENTERO]</para>

<para>&lt; DEVUELVE EL TAMANO DEL ARRAY ANTERIOR (TAMAÑO == L)</para>

<para>&lt; ELIGE ENTRE CUATRO TIPOS DE ENTEROS SEGUN TENGAN SIGNO O NO Y SU TAMANO SEA MAYOR O MENOR QUE EL PROPIO DE LA BASE UINT_T TIPO PROPIO ES : UINT_T TIPO PASADO COMO ARGUMENTO ES : UNIQUE_TYPE LOS TIPOS PASADOS EN LOS ARGUMENTOS HAN DE SER IGUALES ENTRE SI PARA EL INTERROGANTE CONDICIONAL UTILIZAMOS UNSIGNED_INTEGRAL_C PRIMERA PREGUNTA O MAS EXTERIOR IS_UNISGNED_SZ_GT_V&lt;T,S&gt; PREGUNTAS SEGUNDAS O MAS INTERIORES PARA ELEGIR EL TIPO APROPIADO EN CADA CASO USAMOS SIG_UINT_FOR_UINT_T&lt;UINT_T&gt; SIG_UINT_FOR_UINT_T&lt;UNIQUE_TYPE&gt; SIG_UINT_FOR_UINT_T&lt;UINT_T&gt; SIG_UINT_FOR_SINT_T&lt;UNIQUE_TYPE&gt;</para>

<para></para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00487">487</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ab3cfc4aade78a43c2ec975477ba85912_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3ff2a749d367851189bc05a1687a0b22"/><section>
    <title>operator Int_Type()</title>
<indexterm><primary>operator Int_Type</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator Int_Type</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator Int_Type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>SE PODRÍA HACER PARA UINT128_T. </para>
</para>

<para>Algunas Conversiones </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00649">649</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a3ff2a749d367851189bc05a1687a0b22_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac"/><section>
    <title>operator!()</title>
<indexterm><primary>operator!</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator! ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>A partir de aquí no he hecho las sustituciones de const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; cthis{*this}; / <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; cthis{*this}; / <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> cthis{*this}; Por las correspondientes funciones <link linkend="_struct_num_repr_1_1reg__digs__t_1afc0773b25c6a84010530c389efcc4e5b">cr_cthis()</link> / <link linkend="_struct_num_repr_1_1reg__digs__t_1a8dd53a3977033363ff15a88026eedf5b">r_cthis()</link> / <link linkend="_struct_num_repr_1_1reg__digs__t_1a6b20297d05753f752cbf21d212c5cd4c">cp_cthis()</link> </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01154">1154</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad76a2aa47907fd2f3ec19035c0a926a6"/><section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">::operator!</link>= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01307">1307</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a369c8486faffc16e8bc798dbce25b101"/><section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;<link linkend="_struct_num_repr_1_1reg__digs__t_1a05a97a435bf59c5442be92c071176aac">::operator!</link>= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01395">1395</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a20034464834ae81a063a9c8fa4224f45"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&amp; (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01269">1269</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aebcb3bf7aaf1baa65bd97aeec1e777df"/><section>
    <title>operator&amp;=()</title>
<indexterm><primary>operator&amp;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&amp;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&amp;= (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01260">1260</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1addfe409a19fc9017ac89b2516f4a6a8a"/><section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator- ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01158">1158</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a84b45a6bb497fbda0a83ac5b58c8a1a6"/><section>
    <title>operator&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01330">1330</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a37b9758878b51f5ed9ebbebc14b41c9c"/><section>
    <title>operator&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01449">1449</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a844edc62cc648266e8e9073666b00a87"/><section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt;&lt; (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERATORS &gt;&gt; &gt;&gt;= &lt;&lt; &lt;&lt;= REM_B^n M_REM_B^n MER_B_N M_MER_B_N. </para>
</para>

<para>MULTIPLY BY THE BASE B (10) &lt;&lt; &lt;&lt;= DIVIDE BY THE BASE B (10) &gt;&gt; &gt;&gt;= REMAINDER BY THE BASE B (10) REM_B_N M_REM_B_N MULTIPLICATIVE CARRY BY THE BASE B (10) MER_B_N M_MER_B_N </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01169">1169</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9847e4f64cf1507ee623d67775eba2df"/><section>
    <title>operator&lt;&lt;=()</title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt;&lt;= (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>TODO TO DO VOY POR AQUI CON EL TEMA DE LOS CTHIS. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01182">1182</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a871e547fbf592d7bf26f82fd019a3e65"/><section>
    <title>operator&lt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01352">1352</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa68aa5a93f69fcb7a191fec77bb27332"/><section>
    <title>operator&lt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01482">1482</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1598611c9a2c97185a0c0719ed7309de"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr std::weak_ordering <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt;=&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01503">1503</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0f39118683e41ccec4e43fc0c3a94f7f"/><section>
    <title>operator&lt;=&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&lt;=&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr std::strong_ordering <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&lt;=&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; arg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERADOR COMPARACION SPACESHIP C++20. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01490">1490</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa424868f7b7f2da2b989b2eb96ed1ed1"/><section>
    <title>operator=()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>OPERACION COPIA DESDE UN DIGITO (CONVERSION) </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00604">604</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aa424868f7b7f2da2b989b2eb96ed1ed1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3556d4ba2e14f426e919f1cfcde675fe"/><section>
    <title>operator=()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sobrecarga del operador copia. </para>
</para>

<para>OPERACION ASIGNACION POR COPIA REFERENCIA CONST <emphasis>NO</emphasis> COPIABLE DESDE REG_N_DIGS_T EN LA IZQUIERDA </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00573">573</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ada84ccdb7769b08b7b91b1dae6452c09"/><section>
    <title>operator=()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;type_traits::integral_c Int_Type&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator= (Int_Type arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION COPIA DESDE UN ENTERO (CONVERSION A LA BASE B) A UN REG_DIGS_T </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00617">617</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ada84ccdb7769b08b7b91b1dae6452c09_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1add6d93e2ffcc34e57e4698a627d2fd48"/><section>
    <title>operator=()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator= (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp;&amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR MOVIMIENTO DESDE REGS_N_DIGS_T EN LA QUE NO SE PUEDE COPIAR </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00595">595</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ab18c370a730eae337ebe1e42e554bfb3"/><section>
    <title>operator=()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator= (<link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; N &gt; &amp; arg)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION ASIGNACION POR COPIA REFERENCIA DESDE REG_N_DIGS_T EN LA IZQUIERDA </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00584">584</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a72a186fd0231cb5140dc75466e628688"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator== (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>COMPARACIONES ENTRE BASE_T Y DIG_T EN FORMA BASE_T @ DIG_T. </para>
</para>

<para>SOBRECARGA DE LOS OPERADORES DE COMPARACION Y ORDEN </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01296">1296</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2d1a40f341324f56e566b838fe888264"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator== (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>COMPARACIONES ENTRE REG_DIGS_T Y REG_N_DIGS_T HETEROGENEOS EN GENERAL EN FORMA REG_DIGS_T @ REG_N_DIGS_T&lt;M&gt; </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01368">1368</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5ecc41aa76ee4b40c1f7480177d701f4"/><section>
    <title>operator&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01319">1319</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af6e5280e0fbfa4b07d1a6651cbafa515"/><section>
    <title>operator&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&gt; (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01422">1422</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae9a2c8fbb6a3aa1ed25aee8950b0b10f"/><section>
    <title>operator&gt;=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&gt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01341">1341</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a869c348238795f848214949bad8445b0"/><section>
    <title>operator&gt;=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> M&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&gt;= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt; M &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01476">1476</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a91c247827ae9c2c539b5d7089a9fe884"/><section>
    <title>operator&gt;&gt;()</title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&gt;&gt; (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01208">1208</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1acda9e6eea4d49b7f6fbbf9c3bec9f7cd"/><section>
    <title>operator&gt;&gt;=()</title>
<indexterm><primary>operator&gt;&gt;=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator&gt;&gt;=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator&gt;&gt;= (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01194">1194</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a81530d3849391d6dbc3c3a17fb486607"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator[] (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ix) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&lt;summary=&quot;Sobrecarga del const dig_t &amp; operator[](size_t) const&quot;&gt; </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00690">690</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aaa8d34738ae18ebceb3399ca4df463b8"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator[] (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ix)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&lt;summary=&quot;Sobrecarga del dig_t &amp; operator[](size_t)&quot;&gt; </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00696">696</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a88399df8a3b2e9f6fa413f5ba8c4147a"/><section>
    <title>operator|()</title>
<indexterm><primary>operator|</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator| (const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link>&lt; UINT_T, B, L &gt; &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01253">1253</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1b446da3b8751e1c8af8839e1a59b1c5"/><section>
    <title>operator|=()</title>
<indexterm><primary>operator|=</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>operator|=</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr const <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::operator|= (const <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; rarg) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01244">1244</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aabe906a2378892bb152dba2e3f2a7b5c"/><section>
    <title>r_base_cthis()</title>
<indexterm><primary>r_base_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>r_base_cthis</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::r_base_cthis ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>devolucion de referencias a la clase base </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00038">38</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8dd53a3977033363ff15a88026eedf5b"/><section>
    <title>r_cthis()</title>
<indexterm><primary>r_cthis</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>r_cthis</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::r_cthis ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>devolucion de referencias de la clase actual </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00050">50</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a926b408a1e43d578157164c351ac60c2"/><section>
    <title>r_cthis_at()</title>
<indexterm><primary>r_cthis_at</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>r_cthis_at</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput><link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> &amp; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::r_cthis_at (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> k)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00066">66</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae0932422c4f294cd994b0f457af37599"/><section>
    <title>rbegin()</title>
<indexterm><primary>rbegin</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rbegin</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::rbegin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00275">275</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad04bdf9bcccd5c68c414b2cca9e9bc75"/><section>
    <title>regd_0()</title>
<indexterm><primary>regd_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>IDEM QUE ANTES PERO CON LA CLASE DERIVADA, LA ACTUAL TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00230">230</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ad04bdf9bcccd5c68c414b2cca9e9bc75_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9d2524d7b34e2e1b7d98ec3a16ccac67"/><section>
    <title>regd_1()</title>
<indexterm><primary>regd_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00235">235</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a9d2524d7b34e2e1b7d98ec3a16ccac67_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8f86da208d0c9e947caea1a283711414"/><section>
    <title>regd_B()</title>
<indexterm><primary>regd_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00245">245</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a8f86da208d0c9e947caea1a283711414_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1affe99648c3d9c6e3e4decac8d4e46ee1"/><section>
    <title>regd_base_0()</title>
<indexterm><primary>regd_base_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>IDEM QUE ANTES PERO CON EL TIPO BASE_T ESPECIALIZANDO AL TIPO BASE_N_T&lt;L&gt; DONDE BASE_T == BASE_N_T&lt;L&gt; TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00195">195</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5b1efb8235b79459b15c6f2f84659452"/><section>
    <title>regd_base_1()</title>
<indexterm><primary>regd_base_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00200">200</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a69d2abd48bd92a58df7f51fc9e7578dd"/><section>
    <title>regd_base_B()</title>
<indexterm><primary>regd_base_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00210">210</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a475a4bf204efd8f87c400575dc49114d"/><section>
    <title>regd_base_Bm1()</title>
<indexterm><primary>regd_base_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00205">205</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ac49dc9af3af62aea5a7dfde9114e6c18"/><section>
    <title>regd_base_N_0()</title>
<indexterm><primary>regd_base_N_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>PARA EL TIPO-TEMPLATE BASE_N_T OBTENEMOS CONSTANTES INMEDIATAS TENEMOS CUIDADO DE CREAR UN RVALUE TEMPORAL. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00132">132</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1adb436e23c7144ee0da3db08cac34c7ed"/><section>
    <title>regd_base_N_1()</title>
<indexterm><primary>regd_base_N_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00142">142</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ad9a96eb8b49ed44884da34180b85fe4f"/><section>
    <title>regd_base_N_B()</title>
<indexterm><primary>regd_base_N_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00158">158</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa001d41637e1a10c1284b5239b37159c"/><section>
    <title>regd_base_N_Bm1()</title>
<indexterm><primary>regd_base_N_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00150">150</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2ef368bdca679fa51aee6d18644b6a12"/><section>
    <title>regd_base_N_pow_n_B()</title>
<indexterm><primary>regd_base_N_pow_n_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00167">167</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af10d7f31743e81babe1c9d542f30f013"/><section>
    <title>regd_base_N_pow_n_B_m1()</title>
<indexterm><primary>regd_base_N_pow_n_B_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_N_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n&gt; <?linebreak?>requires ((n&gt;=0)&amp;&amp;(n &lt; N))</computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a2dbaa5b4a1bb00dcfbdfa0414ef53cbf">base_N_t</link>&lt; N &gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_N_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00176">176</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a55521e5b02fa0a1d56745066e20eab91"/><section>
    <title>regd_base_pow_n_B()</title>
<indexterm><primary>regd_base_pow_n_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00215">215</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a16e44b01fdd4e66c3390c34578f32e2c"/><section>
    <title>regd_base_pow_n_B_m1()</title>
<indexterm><primary>regd_base_pow_n_B_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_base_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_base_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00220">220</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af02f9cc5afcc26fb14077a939c26ce85"/><section>
    <title>regd_Bm1()</title>
<indexterm><primary>regd_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00240">240</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_af02f9cc5afcc26fb14077a939c26ce85_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af4fa7fec5b40b63434a86ee594adaed1"/><section>
    <title>regd_pow_n_B()</title>
<indexterm><primary>regd_pow_n_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00250">250</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_af4fa7fec5b40b63434a86ee594adaed1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1e76f417daec0f07cb28088baec9fb29"/><section>
    <title>regd_pow_n_B_m1()</title>
<indexterm><primary>regd_pow_n_B_m1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>regd_pow_n_B_m1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::regd_pow_n_B_m1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00255">255</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a1e76f417daec0f07cb28088baec9fb29_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a4c289fab138512b65681d3c6fa1df2cc"/><section>
    <title>rem_B()</title>
<indexterm><primary>rem_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rem_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t">reg_digs_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::rem_B (<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> n) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01215">1215</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6a98c20beaf0085e9b75ed6a73b6fac5"/><section>
    <title>rend()</title>
<indexterm><primary>rend</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>rend</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr decltype(auto) <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::rend ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00279">279</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3acacc33c0ddfe1a24835436f1e9d9f2"/><section>
    <title>reverse()</title>
<indexterm><primary>reverse</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>reverse</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::reverse ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00304">304</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1abc257d67bb67ef69b1a2491e58a705e1"/><section>
    <title>set_0()</title>
<indexterm><primary>set_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Funciones que ponen a constantes (constexpr) los objetos base_t. </para>
</para>

<para>
                <formalpara>
                    <title>
Parámetros del template</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>size_t</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;nontypeparam name=&quot;N&quot;&gt;&lt;/nontypeparam&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>this</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Devuelve</title>

<para></para>
</formalpara>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00710">710</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_abc257d67bb67ef69b1a2491e58a705e1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a6808c754c084ff40f4d106cf42c6f350"/><section>
    <title>set_1()</title>
<indexterm><primary>set_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00714">714</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a6808c754c084ff40f4d106cf42c6f350_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a635891fe476a0d485b6430eb003c66ff"/><section>
    <title>set_Bm1()</title>
<indexterm><primary>set_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00719">719</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a635891fe476a0d485b6430eb003c66ff_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a9736402ea76979c6f3b550b4e7f8a2f0"/><section>
    <title>set_dig()</title>
<indexterm><primary>set_dig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_dig</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_dig (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00724">724</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a0d7f94d520c14a413858bb3fd2ebae9c"/><section>
    <title>set_fill_1()</title>
<indexterm><primary>set_fill_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_fill_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_fill_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00733">733</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a8449e0efdd8a69da67e519ee2716c200"/><section>
    <title>set_fill_Bm1()</title>
<indexterm><primary>set_fill_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_fill_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_fill_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00738">738</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a02db587c3f90aadabbde0f92731f622d"/><section>
    <title>set_fill_dig()</title>
<indexterm><primary>set_fill_dig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_fill_dig</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_fill_dig (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> d)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00729">729</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a00ff39c7cca1ca76bfb5c0dd8021841b"/><section>
    <title>set_interval_0()</title>
<indexterm><primary>set_interval_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_i, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>&quot;Funciones que ponen a constantes(constexpr) los objetos un subintervalo
o subrango de base_t cualquiera&quot; </para>
</para>

<para>
                <formalpara>
                    <title>
Parámetros del template</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>size_t</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                &lt;nontypeparam name=&quot;N_i&quot;&gt;&lt;/nontypeparam&gt; &lt;nontypeparam name=&quot;N_pf&quot;&gt;&lt;/nontypeparam&gt; 
                <formalpara>
                    <title>
Parámetros</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>this</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Devuelve</title>

<para></para>
</formalpara>
OPERACION DE PONER A VALOR DIG_0 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T&lt;N&gt; </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00758">758</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af61633115c32e8183d2f606ce5d815fd"/><section>
    <title>set_interval_Bm1()</title>
<indexterm><primary>set_interval_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_i, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION DE PONER A VALOR DIG_Bm1 DEL ARRAY DESDE [N_0 , N_1) EN BASE_N_T&lt;N&gt; </para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00769">769</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a538c70fae56df59c2ddbe0868f24cdaf"/><section>
    <title>set_interval_dig()</title>
<indexterm><primary>set_interval_dig</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>set_interval_dig</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_i, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> N_pf&gt; <?linebreak?>requires ((N_i &lt; N_pf)&amp;&amp;(N_pf &lt;= L))</computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::set_interval_dig (<link linkend="_struct_num_repr_1_1reg__digs__t_1aeb4b982cfd4f96af707fc66dfef1653e">dig_t</link> dig)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>OPERACION DE PONER A VALOR DIG DEL ARRAY DESDE [N_0 , N_1) EN BASE_T summary=&quot;Funciones comparativas con constantes tipo constexpr&quot;&gt; param name=&quot;this&quot;&gt;</para>

<para>returns=&quot;bool&quot;&gt;</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00780">780</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a7c0ccc82f763ae0b3bf9fd78f218c206"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00284">284</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a2ff36f133f6bcf9cd379e54be025a214"/><section>
    <title>size_of_type_template_string_id()</title>
<indexterm><primary>size_of_type_template_string_id</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>size_of_type_template_string_id</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::size_of_type_template_string_id ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01537">1537</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ac1cf8584292927fea378bde2e3172fce"/><section>
    <title>ssi_0()</title>
<indexterm><primary>ssi_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00114">114</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ac1cf8584292927fea378bde2e3172fce_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af598442408cf2ed05923092e2ccb7cd2"/><section>
    <title>ssi_1()</title>
<indexterm><primary>ssi_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00116">116</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_af598442408cf2ed05923092e2ccb7cd2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a80fbaa972abc3ee57f5e8561eb4e944d"/><section>
    <title>ssi_B()</title>
<indexterm><primary>ssi_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00120">120</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a80fbaa972abc3ee57f5e8561eb4e944d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a5e0248eb0b0cef64dcbf5fb87823714e"/><section>
    <title>ssi_Bm1()</title>
<indexterm><primary>ssi_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00118">118</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a5e0248eb0b0cef64dcbf5fb87823714e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1ae6d6e6d6877d2fe389cdbacbaf7a6f63"/><section>
    <title>ssi_Bp1()</title>
<indexterm><primary>ssi_Bp1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ssi_Bp1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1a85164c4e411cc319dffcc2a9f8d152e3">SIG_SINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ssi_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00122">122</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_ae6d6e6d6877d2fe389cdbacbaf7a6f63_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa50d8abff6aa4a71c41fcb31c0441eb2"/><section>
    <title>subregister()</title>
<indexterm><primary>subregister</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>subregister</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> ibegin, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> iend&gt; <?linebreak?>requires ((iend &lt;= L)&amp;&amp;(ibegin &lt; L)&amp;&amp;(ibegin != iend))</computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1reg__digs__t_1a6ffaa21b6eacfbd5316c9921c11d4db0">reg_N_digs_t</link>&lt;(ibegin&lt; iend)?(iend-ibegin):(ibegin-iend)&gt; <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::subregister ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>TAKE A SUBREGISTER OF A REGISTER OF DIGITS. </para>
</para>
<para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01095">1095</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a869fb55d18546d9f677b47fd1dd1d8bd"/><section>
    <title>sui_0()</title>
<indexterm><primary>sui_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00104">104</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a869fb55d18546d9f677b47fd1dd1d8bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a80e523569503af77fdf36cada4de6700"/><section>
    <title>sui_1()</title>
<indexterm><primary>sui_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00106">106</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a80e523569503af77fdf36cada4de6700_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1adaa8d7c0417ae7a7e76237ba2d368ede"/><section>
    <title>sui_B()</title>
<indexterm><primary>sui_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00110">110</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_adaa8d7c0417ae7a7e76237ba2d368ede_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a51dd71f63e7ccf1c92adbe3876a5eb19"/><section>
    <title>sui_Bm1()</title>
<indexterm><primary>sui_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00108">108</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a51dd71f63e7ccf1c92adbe3876a5eb19_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1af47bb7bcb365e6060f836ec7d53c8565"/><section>
    <title>sui_Bp1()</title>
<indexterm><primary>sui_Bp1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>sui_Bp1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval <link linkend="_struct_num_repr_1_1reg__digs__t_1ada9e6c806df8dfa18e7bf154bafb3a21">SIG_UINT_T</link> <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::sui_Bp1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00112">112</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_af47bb7bcb365e6060f836ec7d53c8565_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa0d612930f23d7545926c12c6149759b"/><section>
    <title>swap()</title>
<indexterm><primary>swap</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>constexpr void <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::swap (<link linkend="_struct_num_repr_1_1reg__digs__t_1a4c1027d34df36c4d275a07ac00c3bf01">base_t</link> &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00302">302</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a7d907a0fc450d27d7937370a2209aed6"/><section>
    <title>to_type_template_string_id()</title>
<indexterm><primary>to_type_template_string_id</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>to_type_template_string_id</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static std::string <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::to_type_template_string_id ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l01533">1533</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aa6b20e53fc72fb5353a27a5db5205ea2"/><section>
    <title>ui_0()</title>
<indexterm><primary>ui_0</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_0</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_0 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00096">96</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_aa6b20e53fc72fb5353a27a5db5205ea2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a1ba13ed518c031c71ccd2aa99292c4f5"/><section>
    <title>ui_1()</title>
<indexterm><primary>ui_1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00098">98</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1reg__digs__t_a1ba13ed518c031c71ccd2aa99292c4f5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1a3d59521dadb20ede37c648c6ec863bda"/><section>
    <title>ui_B()</title>
<indexterm><primary>ui_B</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_B</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_B ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00102">102</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<anchor xml:id="_struct_num_repr_1_1reg__digs__t_1aafcea2323aac8fcedfc0f0780e46df5f"/><section>
    <title>ui_Bm1()</title>
<indexterm><primary>ui_Bm1</primary><secondary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::reg_digs_t&lt; UINT_T, B, L &gt;</primary><secondary>ui_Bm1</secondary></indexterm>
<computeroutput>template&lt;uint_type_for_radix_c UINT_T, UINT_T B, <link linkend="_namespace_num_repr_1aec1c647ac8c5e62a49e68acde727e3bf">size_t</link> L&gt; </computeroutput><para><computeroutput>static consteval UINT_T <link linkend="_struct_num_repr_1_1reg__digs__t">NumRepr::reg_digs_t</link>&lt; UINT_T, B, L &gt;::ui_Bm1 ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_reg__digs__t_8hpp_source_1l00100">100</link> del archivo <link linkend="_reg__digs__t_8hpp_source">reg_digs_t.hpp</link>.</para>
</section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_reg__digs__t_8hpp">reg_digs_t.hpp</link></section>
</section>
