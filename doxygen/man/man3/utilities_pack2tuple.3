.TH "utilities::pack2tuple< Ts >" 3 "Lunes, 2 de Enero de 2023" "NumericRepresentations" \" -*- nroff -*-
.ad l
.nh
.SH NAME
utilities::pack2tuple< Ts >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <utilities\&.hpp>\fP
.SS "Tipos públicos"

.in +1c
.ti -1c
.RI "using \fBtuple_type\fP = std::tuple< Ts\&.\&.\&. >"
.br
.ti -1c
.RI "template<unsigned K> using \fBelem_type\fP = typename std::tuple_element< K, \fBtuple_type\fP >::type"
.br
.in -1c
.SS "Métodos públicos"

.in +1c
.ti -1c
.RI "constexpr \fBtuple_type\fP \fBoperator()\fP (Ts &&\&.\&.\&.args) noexcept"
.br
.in -1c
.SS "Métodos públicos estáticos"

.in +1c
.ti -1c
.RI "static constexpr unsigned \fBpack_size\fP () noexcept"
.br
.ti -1c
.RI "template<unsigned J> static constexpr \fBelem_type\fP< J >::type \fBget\fP (Ts &&\&.\&.\&.args) noexcept"
.br
.in -1c
.SH "Descripción detallada"
.PP 

.SS "template<typename\&.\&.\&. Ts>
.br
struct utilities::pack2tuple< Ts >"template<class type_0, class type_1, \&.\&.\&. , class type_Nm1> struct apilamiento_de_tipos_t { type_0 obj_0; type_1 obj_1; \&.\&.\&.\&.\&.\&. \&.\&.\&.\&.\&. type_Nm1 obj_Nm1; }; example: apilamiento_de_tipos<int,std::string,double> objeto{1,'abc',2\&.98105}; objeto\&.obj_0 == 1; objeto\&.obj_1 == 'abc'; objeto\&.obj_Nm1 == 2\&.98105; A partir del estandar de C++11 template<class \&.\&.\&.type_i> struct apilamiento_de_tipos_t { type_0 obj_0; // sabemos type_i pero no type_0 type_1 obj_1; // sabemos type_i pero no type_1 \&.\&.\&.\&.\&.\&. \&.\&.\&.\&.\&. type_Nm1 obj_Nm1;// sabemos type_i pero no type_Nm1 }; type_i es un PACK tipo std::tupla<class \&.\&.\&. Ts>; 
.PP
Definición en la línea \fB40\fP del archivo \fButilities\&.hpp\fP\&.
.SH "Documentación de los 'Typedef' miembros de la clase"
.PP 
.SS "template<typename\&.\&.\&. Ts> template<unsigned K> using \fButilities::pack2tuple\fP< Ts >::elem_type =  typename std::tuple_element<K,\fBtuple_type\fP>::type"

.PP
Definición en la línea \fB48\fP del archivo \fButilities\&.hpp\fP\&.
.SS "template<typename\&.\&.\&. Ts> using \fButilities::pack2tuple\fP< Ts >::tuple_type =  std::tuple<Ts\&.\&.\&.>"

.PP
Definición en la línea \fB41\fP del archivo \fButilities\&.hpp\fP\&.
.SH "Documentación de las funciones miembro"
.PP 
.SS "template<typename\&.\&.\&. Ts> template<unsigned J> static constexpr \fBelem_type\fP< J >::type \fButilities::pack2tuple\fP< Ts >::get (Ts &&\&.\&.\&. args)\fC [inline]\fP, \fC [static]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB50\fP del archivo \fButilities\&.hpp\fP\&.
.SS "template<typename\&.\&.\&. Ts> constexpr \fBtuple_type\fP \fButilities::pack2tuple\fP< Ts >::operator() (Ts &&\&.\&.\&. args)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB43\fP del archivo \fButilities\&.hpp\fP\&.
.SS "template<typename\&.\&.\&. Ts> static constexpr unsigned \fButilities::pack2tuple\fP< Ts >::pack_size ()\fC [inline]\fP, \fC [static]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definición en la línea \fB42\fP del archivo \fButilities\&.hpp\fP\&.

.SH "Autor"
.PP 
Generado automáticamente por Doxygen para NumericRepresentations del código fuente\&.
