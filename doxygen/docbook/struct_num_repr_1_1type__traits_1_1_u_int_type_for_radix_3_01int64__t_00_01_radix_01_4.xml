<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4" xml:lang="es">
<title>Referencia de la plantilla de la Estructura NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</title>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;basic_types.hpp&gt;</computeroutput>
</para>
Diagrama de colaboración para NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a2abd275fa8217c58742235da140177af">actUIntType</link> = std::conditional_t&lt; <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link>, <link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>, <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1ad6ea6048b8f9950c4f9a410aa02c42e3">UIntType</link> = std::conditional_t&lt; <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link>, <link linkend="_namespace_num_repr_1_1type__traits_1a351a7a8b4e624e101708c6d24ffeefb6">UIntTypeForRadix_t</link>&lt; <link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>, <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1aaf94af528ce160b9be022594e34a409a">uint_value</link> &gt;, <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Atributos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a37f8c9eeec20df4eaf2c5d14b7ec7c0b">uint_value_max</link> = <link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">maxbase</link>&lt;<link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>&gt;()</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1aaf94af528ce160b9be022594e34a409a">uint_value</link> = static_cast&lt;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&gt;(Radix)</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a9b3c22d2bf94155fd7dcfecaecc25633">uint_value_sig</link> = static_cast&lt;<link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>&gt;(Radix)</para>
</listitem>
            <listitem><para>static constexpr bool <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link> = (Radix &lt;= <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a37f8c9eeec20df4eaf2c5d14b7ec7c0b">uint_value_max</link>)</para>
</listitem>
            <listitem><para>static constexpr <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a2abd275fa8217c58742235da140177af">actUIntType</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a40af177d353cb771aca97b1752241d79">act_uint_value</link> = ( <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link> ? <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a9b3c22d2bf94155fd7dcfecaecc25633">uint_value_sig</link> : <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1aaf94af528ce160b9be022594e34a409a">uint_value</link> )</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;std::int64_t Radix&gt;<?linebreak?>requires (Radix &gt; 1)<?linebreak?>struct NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</title></simplesect>

<para>DEFINICION PARA ESPECIALIZACION TYPE_TRAITS::UINTTYPEFORRADIX UNSIGNED RADIX VALID </para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a2abd275fa8217c58742235da140177af"/><section>
    <title>actUIntType</title>
<indexterm><primary>actUIntType</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>actUIntType</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::actUIntType =  std::conditional_t&lt; <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link>, <link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>, <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> &gt;</computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1ad6ea6048b8f9950c4f9a410aa02c42e3"/><section>
    <title>UIntType</title>
<indexterm><primary>UIntType</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>UIntType</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::UIntType =  std::conditional_t&lt; <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link>, <link linkend="_namespace_num_repr_1_1type__traits_1a351a7a8b4e624e101708c6d24ffeefb6">UIntTypeForRadix_t</link>&lt; <link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>, <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1aaf94af528ce160b9be022594e34a409a">uint_value</link> &gt;, <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> &gt;</computeroutput></para></section>
</section>
<section>
<title>Documentación de los datos miembro</title>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a40af177d353cb771aca97b1752241d79"/><section>
    <title>act_uint_value</title>
<indexterm><primary>act_uint_value</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>act_uint_value</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a2abd275fa8217c58742235da140177af">actUIntType</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::act_uint_value = ( <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89">bool_value</link> ? <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a9b3c22d2bf94155fd7dcfecaecc25633">uint_value_sig</link> : <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1aaf94af528ce160b9be022594e34a409a">uint_value</link> )<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a5af87fc0845a8552a9c4678f52b9df89"/><section>
    <title>bool_value</title>
<indexterm><primary>bool_value</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>bool_value</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::bool_value = (Radix &lt;= <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a37f8c9eeec20df4eaf2c5d14b7ec7c0b">uint_value_max</link>)<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1aaf94af528ce160b9be022594e34a409a"/><section>
    <title>uint_value</title>
<indexterm><primary>uint_value</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>uint_value</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::uint_value = static_cast&lt;<link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link>&gt;(Radix)<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a37f8c9eeec20df4eaf2c5d14b7ec7c0b"/><section>
    <title>uint_value_max</title>
<indexterm><primary>uint_value_max</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>uint_value_max</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_basic__types_8hpp_1a339c01c5b79a3378ee67ee5a6f293cc7">uint64_t</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::uint_value_max = <link linkend="_namespace_num_repr_1_1type__traits_1a4f0f4b9cd9964b406c8299bcbd74f506">maxbase</link>&lt;<link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>&gt;()<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix_3_01int64__t_00_01_radix_01_4_1a9b3c22d2bf94155fd7dcfecaecc25633"/><section>
    <title>uint_value_sig</title>
<indexterm><primary>uint_value_sig</primary><secondary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</secondary></indexterm>
<indexterm><primary>NumRepr::type_traits::UIntTypeForRadix&lt; int64_t, Radix &gt;</primary><secondary>uint_value_sig</secondary></indexterm>
<computeroutput>template&lt;std::int64_t Radix&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link> <link linkend="_struct_num_repr_1_1type__traits_1_1_u_int_type_for_radix">NumRepr::type_traits::UIntTypeForRadix</link>&lt; int64_t, Radix &gt;::uint_value_sig = static_cast&lt;<link linkend="_basic__types_8hpp_1ad2500cd316889e2ea5c919df9288f2a6">uint32_t</link>&gt;(Radix)<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_basic__types_8hpp">basic_types.hpp</link></section>
</section>
