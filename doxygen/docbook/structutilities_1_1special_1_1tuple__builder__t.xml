<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structutilities_1_1special_1_1tuple__builder__t" xml:lang="es">
<title>Referencia de la plantilla de la Estructura utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</title>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary></indexterm>
<para>

<para>TEMPLATE GENERAL. </para>
 
</para>
<para>
<computeroutput>#include &lt;utilities.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Tipos públicos    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_structutilities_1_1special_1_1tuple__builder__t_1aaa43bea40f3950c7306dec764af33e3a">type</link> = std::int64_t</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Métodos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static consteval decltype(auto) <link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a8e1ed3d327091c5f21f835adea83ec3f">build</link> () noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Atributos públicos estáticos    </title>
        <itemizedlist>
            <listitem><para>static constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a5b618e051095d223d94c0b5ee22078ce">unit</link> = static_cast&lt;std::int64_t&gt;(1)</para>
</listitem>
            <listitem><para>static constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t_1a7f4fcc4e63e19549e07ef49da9f04398">value</link> {IntObj_ct}</para>
</listitem>
            <listitem><para>static constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t_1aa5fd05539d987050763c55b8d0ca8aac">begin_value</link> {BeginIntObj_ct}</para>
</listitem>
            <listitem><para>static constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t_1ade677d56bc43f6930b30b97deab2928b">end_value</link> {EndIntObj_ct}</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Descripción detallada</title>
<simplesect><title>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt;<?linebreak?>requires ((BeginIntObj_ct &gt;= EndIntObj_ct)&amp;&amp;(IntObj_ct &gt;= BeginIntObj_ct))<?linebreak?>struct utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</title></simplesect>

<para>TEMPLATE GENERAL. </para>



<para>OBTENER UNA TUPLA EN TIEMPO DE COMPILACION DONDE CADA POSICION ESTA INICIALIZADA PERO CON UNA LLAMADA DISTINTA A FUNCION POR CADA INDICE </para>
<para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00232">232</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<section>
<title>Documentación de los &apos;Typedef&apos; miembros de la clase</title>
<anchor xml:id="_structutilities_1_1special_1_1tuple__builder__t_1aaa43bea40f3950c7306dec764af33e3a"/><section>
    <title>type</title>
<indexterm><primary>type</primary><secondary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</secondary></indexterm>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary><secondary>type</secondary></indexterm>
<computeroutput>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>using <link linkend="_structutilities_1_1special_1_1tuple__builder__t">utilities::special::tuple_builder_t</link>&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;::type =  std::int64_t</computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00234">234</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
</section>
<section>
<title>Documentación de las funciones miembro</title>
<anchor xml:id="_structutilities_1_1special_1_1tuple__builder__t_1a8e1ed3d327091c5f21f835adea83ec3f"/><section>
    <title>build()</title>
<indexterm><primary>build</primary><secondary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</secondary></indexterm>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary><secondary>build</secondary></indexterm>
<computeroutput>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>static consteval decltype(auto) <link linkend="_structutilities_1_1special_1_1tuple__builder__t">utilities::special::tuple_builder_t</link>&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;::build ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00243">243</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
Gráfico de llamadas para esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structutilities_1_1special_1_1tuple__builder__t_a8e1ed3d327091c5f21f835adea83ec3f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Gráfico de llamadas a esta función:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structutilities_1_1special_1_1tuple__builder__t_a8e1ed3d327091c5f21f835adea83ec3f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Documentación de los datos miembro</title>
<anchor xml:id="_structutilities_1_1special_1_1tuple__builder__t_1aa5fd05539d987050763c55b8d0ca8aac"/><section>
    <title>begin_value</title>
<indexterm><primary>begin_value</primary><secondary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</secondary></indexterm>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary><secondary>begin_value</secondary></indexterm>
<computeroutput>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t">utilities::special::tuple_builder_t</link>&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;::begin_value {BeginIntObj_ct}<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00239">239</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1special_1_1tuple__builder__t_1ade677d56bc43f6930b30b97deab2928b"/><section>
    <title>end_value</title>
<indexterm><primary>end_value</primary><secondary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</secondary></indexterm>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary><secondary>end_value</secondary></indexterm>
<computeroutput>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t">utilities::special::tuple_builder_t</link>&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;::end_value {EndIntObj_ct}<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00240">240</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1special_1_1tuple__builder__t_1a5b618e051095d223d94c0b5ee22078ce"/><section>
    <title>unit</title>
<indexterm><primary>unit</primary><secondary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</secondary></indexterm>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary><secondary>unit</secondary></indexterm>
<computeroutput>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t">utilities::special::tuple_builder_t</link>&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;::unit = static_cast&lt;std::int64_t&gt;(1)<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00236">236</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<anchor xml:id="_structutilities_1_1special_1_1tuple__builder__t_1a7f4fcc4e63e19549e07ef49da9f04398"/><section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</secondary></indexterm>
<indexterm><primary>utilities::special::tuple_builder_t&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;std::int64_t IntObj_ct, std::int64_t BeginIntObj_ct, std::int64_t EndIntObj_ct, std::int64_t Base, template&lt; std::int64_t, std::int64_t &gt; class Funct_tt&gt; </computeroutput><para><computeroutput>constexpr std::int64_t <link linkend="_structutilities_1_1special_1_1tuple__builder__t">utilities::special::tuple_builder_t</link>&lt; IntObj_ct, BeginIntObj_ct, EndIntObj_ct, Base, Funct_tt &gt;::value {IntObj_ct}<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>
Definición en la línea <link linkend="_utilities_8hpp_source_1l00238">238</link> del archivo <link linkend="_utilities_8hpp_source">utilities.hpp</link>.</para>
</section>
<para>
La documentación para esta estructura fue generada a partir del siguiente fichero:</para>
<link linkend="_utilities_8hpp">utilities.hpp</link></section>
</section>
